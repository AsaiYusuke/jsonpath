package jsonpath

// Code generated by C:\Users\prome\go\bin\peg.exe jsonpath.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleexpression
	ruleEND
	rulejsonpath
	rulejsonpathParameter
	rulecontinuedJsonpath
	rulerootNode
	ruleparameterRootNode
	rulechildNode
	rulefunction
	rulefunctionName
	rulebracketNode
	rulerootIdentifier
	rulecurrentRootIdentifier
	ruledotChildIdentifier
	rulebracketChildIdentifier
	rulebracketNodeIdentifiers
	rulebracketNodeIdentifier
	rulesingleQuotedNodeIdentifier
	ruledoubleQuotedNodeIdentifier
	rulesepBracketIdentifier
	rulequalifier
	ruleunion
	ruleindex
	ruleslice
	ruleanyIndex
	ruleindexNumber
	rulesepUnion
	rulesepSlice
	rulescript
	rulecommand
	rulefilter
	rulequery
	ruleandQuery
	rulebasicQuery
	rulelogicOr
	rulelogicAnd
	rulelogicNot
	rulecomparator
	ruleqParam
	ruleqNumericParam
	ruleqLiteral
	rulesingleJsonpathFilter
	rulejsonpathFilter
	rulelNumber
	rulelBool
	rulelString
	rulelNull
	ruleregex
	rulesquareBracketStart
	rulesquareBracketEnd
	rulescriptStart
	rulescriptEnd
	rulefilterStart
	rulefilterEnd
	rulesubQueryStart
	rulesubQueryEnd
	rulespace
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
)

var rul3s = [...]string{
	"Unknown",
	"expression",
	"END",
	"jsonpath",
	"jsonpathParameter",
	"continuedJsonpath",
	"rootNode",
	"parameterRootNode",
	"childNode",
	"function",
	"functionName",
	"bracketNode",
	"rootIdentifier",
	"currentRootIdentifier",
	"dotChildIdentifier",
	"bracketChildIdentifier",
	"bracketNodeIdentifiers",
	"bracketNodeIdentifier",
	"singleQuotedNodeIdentifier",
	"doubleQuotedNodeIdentifier",
	"sepBracketIdentifier",
	"qualifier",
	"union",
	"index",
	"slice",
	"anyIndex",
	"indexNumber",
	"sepUnion",
	"sepSlice",
	"script",
	"command",
	"filter",
	"query",
	"andQuery",
	"basicQuery",
	"logicOr",
	"logicAnd",
	"logicNot",
	"comparator",
	"qParam",
	"qNumericParam",
	"qLiteral",
	"singleJsonpathFilter",
	"jsonpathFilter",
	"lNumber",
	"lBool",
	"lString",
	"lNull",
	"regex",
	"squareBracketStart",
	"squareBracketEnd",
	"scriptStart",
	"scriptEnd",
	"filterStart",
	"filterEnd",
	"subQueryStart",
	"subQueryEnd",
	"space",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type pegJSONPathParser struct {
	jsonPathParser

	Buffer string
	buffer []rune
	rules  [106]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *pegJSONPathParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *pegJSONPathParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *pegJSONPathParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *pegJSONPathParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *pegJSONPathParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *pegJSONPathParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *pegJSONPathParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.root = p.pop().(syntaxNode)

		case ruleAction1:

			p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)

		case ruleAction2:

			p.setNodeChain()
			p.updateRootValueGroup()

		case ruleAction3:

			p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))

		case ruleAction4:

			p.setLastNodeText(text)

		case ruleAction5:

			p.pushFunction(text, p.pop().(string))

		case ruleAction6:

			p.push(text)

		case ruleAction7:

			p.setLastNodeText(text)

		case ruleAction8:

			p.pushRootIdentifier()

		case ruleAction9:

			p.pushCurrentRootIdentifier()

		case ruleAction10:

			unescapedText := p.unescape(text)
			if unescapedText == `*` {
				p.pushChildWildcardIdentifier(unescapedText)
			} else {
				p.pushChildSingleIdentifier(unescapedText)
			}

		case ruleAction11:

			identifier := p.pop().([]string)
			if len(identifier) > 1 {
				p.pushChildMultiIdentifier(identifier)
			} else {
				p.pushChildSingleIdentifier(identifier[0])
			}

		case ruleAction12:

			identifier2 := p.pop().([]string)
			identifier1 := p.pop().([]string)
			p.push(append(identifier1, identifier2...))

		case ruleAction13:

			p.push([]string{p.pop().(string)})

		case ruleAction14:

			p.push(p.unescape(text))

		case ruleAction15:
			// '
			p.push(p.unescape(text))

		case ruleAction16:

			childIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion.merge(childIndexUnion)
			parentIndexUnion.setValueGroup()
			p.push(parentIndexUnion)

		case ruleAction17:

			step := p.pop().(*syntaxIndexSubscript)
			end := p.pop().(*syntaxIndexSubscript)
			start := p.pop().(*syntaxIndexSubscript)

			if step.isOmitted || step.number == 0 {
				step.number = 1
			}

			if step.number > 0 {
				p.pushSlicePositiveStepSubscript(start, end, step)
			} else {
				p.pushSliceNegativeStepSubscript(start, end, step)
			}

		case ruleAction18:

			p.pushIndexSubscript(text)

		case ruleAction19:

			p.pushWildcardSubscript()

		case ruleAction20:

			p.pushUnionQualifier(p.pop().(syntaxSubscript))

		case ruleAction21:

			p.pushIndexSubscript(`1`)

		case ruleAction22:

			if len(text) > 0 {
				p.pushIndexSubscript(text)
			} else {
				p.pushOmittedIndexSubscript(`0`)
			}

		case ruleAction23:

			p.pushScriptQualifier(text)

		case ruleAction24:

			p.pushFilterQualifier(p.pop().(syntaxQuery))

		case ruleAction25:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalOr(leftQuery, rightQuery)

		case ruleAction26:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalAnd(leftQuery, rightQuery)

		case ruleAction27:

			if !p.hasErr() {
				query := p.pop().(syntaxQuery)
				p.push(query)

				if logicalNot, ok := query.(*syntaxLogicalNot); ok {
					query = (*logicalNot).query
				}
				if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
					_, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
					_, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
					if leftIsCurrentRoot && rigthIsCurrentRoot {
						p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
					}
				}
			}

		case ruleAction28:

			_ = p.pop().(bool)
			jsonpathFilter := p.pop().(syntaxQuery)
			if text[0:1] == `!` {
				p.pushLogicalNot(jsonpathFilter)
			} else {
				p.push(jsonpathFilter)
			}

		case ruleAction29:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareEQ(leftParam, rightParam)

		case ruleAction30:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareNE(leftParam, rightParam)

		case ruleAction31:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGE(leftParam, rightParam)

		case ruleAction32:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGT(leftParam, rightParam)

		case ruleAction33:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLE(leftParam, rightParam)

		case ruleAction34:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLT(leftParam, rightParam)

		case ruleAction35:

			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareRegex(leftParam, text)

		case ruleAction36:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction37:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction38:

			isLiteral := p.pop().(bool)
			param := p.pop().(syntaxQueryJSONPathParameter)
			if !p.hasErr() && param.isValueGroupParameter() {
				p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
			}
			p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)

		case ruleAction39:

			p.saveParams()

		case ruleAction40:

			p.loadParams()

			node := p.pop().(syntaxNode)
			checkNode := node
			if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
				checkNode = aggregateFunction.param
			}

			switch checkNode.(type) {
			case *syntaxRootIdentifier:
				p.pushCompareParameterRoot(node)
				p.push(true)
			case *syntaxCurrentRootIdentifier:
				p.pushCompareParameterCurrentRoot(node)
				p.push(false)
			default:
				p.push(&syntaxQueryParamRoot{})
				p.push(true)
			}

		case ruleAction41:

			p.push(p.toFloat(text))

		case ruleAction42:

			p.push(true)

		case ruleAction43:

			p.push(false)

		case ruleAction44:

			p.push(p.unescape(text))

		case ruleAction45:
			// '
			p.push(p.unescape(text))

		case ruleAction46:

			p.push(nil)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *pegJSONPathParser) Init(options ...func(*pegJSONPathParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 expression <- <((jsonpath END Action0) / (jsonpath? <.*> END Action1))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulejsonpath]() {
						goto l3
					}
					if !_rules[ruleEND]() {
						goto l3
					}
					if !_rules[ruleAction0]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulejsonpath]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					{
						position6 := position
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(rulePegText, position6)
					}
					if !_rules[ruleEND]() {
						goto l0
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
				}
			l2:
				add(ruleexpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 END <- <!.> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !matchDot() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleEND, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 jsonpath <- <(space rootNode continuedJsonpath)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[rulerootNode]() {
					goto l12
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l12
				}
				add(rulejsonpath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 jsonpathParameter <- <(space parameterRootNode continuedJsonpath)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[rulespace]() {
					goto l14
				}
				if !_rules[ruleparameterRootNode]() {
					goto l14
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l14
				}
				add(rulejsonpathParameter, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 continuedJsonpath <- <(childNode* function* space Action2)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[rulechildNode]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
			l20:
				{
					position21, tokenIndex21 := position, tokenIndex
					if !_rules[rulefunction]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position21, tokenIndex21
				}
				if !_rules[rulespace]() {
					goto l16
				}
				if !_rules[ruleAction2]() {
					goto l16
				}
				add(rulecontinuedJsonpath, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 rootNode <- <(rootIdentifier / bracketNode / dotChildIdentifier)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[rulebracketNode]() {
						goto l26
					}
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruledotChildIdentifier]() {
						goto l22
					}
				}
			l24:
				add(rulerootNode, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 parameterRootNode <- <(rootIdentifier / currentRootIdentifier)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position29, tokenIndex29
					if !_rules[rulecurrentRootIdentifier]() {
						goto l27
					}
				}
			l29:
				add(ruleparameterRootNode, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 7 childNode <- <(('.' '.' (bracketNode / dotChildIdentifier) Action3) / (<('.' dotChildIdentifier)> Action4) / bracketNode)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33, tokenIndex33 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulebracketNode]() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruledotChildIdentifier]() {
							goto l34
						}
					}
				l35:
					if !_rules[ruleAction3]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					{
						position38 := position
						if buffer[position] != rune('.') {
							goto l37
						}
						position++
						if !_rules[ruledotChildIdentifier]() {
							goto l37
						}
						add(rulePegText, position38)
					}
					if !_rules[ruleAction4]() {
						goto l37
					}
					goto l33
				l37:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[rulebracketNode]() {
						goto l31
					}
				}
			l33:
				add(rulechildNode, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 8 function <- <(<('.' functionName ('(' ')'))> Action5)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					if buffer[position] != rune('.') {
						goto l39
					}
					position++
					if !_rules[rulefunctionName]() {
						goto l39
					}
					if buffer[position] != rune('(') {
						goto l39
					}
					position++
					if buffer[position] != rune(')') {
						goto l39
					}
					position++
					add(rulePegText, position41)
				}
				if !_rules[ruleAction5]() {
					goto l39
				}
				add(rulefunction, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 functionName <- <(<('-' / '_' / [a-z] / [A-Z])+> Action6)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44 := position
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('_') {
							goto l49
						}
						position++
						goto l47
					l49:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l50
						}
						position++
						goto l47
					l50:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l42
						}
						position++
					}
				l47:
				l45:
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('_') {
								goto l53
							}
							position++
							goto l51
						l53:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l54
							}
							position++
							goto l51
						l54:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l46
							}
							position++
						}
					l51:
						goto l45
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					add(rulePegText, position44)
				}
				if !_rules[ruleAction6]() {
					goto l42
				}
				add(rulefunctionName, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 bracketNode <- <(<(squareBracketStart (bracketChildIdentifier / qualifier) squareBracketEnd)> Action7)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57 := position
					if !_rules[rulesquareBracketStart]() {
						goto l55
					}
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[rulebracketChildIdentifier]() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if !_rules[rulequalifier]() {
							goto l55
						}
					}
				l58:
					if !_rules[rulesquareBracketEnd]() {
						goto l55
					}
					add(rulePegText, position57)
				}
				if !_rules[ruleAction7]() {
					goto l55
				}
				add(rulebracketNode, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 rootIdentifier <- <('$' Action8)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('$') {
					goto l60
				}
				position++
				if !_rules[ruleAction8]() {
					goto l60
				}
				add(rulerootIdentifier, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 12 currentRootIdentifier <- <('@' Action9)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('@') {
					goto l62
				}
				position++
				if !_rules[ruleAction9]() {
					goto l62
				}
				add(rulecurrentRootIdentifier, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 13 dotChildIdentifier <- <(<(('\\' '\\') / ('\\' ('.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ')) / (!('\\' / '.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ') .))+> !('(' ')') Action10)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66 := position
					{
						position69, tokenIndex69 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l70
						}
						position++
						if buffer[position] != rune('\\') {
							goto l70
						}
						position++
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if buffer[position] != rune('\\') {
							goto l71
						}
						position++
						{
							position72, tokenIndex72 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l73
							}
							position++
							goto l72
						l73:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('[') {
								goto l74
							}
							position++
							goto l72
						l74:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('(') {
								goto l75
							}
							position++
							goto l72
						l75:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune(')') {
								goto l76
							}
							position++
							goto l72
						l76:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('=') {
								goto l77
							}
							position++
							goto l72
						l77:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('!') {
								goto l78
							}
							position++
							goto l72
						l78:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('>') {
								goto l79
							}
							position++
							goto l72
						l79:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('<') {
								goto l80
							}
							position++
							goto l72
						l80:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('\t') {
								goto l81
							}
							position++
							goto l72
						l81:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('\r') {
								goto l82
							}
							position++
							goto l72
						l82:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('\n') {
								goto l83
							}
							position++
							goto l72
						l83:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune(' ') {
								goto l71
							}
							position++
						}
					l72:
						goto l69
					l71:
						position, tokenIndex = position69, tokenIndex69
						{
							position84, tokenIndex84 := position, tokenIndex
							{
								position85, tokenIndex85 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l86
								}
								position++
								goto l85
							l86:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('.') {
									goto l87
								}
								position++
								goto l85
							l87:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('[') {
									goto l88
								}
								position++
								goto l85
							l88:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('(') {
									goto l89
								}
								position++
								goto l85
							l89:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune(')') {
									goto l90
								}
								position++
								goto l85
							l90:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('=') {
									goto l91
								}
								position++
								goto l85
							l91:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('!') {
									goto l92
								}
								position++
								goto l85
							l92:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('>') {
									goto l93
								}
								position++
								goto l85
							l93:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('<') {
									goto l94
								}
								position++
								goto l85
							l94:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('\t') {
									goto l95
								}
								position++
								goto l85
							l95:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('\r') {
									goto l96
								}
								position++
								goto l85
							l96:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('\n') {
									goto l97
								}
								position++
								goto l85
							l97:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune(' ') {
									goto l84
								}
								position++
							}
						l85:
							goto l64
						l84:
							position, tokenIndex = position84, tokenIndex84
						}
						if !matchDot() {
							goto l64
						}
					}
				l69:
				l67:
					{
						position68, tokenIndex68 := position, tokenIndex
						{
							position98, tokenIndex98 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l99
							}
							position++
							if buffer[position] != rune('\\') {
								goto l99
							}
							position++
							goto l98
						l99:
							position, tokenIndex = position98, tokenIndex98
							if buffer[position] != rune('\\') {
								goto l100
							}
							position++
							{
								position101, tokenIndex101 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l102
								}
								position++
								goto l101
							l102:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('[') {
									goto l103
								}
								position++
								goto l101
							l103:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('(') {
									goto l104
								}
								position++
								goto l101
							l104:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune(')') {
									goto l105
								}
								position++
								goto l101
							l105:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('=') {
									goto l106
								}
								position++
								goto l101
							l106:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('!') {
									goto l107
								}
								position++
								goto l101
							l107:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('>') {
									goto l108
								}
								position++
								goto l101
							l108:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('<') {
									goto l109
								}
								position++
								goto l101
							l109:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('\t') {
									goto l110
								}
								position++
								goto l101
							l110:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('\r') {
									goto l111
								}
								position++
								goto l101
							l111:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune('\n') {
									goto l112
								}
								position++
								goto l101
							l112:
								position, tokenIndex = position101, tokenIndex101
								if buffer[position] != rune(' ') {
									goto l100
								}
								position++
							}
						l101:
							goto l98
						l100:
							position, tokenIndex = position98, tokenIndex98
							{
								position113, tokenIndex113 := position, tokenIndex
								{
									position114, tokenIndex114 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l115
									}
									position++
									goto l114
								l115:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('.') {
										goto l116
									}
									position++
									goto l114
								l116:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('[') {
										goto l117
									}
									position++
									goto l114
								l117:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('(') {
										goto l118
									}
									position++
									goto l114
								l118:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune(')') {
										goto l119
									}
									position++
									goto l114
								l119:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('=') {
										goto l120
									}
									position++
									goto l114
								l120:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('!') {
										goto l121
									}
									position++
									goto l114
								l121:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('>') {
										goto l122
									}
									position++
									goto l114
								l122:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('<') {
										goto l123
									}
									position++
									goto l114
								l123:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('\t') {
										goto l124
									}
									position++
									goto l114
								l124:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('\r') {
										goto l125
									}
									position++
									goto l114
								l125:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune('\n') {
										goto l126
									}
									position++
									goto l114
								l126:
									position, tokenIndex = position114, tokenIndex114
									if buffer[position] != rune(' ') {
										goto l113
									}
									position++
								}
							l114:
								goto l68
							l113:
								position, tokenIndex = position113, tokenIndex113
							}
							if !matchDot() {
								goto l68
							}
						}
					l98:
						goto l67
					l68:
						position, tokenIndex = position68, tokenIndex68
					}
					add(rulePegText, position66)
				}
				{
					position127, tokenIndex127 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l127
					}
					position++
					if buffer[position] != rune(')') {
						goto l127
					}
					position++
					goto l64
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
				if !_rules[ruleAction10]() {
					goto l64
				}
				add(ruledotChildIdentifier, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 14 bracketChildIdentifier <- <(bracketNodeIdentifiers Action11)> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				if !_rules[rulebracketNodeIdentifiers]() {
					goto l128
				}
				if !_rules[ruleAction11]() {
					goto l128
				}
				add(rulebracketChildIdentifier, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 15 bracketNodeIdentifiers <- <(bracketNodeIdentifier (sepBracketIdentifier bracketNodeIdentifier Action12)*)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[rulebracketNodeIdentifier]() {
					goto l130
				}
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[rulesepBracketIdentifier]() {
						goto l133
					}
					if !_rules[rulebracketNodeIdentifier]() {
						goto l133
					}
					if !_rules[ruleAction12]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				add(rulebracketNodeIdentifiers, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 16 bracketNodeIdentifier <- <((singleQuotedNodeIdentifier / doubleQuotedNodeIdentifier) Action13)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[rulesingleQuotedNodeIdentifier]() {
						goto l137
					}
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					if !_rules[ruledoubleQuotedNodeIdentifier]() {
						goto l134
					}
				}
			l136:
				if !_rules[ruleAction13]() {
					goto l134
				}
				add(rulebracketNodeIdentifier, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 17 singleQuotedNodeIdentifier <- <('\'' <(('\\' '\\') / ('\\' '\'') / (!('\\' / '\'') .))*> '\'' Action14)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if buffer[position] != rune('\'') {
					goto l138
				}
				position++
				{
					position140 := position
				l141:
					{
						position142, tokenIndex142 := position, tokenIndex
						{
							position143, tokenIndex143 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l144
							}
							position++
							if buffer[position] != rune('\\') {
								goto l144
							}
							position++
							goto l143
						l144:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('\\') {
								goto l145
							}
							position++
							if buffer[position] != rune('\'') {
								goto l145
							}
							position++
							goto l143
						l145:
							position, tokenIndex = position143, tokenIndex143
							{
								position146, tokenIndex146 := position, tokenIndex
								{
									position147, tokenIndex147 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l148
									}
									position++
									goto l147
								l148:
									position, tokenIndex = position147, tokenIndex147
									if buffer[position] != rune('\'') {
										goto l146
									}
									position++
								}
							l147:
								goto l142
							l146:
								position, tokenIndex = position146, tokenIndex146
							}
							if !matchDot() {
								goto l142
							}
						}
					l143:
						goto l141
					l142:
						position, tokenIndex = position142, tokenIndex142
					}
					add(rulePegText, position140)
				}
				if buffer[position] != rune('\'') {
					goto l138
				}
				position++
				if !_rules[ruleAction14]() {
					goto l138
				}
				add(rulesingleQuotedNodeIdentifier, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 18 doubleQuotedNodeIdentifier <- <('"' <(('\\' '\\') / ('\\' '"') / (!('\\' / '"') .))*> '"' Action15)> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if buffer[position] != rune('"') {
					goto l149
				}
				position++
				{
					position151 := position
				l152:
					{
						position153, tokenIndex153 := position, tokenIndex
						{
							position154, tokenIndex154 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l155
							}
							position++
							if buffer[position] != rune('\\') {
								goto l155
							}
							position++
							goto l154
						l155:
							position, tokenIndex = position154, tokenIndex154
							if buffer[position] != rune('\\') {
								goto l156
							}
							position++
							if buffer[position] != rune('"') {
								goto l156
							}
							position++
							goto l154
						l156:
							position, tokenIndex = position154, tokenIndex154
							{
								position157, tokenIndex157 := position, tokenIndex
								{
									position158, tokenIndex158 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l159
									}
									position++
									goto l158
								l159:
									position, tokenIndex = position158, tokenIndex158
									if buffer[position] != rune('"') {
										goto l157
									}
									position++
								}
							l158:
								goto l153
							l157:
								position, tokenIndex = position157, tokenIndex157
							}
							if !matchDot() {
								goto l153
							}
						}
					l154:
						goto l152
					l153:
						position, tokenIndex = position153, tokenIndex153
					}
					add(rulePegText, position151)
				}
				if buffer[position] != rune('"') {
					goto l149
				}
				position++
				if !_rules[ruleAction15]() {
					goto l149
				}
				add(ruledoubleQuotedNodeIdentifier, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 19 sepBracketIdentifier <- <(space ',' space)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if !_rules[rulespace]() {
					goto l160
				}
				if buffer[position] != rune(',') {
					goto l160
				}
				position++
				if !_rules[rulespace]() {
					goto l160
				}
				add(rulesepBracketIdentifier, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 20 qualifier <- <(union / script / filter)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					if !_rules[ruleunion]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[rulescript]() {
						goto l166
					}
					goto l164
				l166:
					position, tokenIndex = position164, tokenIndex164
					if !_rules[rulefilter]() {
						goto l162
					}
				}
			l164:
				add(rulequalifier, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 21 union <- <(index (sepUnion index Action16)*)> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if !_rules[ruleindex]() {
					goto l167
				}
			l169:
				{
					position170, tokenIndex170 := position, tokenIndex
					if !_rules[rulesepUnion]() {
						goto l170
					}
					if !_rules[ruleindex]() {
						goto l170
					}
					if !_rules[ruleAction16]() {
						goto l170
					}
					goto l169
				l170:
					position, tokenIndex = position170, tokenIndex170
				}
				add(ruleunion, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 22 index <- <(((slice Action17) / (<indexNumber> Action18) / ('*' Action19)) Action20)> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				{
					position173, tokenIndex173 := position, tokenIndex
					if !_rules[ruleslice]() {
						goto l174
					}
					if !_rules[ruleAction17]() {
						goto l174
					}
					goto l173
				l174:
					position, tokenIndex = position173, tokenIndex173
					{
						position176 := position
						if !_rules[ruleindexNumber]() {
							goto l175
						}
						add(rulePegText, position176)
					}
					if !_rules[ruleAction18]() {
						goto l175
					}
					goto l173
				l175:
					position, tokenIndex = position173, tokenIndex173
					if buffer[position] != rune('*') {
						goto l171
					}
					position++
					if !_rules[ruleAction19]() {
						goto l171
					}
				}
			l173:
				if !_rules[ruleAction20]() {
					goto l171
				}
				add(ruleindex, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 23 slice <- <(anyIndex sepSlice anyIndex ((sepSlice anyIndex) / (space Action21)))> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if !_rules[ruleanyIndex]() {
					goto l177
				}
				if !_rules[rulesepSlice]() {
					goto l177
				}
				if !_rules[ruleanyIndex]() {
					goto l177
				}
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[rulesepSlice]() {
						goto l180
					}
					if !_rules[ruleanyIndex]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					if !_rules[rulespace]() {
						goto l177
					}
					if !_rules[ruleAction21]() {
						goto l177
					}
				}
			l179:
				add(ruleslice, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 24 anyIndex <- <(<indexNumber?> Action22)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183 := position
					{
						position184, tokenIndex184 := position, tokenIndex
						if !_rules[ruleindexNumber]() {
							goto l184
						}
						goto l185
					l184:
						position, tokenIndex = position184, tokenIndex184
					}
				l185:
					add(rulePegText, position183)
				}
				if !_rules[ruleAction22]() {
					goto l181
				}
				add(ruleanyIndex, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 25 indexNumber <- <(('-' / '+')? [0-9]+)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				{
					position188, tokenIndex188 := position, tokenIndex
					{
						position190, tokenIndex190 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l191
						}
						position++
						goto l190
					l191:
						position, tokenIndex = position190, tokenIndex190
						if buffer[position] != rune('+') {
							goto l188
						}
						position++
					}
				l190:
					goto l189
				l188:
					position, tokenIndex = position188, tokenIndex188
				}
			l189:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l186
				}
				position++
			l192:
				{
					position193, tokenIndex193 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l193
					}
					position++
					goto l192
				l193:
					position, tokenIndex = position193, tokenIndex193
				}
				add(ruleindexNumber, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 26 sepUnion <- <(space ',' space)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if !_rules[rulespace]() {
					goto l194
				}
				if buffer[position] != rune(',') {
					goto l194
				}
				position++
				if !_rules[rulespace]() {
					goto l194
				}
				add(rulesepUnion, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 27 sepSlice <- <(space ':' space)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if !_rules[rulespace]() {
					goto l196
				}
				if buffer[position] != rune(':') {
					goto l196
				}
				position++
				if !_rules[rulespace]() {
					goto l196
				}
				add(rulesepSlice, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 28 script <- <(scriptStart <command> scriptEnd Action23)> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if !_rules[rulescriptStart]() {
					goto l198
				}
				{
					position200 := position
					if !_rules[rulecommand]() {
						goto l198
					}
					add(rulePegText, position200)
				}
				if !_rules[rulescriptEnd]() {
					goto l198
				}
				if !_rules[ruleAction23]() {
					goto l198
				}
				add(rulescript, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 29 command <- <(!')' .)+> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				{
					position205, tokenIndex205 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l205
					}
					position++
					goto l201
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
				if !matchDot() {
					goto l201
				}
			l203:
				{
					position204, tokenIndex204 := position, tokenIndex
					{
						position206, tokenIndex206 := position, tokenIndex
						if buffer[position] != rune(')') {
							goto l206
						}
						position++
						goto l204
					l206:
						position, tokenIndex = position206, tokenIndex206
					}
					if !matchDot() {
						goto l204
					}
					goto l203
				l204:
					position, tokenIndex = position204, tokenIndex204
				}
				add(rulecommand, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 30 filter <- <(filterStart query filterEnd Action24)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				if !_rules[rulefilterStart]() {
					goto l207
				}
				if !_rules[rulequery]() {
					goto l207
				}
				if !_rules[rulefilterEnd]() {
					goto l207
				}
				if !_rules[ruleAction24]() {
					goto l207
				}
				add(rulefilter, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 31 query <- <(andQuery (logicOr andQuery Action25)*)> */
		func() bool {
			position209, tokenIndex209 := position, tokenIndex
			{
				position210 := position
				if !_rules[ruleandQuery]() {
					goto l209
				}
			l211:
				{
					position212, tokenIndex212 := position, tokenIndex
					if !_rules[rulelogicOr]() {
						goto l212
					}
					if !_rules[ruleandQuery]() {
						goto l212
					}
					if !_rules[ruleAction25]() {
						goto l212
					}
					goto l211
				l212:
					position, tokenIndex = position212, tokenIndex212
				}
				add(rulequery, position210)
			}
			return true
		l209:
			position, tokenIndex = position209, tokenIndex209
			return false
		},
		/* 32 andQuery <- <(basicQuery (logicAnd basicQuery Action26)*)> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				if !_rules[rulebasicQuery]() {
					goto l213
				}
			l215:
				{
					position216, tokenIndex216 := position, tokenIndex
					if !_rules[rulelogicAnd]() {
						goto l216
					}
					if !_rules[rulebasicQuery]() {
						goto l216
					}
					if !_rules[ruleAction26]() {
						goto l216
					}
					goto l215
				l216:
					position, tokenIndex = position216, tokenIndex216
				}
				add(ruleandQuery, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 33 basicQuery <- <((subQueryStart query subQueryEnd) / (<comparator> Action27) / (<(logicNot? jsonpathFilter)> Action28))> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				{
					position219, tokenIndex219 := position, tokenIndex
					if !_rules[rulesubQueryStart]() {
						goto l220
					}
					if !_rules[rulequery]() {
						goto l220
					}
					if !_rules[rulesubQueryEnd]() {
						goto l220
					}
					goto l219
				l220:
					position, tokenIndex = position219, tokenIndex219
					{
						position222 := position
						if !_rules[rulecomparator]() {
							goto l221
						}
						add(rulePegText, position222)
					}
					if !_rules[ruleAction27]() {
						goto l221
					}
					goto l219
				l221:
					position, tokenIndex = position219, tokenIndex219
					{
						position223 := position
						{
							position224, tokenIndex224 := position, tokenIndex
							if !_rules[rulelogicNot]() {
								goto l224
							}
							goto l225
						l224:
							position, tokenIndex = position224, tokenIndex224
						}
					l225:
						if !_rules[rulejsonpathFilter]() {
							goto l217
						}
						add(rulePegText, position223)
					}
					if !_rules[ruleAction28]() {
						goto l217
					}
				}
			l219:
				add(rulebasicQuery, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 34 logicOr <- <(space ('|' '|') space)> */
		func() bool {
			position226, tokenIndex226 := position, tokenIndex
			{
				position227 := position
				if !_rules[rulespace]() {
					goto l226
				}
				if buffer[position] != rune('|') {
					goto l226
				}
				position++
				if buffer[position] != rune('|') {
					goto l226
				}
				position++
				if !_rules[rulespace]() {
					goto l226
				}
				add(rulelogicOr, position227)
			}
			return true
		l226:
			position, tokenIndex = position226, tokenIndex226
			return false
		},
		/* 35 logicAnd <- <(space ('&' '&') space)> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				if !_rules[rulespace]() {
					goto l228
				}
				if buffer[position] != rune('&') {
					goto l228
				}
				position++
				if buffer[position] != rune('&') {
					goto l228
				}
				position++
				if !_rules[rulespace]() {
					goto l228
				}
				add(rulelogicAnd, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 36 logicNot <- <('!' space)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				if buffer[position] != rune('!') {
					goto l230
				}
				position++
				if !_rules[rulespace]() {
					goto l230
				}
				add(rulelogicNot, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 37 comparator <- <((qParam space (('=' '=' space qParam Action29) / ('!' '=' space qParam Action30))) / (qNumericParam space (('<' '=' space qNumericParam Action31) / ('<' space qNumericParam Action32) / ('>' '=' space qNumericParam Action33) / ('>' space qNumericParam Action34))) / (singleJsonpathFilter space ('=' '~') space '/' <regex> '/' Action35))> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				{
					position234, tokenIndex234 := position, tokenIndex
					if !_rules[ruleqParam]() {
						goto l235
					}
					if !_rules[rulespace]() {
						goto l235
					}
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l237
						}
						position++
						if buffer[position] != rune('=') {
							goto l237
						}
						position++
						if !_rules[rulespace]() {
							goto l237
						}
						if !_rules[ruleqParam]() {
							goto l237
						}
						if !_rules[ruleAction29]() {
							goto l237
						}
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('!') {
							goto l235
						}
						position++
						if buffer[position] != rune('=') {
							goto l235
						}
						position++
						if !_rules[rulespace]() {
							goto l235
						}
						if !_rules[ruleqParam]() {
							goto l235
						}
						if !_rules[ruleAction30]() {
							goto l235
						}
					}
				l236:
					goto l234
				l235:
					position, tokenIndex = position234, tokenIndex234
					if !_rules[ruleqNumericParam]() {
						goto l238
					}
					if !_rules[rulespace]() {
						goto l238
					}
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l240
						}
						position++
						if buffer[position] != rune('=') {
							goto l240
						}
						position++
						if !_rules[rulespace]() {
							goto l240
						}
						if !_rules[ruleqNumericParam]() {
							goto l240
						}
						if !_rules[ruleAction31]() {
							goto l240
						}
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('<') {
							goto l241
						}
						position++
						if !_rules[rulespace]() {
							goto l241
						}
						if !_rules[ruleqNumericParam]() {
							goto l241
						}
						if !_rules[ruleAction32]() {
							goto l241
						}
						goto l239
					l241:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('>') {
							goto l242
						}
						position++
						if buffer[position] != rune('=') {
							goto l242
						}
						position++
						if !_rules[rulespace]() {
							goto l242
						}
						if !_rules[ruleqNumericParam]() {
							goto l242
						}
						if !_rules[ruleAction33]() {
							goto l242
						}
						goto l239
					l242:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('>') {
							goto l238
						}
						position++
						if !_rules[rulespace]() {
							goto l238
						}
						if !_rules[ruleqNumericParam]() {
							goto l238
						}
						if !_rules[ruleAction34]() {
							goto l238
						}
					}
				l239:
					goto l234
				l238:
					position, tokenIndex = position234, tokenIndex234
					if !_rules[rulesingleJsonpathFilter]() {
						goto l232
					}
					if !_rules[rulespace]() {
						goto l232
					}
					if buffer[position] != rune('=') {
						goto l232
					}
					position++
					if buffer[position] != rune('~') {
						goto l232
					}
					position++
					if !_rules[rulespace]() {
						goto l232
					}
					if buffer[position] != rune('/') {
						goto l232
					}
					position++
					{
						position243 := position
						if !_rules[ruleregex]() {
							goto l232
						}
						add(rulePegText, position243)
					}
					if buffer[position] != rune('/') {
						goto l232
					}
					position++
					if !_rules[ruleAction35]() {
						goto l232
					}
				}
			l234:
				add(rulecomparator, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 38 qParam <- <((qLiteral Action36) / singleJsonpathFilter)> */
		func() bool {
			position244, tokenIndex244 := position, tokenIndex
			{
				position245 := position
				{
					position246, tokenIndex246 := position, tokenIndex
					if !_rules[ruleqLiteral]() {
						goto l247
					}
					if !_rules[ruleAction36]() {
						goto l247
					}
					goto l246
				l247:
					position, tokenIndex = position246, tokenIndex246
					if !_rules[rulesingleJsonpathFilter]() {
						goto l244
					}
				}
			l246:
				add(ruleqParam, position245)
			}
			return true
		l244:
			position, tokenIndex = position244, tokenIndex244
			return false
		},
		/* 39 qNumericParam <- <((lNumber Action37) / singleJsonpathFilter)> */
		func() bool {
			position248, tokenIndex248 := position, tokenIndex
			{
				position249 := position
				{
					position250, tokenIndex250 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l251
					}
					if !_rules[ruleAction37]() {
						goto l251
					}
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					if !_rules[rulesingleJsonpathFilter]() {
						goto l248
					}
				}
			l250:
				add(ruleqNumericParam, position249)
			}
			return true
		l248:
			position, tokenIndex = position248, tokenIndex248
			return false
		},
		/* 40 qLiteral <- <(lNumber / lBool / lString / lNull)> */
		func() bool {
			position252, tokenIndex252 := position, tokenIndex
			{
				position253 := position
				{
					position254, tokenIndex254 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l255
					}
					goto l254
				l255:
					position, tokenIndex = position254, tokenIndex254
					if !_rules[rulelBool]() {
						goto l256
					}
					goto l254
				l256:
					position, tokenIndex = position254, tokenIndex254
					if !_rules[rulelString]() {
						goto l257
					}
					goto l254
				l257:
					position, tokenIndex = position254, tokenIndex254
					if !_rules[rulelNull]() {
						goto l252
					}
				}
			l254:
				add(ruleqLiteral, position253)
			}
			return true
		l252:
			position, tokenIndex = position252, tokenIndex252
			return false
		},
		/* 41 singleJsonpathFilter <- <(jsonpathFilter Action38)> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				if !_rules[rulejsonpathFilter]() {
					goto l258
				}
				if !_rules[ruleAction38]() {
					goto l258
				}
				add(rulesingleJsonpathFilter, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 42 jsonpathFilter <- <(Action39 <jsonpathParameter> Action40)> */
		func() bool {
			position260, tokenIndex260 := position, tokenIndex
			{
				position261 := position
				if !_rules[ruleAction39]() {
					goto l260
				}
				{
					position262 := position
					if !_rules[rulejsonpathParameter]() {
						goto l260
					}
					add(rulePegText, position262)
				}
				if !_rules[ruleAction40]() {
					goto l260
				}
				add(rulejsonpathFilter, position261)
			}
			return true
		l260:
			position, tokenIndex = position260, tokenIndex260
			return false
		},
		/* 43 lNumber <- <(<(('-' / '+')? [0-9] ('-' / '+' / '.' / [0-9] / [a-z] / [A-Z])*)> Action41)> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				{
					position265 := position
					{
						position266, tokenIndex266 := position, tokenIndex
						{
							position268, tokenIndex268 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l269
							}
							position++
							goto l268
						l269:
							position, tokenIndex = position268, tokenIndex268
							if buffer[position] != rune('+') {
								goto l266
							}
							position++
						}
					l268:
						goto l267
					l266:
						position, tokenIndex = position266, tokenIndex266
					}
				l267:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l263
					}
					position++
				l270:
					{
						position271, tokenIndex271 := position, tokenIndex
						{
							position272, tokenIndex272 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l273
							}
							position++
							goto l272
						l273:
							position, tokenIndex = position272, tokenIndex272
							if buffer[position] != rune('+') {
								goto l274
							}
							position++
							goto l272
						l274:
							position, tokenIndex = position272, tokenIndex272
							if buffer[position] != rune('.') {
								goto l275
							}
							position++
							goto l272
						l275:
							position, tokenIndex = position272, tokenIndex272
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l276
							}
							position++
							goto l272
						l276:
							position, tokenIndex = position272, tokenIndex272
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l277
							}
							position++
							goto l272
						l277:
							position, tokenIndex = position272, tokenIndex272
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l271
							}
							position++
						}
					l272:
						goto l270
					l271:
						position, tokenIndex = position271, tokenIndex271
					}
					add(rulePegText, position265)
				}
				if !_rules[ruleAction41]() {
					goto l263
				}
				add(rulelNumber, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 44 lBool <- <(((('t' 'r' 'u' 'e') / ('T' 'r' 'u' 'e') / ('T' 'R' 'U' 'E')) Action42) / ((('f' 'a' 'l' 's' 'e') / ('F' 'a' 'l' 's' 'e') / ('F' 'A' 'L' 'S' 'E')) Action43))> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				{
					position280, tokenIndex280 := position, tokenIndex
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l283
						}
						position++
						if buffer[position] != rune('r') {
							goto l283
						}
						position++
						if buffer[position] != rune('u') {
							goto l283
						}
						position++
						if buffer[position] != rune('e') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('T') {
							goto l284
						}
						position++
						if buffer[position] != rune('r') {
							goto l284
						}
						position++
						if buffer[position] != rune('u') {
							goto l284
						}
						position++
						if buffer[position] != rune('e') {
							goto l284
						}
						position++
						goto l282
					l284:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('T') {
							goto l281
						}
						position++
						if buffer[position] != rune('R') {
							goto l281
						}
						position++
						if buffer[position] != rune('U') {
							goto l281
						}
						position++
						if buffer[position] != rune('E') {
							goto l281
						}
						position++
					}
				l282:
					if !_rules[ruleAction42]() {
						goto l281
					}
					goto l280
				l281:
					position, tokenIndex = position280, tokenIndex280
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l286
						}
						position++
						if buffer[position] != rune('a') {
							goto l286
						}
						position++
						if buffer[position] != rune('l') {
							goto l286
						}
						position++
						if buffer[position] != rune('s') {
							goto l286
						}
						position++
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('F') {
							goto l287
						}
						position++
						if buffer[position] != rune('a') {
							goto l287
						}
						position++
						if buffer[position] != rune('l') {
							goto l287
						}
						position++
						if buffer[position] != rune('s') {
							goto l287
						}
						position++
						if buffer[position] != rune('e') {
							goto l287
						}
						position++
						goto l285
					l287:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('F') {
							goto l278
						}
						position++
						if buffer[position] != rune('A') {
							goto l278
						}
						position++
						if buffer[position] != rune('L') {
							goto l278
						}
						position++
						if buffer[position] != rune('S') {
							goto l278
						}
						position++
						if buffer[position] != rune('E') {
							goto l278
						}
						position++
					}
				l285:
					if !_rules[ruleAction43]() {
						goto l278
					}
				}
			l280:
				add(rulelBool, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 45 lString <- <(('\'' <(('\\' '\\') / ('\\' '\'') / (!'\'' .))*> '\'' Action44) / ('"' <(('\\' '\\') / ('\\' '"') / (!'"' .))*> '"' Action45))> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l291
					}
					position++
					{
						position292 := position
					l293:
						{
							position294, tokenIndex294 := position, tokenIndex
							{
								position295, tokenIndex295 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l296
								}
								position++
								if buffer[position] != rune('\\') {
									goto l296
								}
								position++
								goto l295
							l296:
								position, tokenIndex = position295, tokenIndex295
								if buffer[position] != rune('\\') {
									goto l297
								}
								position++
								if buffer[position] != rune('\'') {
									goto l297
								}
								position++
								goto l295
							l297:
								position, tokenIndex = position295, tokenIndex295
								{
									position298, tokenIndex298 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l298
									}
									position++
									goto l294
								l298:
									position, tokenIndex = position298, tokenIndex298
								}
								if !matchDot() {
									goto l294
								}
							}
						l295:
							goto l293
						l294:
							position, tokenIndex = position294, tokenIndex294
						}
						add(rulePegText, position292)
					}
					if buffer[position] != rune('\'') {
						goto l291
					}
					position++
					if !_rules[ruleAction44]() {
						goto l291
					}
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('"') {
						goto l288
					}
					position++
					{
						position299 := position
					l300:
						{
							position301, tokenIndex301 := position, tokenIndex
							{
								position302, tokenIndex302 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l303
								}
								position++
								if buffer[position] != rune('\\') {
									goto l303
								}
								position++
								goto l302
							l303:
								position, tokenIndex = position302, tokenIndex302
								if buffer[position] != rune('\\') {
									goto l304
								}
								position++
								if buffer[position] != rune('"') {
									goto l304
								}
								position++
								goto l302
							l304:
								position, tokenIndex = position302, tokenIndex302
								{
									position305, tokenIndex305 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l305
									}
									position++
									goto l301
								l305:
									position, tokenIndex = position305, tokenIndex305
								}
								if !matchDot() {
									goto l301
								}
							}
						l302:
							goto l300
						l301:
							position, tokenIndex = position301, tokenIndex301
						}
						add(rulePegText, position299)
					}
					if buffer[position] != rune('"') {
						goto l288
					}
					position++
					if !_rules[ruleAction45]() {
						goto l288
					}
				}
			l290:
				add(rulelString, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 46 lNull <- <((('n' 'u' 'l' 'l') / ('N' 'u' 'l' 'l') / ('N' 'U' 'L' 'L')) Action46)> */
		func() bool {
			position306, tokenIndex306 := position, tokenIndex
			{
				position307 := position
				{
					position308, tokenIndex308 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l309
					}
					position++
					if buffer[position] != rune('u') {
						goto l309
					}
					position++
					if buffer[position] != rune('l') {
						goto l309
					}
					position++
					if buffer[position] != rune('l') {
						goto l309
					}
					position++
					goto l308
				l309:
					position, tokenIndex = position308, tokenIndex308
					if buffer[position] != rune('N') {
						goto l310
					}
					position++
					if buffer[position] != rune('u') {
						goto l310
					}
					position++
					if buffer[position] != rune('l') {
						goto l310
					}
					position++
					if buffer[position] != rune('l') {
						goto l310
					}
					position++
					goto l308
				l310:
					position, tokenIndex = position308, tokenIndex308
					if buffer[position] != rune('N') {
						goto l306
					}
					position++
					if buffer[position] != rune('U') {
						goto l306
					}
					position++
					if buffer[position] != rune('L') {
						goto l306
					}
					position++
					if buffer[position] != rune('L') {
						goto l306
					}
					position++
				}
			l308:
				if !_rules[ruleAction46]() {
					goto l306
				}
				add(rulelNull, position307)
			}
			return true
		l306:
			position, tokenIndex = position306, tokenIndex306
			return false
		},
		/* 47 regex <- <(('\\' '\\') / ('\\' '/') / (!'/' .))*> */
		func() bool {
			{
				position312 := position
			l313:
				{
					position314, tokenIndex314 := position, tokenIndex
					{
						position315, tokenIndex315 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l316
						}
						position++
						if buffer[position] != rune('\\') {
							goto l316
						}
						position++
						goto l315
					l316:
						position, tokenIndex = position315, tokenIndex315
						if buffer[position] != rune('\\') {
							goto l317
						}
						position++
						if buffer[position] != rune('/') {
							goto l317
						}
						position++
						goto l315
					l317:
						position, tokenIndex = position315, tokenIndex315
						{
							position318, tokenIndex318 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l318
							}
							position++
							goto l314
						l318:
							position, tokenIndex = position318, tokenIndex318
						}
						if !matchDot() {
							goto l314
						}
					}
				l315:
					goto l313
				l314:
					position, tokenIndex = position314, tokenIndex314
				}
				add(ruleregex, position312)
			}
			return true
		},
		/* 48 squareBracketStart <- <('[' space)> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if buffer[position] != rune('[') {
					goto l319
				}
				position++
				if !_rules[rulespace]() {
					goto l319
				}
				add(rulesquareBracketStart, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 49 squareBracketEnd <- <(space ']')> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				if !_rules[rulespace]() {
					goto l321
				}
				if buffer[position] != rune(']') {
					goto l321
				}
				position++
				add(rulesquareBracketEnd, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 50 scriptStart <- <('(' space)> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				if buffer[position] != rune('(') {
					goto l323
				}
				position++
				if !_rules[rulespace]() {
					goto l323
				}
				add(rulescriptStart, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 51 scriptEnd <- <(space ')')> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if !_rules[rulespace]() {
					goto l325
				}
				if buffer[position] != rune(')') {
					goto l325
				}
				position++
				add(rulescriptEnd, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 52 filterStart <- <('?' '(' space)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if buffer[position] != rune('?') {
					goto l327
				}
				position++
				if buffer[position] != rune('(') {
					goto l327
				}
				position++
				if !_rules[rulespace]() {
					goto l327
				}
				add(rulefilterStart, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 53 filterEnd <- <(space ')')> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if !_rules[rulespace]() {
					goto l329
				}
				if buffer[position] != rune(')') {
					goto l329
				}
				position++
				add(rulefilterEnd, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 54 subQueryStart <- <('(' space)> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				if buffer[position] != rune('(') {
					goto l331
				}
				position++
				if !_rules[rulespace]() {
					goto l331
				}
				add(rulesubQueryStart, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 55 subQueryEnd <- <(space ')')> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				if !_rules[rulespace]() {
					goto l333
				}
				if buffer[position] != rune(')') {
					goto l333
				}
				position++
				add(rulesubQueryEnd, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 56 space <- <(' ' / '\t')*> */
		func() bool {
			{
				position336 := position
			l337:
				{
					position338, tokenIndex338 := position, tokenIndex
					{
						position339, tokenIndex339 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l340
						}
						position++
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						if buffer[position] != rune('\t') {
							goto l338
						}
						position++
					}
				l339:
					goto l337
				l338:
					position, tokenIndex = position338, tokenIndex338
				}
				add(rulespace, position336)
			}
			return true
		},
		/* 58 Action0 <- <{
		    p.root = p.pop().(syntaxNode)
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 60 Action1 <- <{
		    p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 61 Action2 <- <{
		    p.setNodeChain()
		    p.updateRootValueGroup()
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 62 Action3 <- <{
		    p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 63 Action4 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 64 Action5 <- <{
		    p.pushFunction(text, p.pop().(string))
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 65 Action6 <- <{
		    p.push(text)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 66 Action7 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 67 Action8 <- <{
		    p.pushRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 68 Action9 <- <{
		    p.pushCurrentRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 69 Action10 <- <{
		    unescapedText := p.unescape(text)
		    if unescapedText == `*` {
		        p.pushChildWildcardIdentifier(unescapedText)
		    } else {
		        p.pushChildSingleIdentifier(unescapedText)
		    }
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 70 Action11 <- <{
		    identifier := p.pop().([]string)
		    if len(identifier) > 1 {
		        p.pushChildMultiIdentifier(identifier)
		    } else {
		        p.pushChildSingleIdentifier(identifier[0])
		    }
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 71 Action12 <- <{
		    identifier2 := p.pop().([]string)
		    identifier1 := p.pop().([]string)
		    p.push(append(identifier1, identifier2...))
		}> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 72 Action13 <- <{
		    p.push([]string{p.pop().(string)})
		}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 73 Action14 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 74 Action15 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 75 Action16 <- <{
		    childIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion.merge(childIndexUnion)
		    parentIndexUnion.setValueGroup()
		    p.push(parentIndexUnion)
		}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 76 Action17 <- <{
		    step  := p.pop().(*syntaxIndexSubscript)
		    end   := p.pop().(*syntaxIndexSubscript)
		    start := p.pop().(*syntaxIndexSubscript)

		    if step.isOmitted || step.number == 0 {
		        step.number = 1
		    }

		    if step.number > 0 {
		        p.pushSlicePositiveStepSubscript(start, end, step)
		    } else {
		        p.pushSliceNegativeStepSubscript(start, end, step)
		    }
		}> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 77 Action18 <- <{
		    p.pushIndexSubscript(text)
		}> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 78 Action19 <- <{
		    p.pushWildcardSubscript()
		}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 79 Action20 <- <{
		    p.pushUnionQualifier(p.pop().(syntaxSubscript))
		}> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 80 Action21 <- <{
		    p.pushIndexSubscript(`1`)
		}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 81 Action22 <- <{
		    if len(text) > 0 {
		        p.pushIndexSubscript(text)
		    } else {
		        p.pushOmittedIndexSubscript(`0`)
		    }
		}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 82 Action23 <- <{
		    p.pushScriptQualifier(text)
		}> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 83 Action24 <- <{
		    p.pushFilterQualifier(p.pop().(syntaxQuery))
		}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 84 Action25 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalOr(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 85 Action26 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalAnd(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 86 Action27 <- <{
		        if !p.hasErr() {
		            query := p.pop().(syntaxQuery)
		            p.push(query)

					if logicalNot, ok := query.(*syntaxLogicalNot); ok {
						query = (*logicalNot).query
					}
		            if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
		                _, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
		                _, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
		                if leftIsCurrentRoot && rigthIsCurrentRoot {
		                    p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
		                }
					}
		        }
		    }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 87 Action28 <- <{
		    _ = p.pop().(bool)
		    jsonpathFilter := p.pop().(syntaxQuery)
		    if text[0:1] == `!` {
		        p.pushLogicalNot(jsonpathFilter)
		    } else {
		        p.push(jsonpathFilter)
		    }
		}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 88 Action29 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareEQ(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 89 Action30 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareNE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 90 Action31 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 91 Action32 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 92 Action33 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 93 Action34 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 94 Action35 <- <{
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareRegex(leftParam, text)
		}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 95 Action36 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 96 Action37 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 97 Action38 <- <{
		    isLiteral := p.pop().(bool)
		    param := p.pop().(syntaxQueryJSONPathParameter)
		    if !p.hasErr() && param.isValueGroupParameter() {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
		    }
		    p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)
		}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 98 Action39 <- <{
		    p.saveParams()
		}> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 99 Action40 <- <{
		    p.loadParams()

		    node := p.pop().(syntaxNode)
		    checkNode := node
		    if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
		        checkNode = aggregateFunction.param
		    }

		    switch checkNode.(type) {
		    case *syntaxRootIdentifier:
		        p.pushCompareParameterRoot(node)
		        p.push(true)
		    case *syntaxCurrentRootIdentifier:
		        p.pushCompareParameterCurrentRoot(node)
		        p.push(false)
		    default:
		        p.push(&syntaxQueryParamRoot{})
		        p.push(true)
		    }
		}> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 100 Action41 <- <{
		    p.push(p.toFloat(text))
		}> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 101 Action42 <- <{
		    p.push(true)
		}> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 102 Action43 <- <{
		    p.push(false)
		}> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 103 Action44 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 104 Action45 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
		/* 105 Action46 <- <{
		    p.push(nil)
		}> */
		func() bool {
			{
				add(ruleAction46, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
