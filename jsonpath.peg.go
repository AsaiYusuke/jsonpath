package jsonpath

// Code generated by C:\Users\prome\go\bin\peg.exe jsonpath.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleexpression
	ruleEND
	rulejsonpath
	rulerootNode
	rulechildNode
	rulefunction
	rulefunctionName
	rulebracketNode
	rulerootIdentifier
	rulecurrentRootIdentifier
	ruledotChildIdentifier
	rulebracketChildIdentifier
	rulebracketNodeIdentifiers
	rulesingleQuotedNodeIdentifier
	ruledoubleQuotedNodeIdentifier
	rulesepBracketIdentifier
	rulequalifier
	ruleunion
	ruleindex
	ruleslice
	ruleanyIndex
	ruleindexNumber
	rulesepUnion
	rulesepSlice
	rulescript
	rulecommand
	rulefilter
	rulequery
	ruleandQuery
	rulebasicQuery
	rulelogicOr
	rulelogicAnd
	rulelogicNot
	rulecomparator
	ruleqParam
	ruleqNumericParam
	ruleqLiteral
	rulesingleJsonpathFilter
	rulejsonpathFilter
	rulelNumber
	rulelBool
	rulelString
	rulelNull
	ruleregex
	rulesquareBracketStart
	rulesquareBracketEnd
	rulescriptStart
	rulescriptEnd
	rulefilterStart
	rulefilterEnd
	rulesubQueryStart
	rulesubQueryEnd
	rulespace
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
)

var rul3s = [...]string{
	"Unknown",
	"expression",
	"END",
	"jsonpath",
	"rootNode",
	"childNode",
	"function",
	"functionName",
	"bracketNode",
	"rootIdentifier",
	"currentRootIdentifier",
	"dotChildIdentifier",
	"bracketChildIdentifier",
	"bracketNodeIdentifiers",
	"singleQuotedNodeIdentifier",
	"doubleQuotedNodeIdentifier",
	"sepBracketIdentifier",
	"qualifier",
	"union",
	"index",
	"slice",
	"anyIndex",
	"indexNumber",
	"sepUnion",
	"sepSlice",
	"script",
	"command",
	"filter",
	"query",
	"andQuery",
	"basicQuery",
	"logicOr",
	"logicAnd",
	"logicNot",
	"comparator",
	"qParam",
	"qNumericParam",
	"qLiteral",
	"singleJsonpathFilter",
	"jsonpathFilter",
	"lNumber",
	"lBool",
	"lString",
	"lNull",
	"regex",
	"squareBracketStart",
	"squareBracketEnd",
	"scriptStart",
	"scriptEnd",
	"filterStart",
	"filterEnd",
	"subQueryStart",
	"subQueryEnd",
	"space",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type pegJSONPathParser struct {
	jsonPathParser

	Buffer string
	buffer []rune
	rules  [105]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *pegJSONPathParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *pegJSONPathParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *pegJSONPathParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *pegJSONPathParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *pegJSONPathParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *pegJSONPathParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *pegJSONPathParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.root = p.pop().(syntaxNode)

		case ruleAction1:

			p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)

		case ruleAction2:

			p.saveParams()

		case ruleAction3:

			p.setNodeChain()
			p.setRecursiveMultiValue()
			p.loadParams()

		case ruleAction4:

			if len(p.paramsList) == 0 {
				p.syntaxErr(begin, msgErrorInvalidSyntaxUseBeginAtsign, buffer)
			}

		case ruleAction5:

			if len(p.paramsList) != 0 {
				p.syntaxErr(begin, msgErrorInvalidSyntaxOmitDollar, buffer)
			}

		case ruleAction6:

			p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))

		case ruleAction7:

			p.setLastNodeText(text)

		case ruleAction8:

			p.pushFunction(text, p.pop().(string))

		case ruleAction9:

			p.push(text)

		case ruleAction10:

			p.setLastNodeText(text)

		case ruleAction11:

			p.pushRootIdentifier()

		case ruleAction12:

			p.pushCurrentRootIdentifier()

		case ruleAction13:

			unescapedText := p.unescape(text)
			if unescapedText == `*` {
				p.pushChildAsteriskIdentifier(unescapedText)
			} else {
				p.pushChildSingleIdentifier(unescapedText)
			}

		case ruleAction14:

			identifier := p.pop().([]string)
			if len(identifier) > 1 {
				p.pushChildMultiIdentifier(identifier)
			} else {
				p.pushChildSingleIdentifier(identifier[0])
			}

		case ruleAction15:

			p.push([]string{p.pop().(string)})

		case ruleAction16:

			identifier2 := p.pop().([]string)
			identifier1 := p.pop().([]string)
			p.push(append(identifier1, identifier2...))

		case ruleAction17:

			p.push(p.unescape(text))

		case ruleAction18:
			// '
			p.push(p.unescape(text))

		case ruleAction19:

			subscript := p.pop().(syntaxSubscript)
			p.pushUnionQualifier(subscript)

		case ruleAction20:

			childIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion.merge(childIndexUnion)
			parentIndexUnion.setMultiValue()
			p.push(parentIndexUnion)

		case ruleAction21:

			step := p.pop().(*syntaxIndexSubscript)
			end := p.pop().(*syntaxIndexSubscript)
			start := p.pop().(*syntaxIndexSubscript)

			if step.isOmitted || step.number == 0 {
				step.number = 1
			}

			if step.number > 0 {
				p.pushSlicePositiveStepSubscript(start, end, step)
			} else {
				p.pushSliceNegativeStepSubscript(start, end, step)
			}

		case ruleAction22:

			p.pushIndexSubscript(text)

		case ruleAction23:

			p.pushAsteriskSubscript()

		case ruleAction24:

			p.pushIndexSubscript(`1`)

		case ruleAction25:

			if len(text) > 0 {
				p.pushIndexSubscript(text)
			} else {
				p.pushOmittedIndexSubscript(`0`)
			}

		case ruleAction26:

			p.pushScriptQualifier(text)

		case ruleAction27:

			p.pushFilterQualifier(p.pop().(syntaxQuery))

		case ruleAction28:

			childQuery := p.pop().(syntaxQuery)
			parentQuery := p.pop().(syntaxQuery)
			p.pushLogicalOr(parentQuery, childQuery)

		case ruleAction29:

			childQuery := p.pop().(syntaxQuery)
			parentQuery := p.pop().(syntaxQuery)
			p.pushLogicalAnd(parentQuery, childQuery)

		case ruleAction30:

			if !p.hasErr() {
				query := p.pop().(syntaxQuery)
				p.push(query)

				if logicalNot, ok := query.(*syntaxLogicalNot); ok {
					query = (*logicalNot).param
				}
				if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
					_, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
					_, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
					if leftIsCurrentRoot && rigthIsCurrentRoot {
						p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
					}
				}
			}

		case ruleAction31:

			p.push(len(text) > 0 && text[0:1] == `!`)

		case ruleAction32:

			_ = p.pop().(bool)
			jsonpathFilter := p.pop().(syntaxQuery)
			isLogicalNot := p.pop().(bool)
			if isLogicalNot {
				p.pushLogicalNot(jsonpathFilter)
			} else {
				p.push(jsonpathFilter)
			}

		case ruleAction33:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareEQ(leftParam, rightParam)

		case ruleAction34:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareNE(leftParam, rightParam)

		case ruleAction35:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGE(leftParam, rightParam)

		case ruleAction36:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGT(leftParam, rightParam)

		case ruleAction37:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLE(leftParam, rightParam)

		case ruleAction38:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLT(leftParam, rightParam)

		case ruleAction39:

			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareRegex(leftParam, text)

		case ruleAction40:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction41:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction42:

			isLiteral := p.pop().(bool)
			param := p.pop().(syntaxQueryJSONPathParameter)
			if !p.hasErr() && param.isMultiValueParameter() {
				p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
			}
			p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)

		case ruleAction43:

			node := p.pop().(syntaxNode)
			checkNode := node
			if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
				checkNode = aggregateFunction.param
			}

			switch checkNode.(type) {
			case *syntaxRootIdentifier:
				p.pushCompareParameterRoot(node)
				p.push(true)
			case *syntaxCurrentRootIdentifier:
				p.pushCompareParameterCurrentRoot(node)
				p.push(false)
			default:
				p.push(&syntaxQueryParamRoot{})
				p.push(true)
			}

		case ruleAction44:

			p.push(p.toFloat(text))

		case ruleAction45:

			p.push(true)

		case ruleAction46:

			p.push(false)

		case ruleAction47:

			p.push(p.unescape(text))

		case ruleAction48:
			// '
			p.push(p.unescape(text))

		case ruleAction49:

			p.push(nil)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *pegJSONPathParser) Init(options ...func(*pegJSONPathParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 expression <- <((jsonpath END Action0) / (jsonpath? <.*> END Action1))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulejsonpath]() {
						goto l3
					}
					if !_rules[ruleEND]() {
						goto l3
					}
					if !_rules[ruleAction0]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulejsonpath]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					{
						position6 := position
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(rulePegText, position6)
					}
					if !_rules[ruleEND]() {
						goto l0
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
				}
			l2:
				add(ruleexpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 END <- <!.> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !matchDot() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleEND, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 jsonpath <- <(space Action2 rootNode childNode* function* space Action3)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[ruleAction2]() {
					goto l12
				}
				if !_rules[rulerootNode]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[rulechildNode]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[rulefunction]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[ruleAction3]() {
					goto l12
				}
				add(rulejsonpath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 rootNode <- <(rootIdentifier / (<currentRootIdentifier> Action4) / (<(bracketNode / dotChildIdentifier)> Action5))> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					{
						position23 := position
						if !_rules[rulecurrentRootIdentifier]() {
							goto l22
						}
						add(rulePegText, position23)
					}
					if !_rules[ruleAction4]() {
						goto l22
					}
					goto l20
				l22:
					position, tokenIndex = position20, tokenIndex20
					{
						position24 := position
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[rulebracketNode]() {
								goto l26
							}
							goto l25
						l26:
							position, tokenIndex = position25, tokenIndex25
							if !_rules[ruledotChildIdentifier]() {
								goto l18
							}
						}
					l25:
						add(rulePegText, position24)
					}
					if !_rules[ruleAction5]() {
						goto l18
					}
				}
			l20:
				add(rulerootNode, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 4 childNode <- <(('.' '.' (bracketNode / dotChildIdentifier) Action6) / (<('.' dotChildIdentifier)> Action7) / bracketNode)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29, tokenIndex29 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l30
					}
					position++
					if buffer[position] != rune('.') {
						goto l30
					}
					position++
					{
						position31, tokenIndex31 := position, tokenIndex
						if !_rules[rulebracketNode]() {
							goto l32
						}
						goto l31
					l32:
						position, tokenIndex = position31, tokenIndex31
						if !_rules[ruledotChildIdentifier]() {
							goto l30
						}
					}
				l31:
					if !_rules[ruleAction6]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position29, tokenIndex29
					{
						position34 := position
						if buffer[position] != rune('.') {
							goto l33
						}
						position++
						if !_rules[ruledotChildIdentifier]() {
							goto l33
						}
						add(rulePegText, position34)
					}
					if !_rules[ruleAction7]() {
						goto l33
					}
					goto l29
				l33:
					position, tokenIndex = position29, tokenIndex29
					if !_rules[rulebracketNode]() {
						goto l27
					}
				}
			l29:
				add(rulechildNode, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 5 function <- <(<('.' functionName ('(' ')'))> Action8)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37 := position
					if buffer[position] != rune('.') {
						goto l35
					}
					position++
					if !_rules[rulefunctionName]() {
						goto l35
					}
					if buffer[position] != rune('(') {
						goto l35
					}
					position++
					if buffer[position] != rune(')') {
						goto l35
					}
					position++
					add(rulePegText, position37)
				}
				if !_rules[ruleAction8]() {
					goto l35
				}
				add(rulefunction, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 6 functionName <- <(<('-' / '_' / [a-z] / [A-Z])+> Action9)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				{
					position40 := position
					{
						position43, tokenIndex43 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l44
						}
						position++
						goto l43
					l44:
						position, tokenIndex = position43, tokenIndex43
						if buffer[position] != rune('_') {
							goto l45
						}
						position++
						goto l43
					l45:
						position, tokenIndex = position43, tokenIndex43
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l46
						}
						position++
						goto l43
					l46:
						position, tokenIndex = position43, tokenIndex43
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l38
						}
						position++
					}
				l43:
				l41:
					{
						position42, tokenIndex42 := position, tokenIndex
						{
							position47, tokenIndex47 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l48
							}
							position++
							goto l47
						l48:
							position, tokenIndex = position47, tokenIndex47
							if buffer[position] != rune('_') {
								goto l49
							}
							position++
							goto l47
						l49:
							position, tokenIndex = position47, tokenIndex47
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l50
							}
							position++
							goto l47
						l50:
							position, tokenIndex = position47, tokenIndex47
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l42
							}
							position++
						}
					l47:
						goto l41
					l42:
						position, tokenIndex = position42, tokenIndex42
					}
					add(rulePegText, position40)
				}
				if !_rules[ruleAction9]() {
					goto l38
				}
				add(rulefunctionName, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 7 bracketNode <- <(<(squareBracketStart (bracketChildIdentifier / qualifier) squareBracketEnd)> Action10)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				{
					position53 := position
					if !_rules[rulesquareBracketStart]() {
						goto l51
					}
					{
						position54, tokenIndex54 := position, tokenIndex
						if !_rules[rulebracketChildIdentifier]() {
							goto l55
						}
						goto l54
					l55:
						position, tokenIndex = position54, tokenIndex54
						if !_rules[rulequalifier]() {
							goto l51
						}
					}
				l54:
					if !_rules[rulesquareBracketEnd]() {
						goto l51
					}
					add(rulePegText, position53)
				}
				if !_rules[ruleAction10]() {
					goto l51
				}
				add(rulebracketNode, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 8 rootIdentifier <- <('$' Action11)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune('$') {
					goto l56
				}
				position++
				if !_rules[ruleAction11]() {
					goto l56
				}
				add(rulerootIdentifier, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 9 currentRootIdentifier <- <('@' Action12)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('@') {
					goto l58
				}
				position++
				if !_rules[ruleAction12]() {
					goto l58
				}
				add(rulecurrentRootIdentifier, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 dotChildIdentifier <- <(<(('\\' '\\') / ('\\' ('.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ')) / (!('\\' / '.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ') .))+> !('(' ')') Action13)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				{
					position62 := position
					{
						position65, tokenIndex65 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l66
						}
						position++
						if buffer[position] != rune('\\') {
							goto l66
						}
						position++
						goto l65
					l66:
						position, tokenIndex = position65, tokenIndex65
						if buffer[position] != rune('\\') {
							goto l67
						}
						position++
						{
							position68, tokenIndex68 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('[') {
								goto l70
							}
							position++
							goto l68
						l70:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('(') {
								goto l71
							}
							position++
							goto l68
						l71:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune(')') {
								goto l72
							}
							position++
							goto l68
						l72:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('=') {
								goto l73
							}
							position++
							goto l68
						l73:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('!') {
								goto l74
							}
							position++
							goto l68
						l74:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('>') {
								goto l75
							}
							position++
							goto l68
						l75:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('<') {
								goto l76
							}
							position++
							goto l68
						l76:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('\t') {
								goto l77
							}
							position++
							goto l68
						l77:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('\r') {
								goto l78
							}
							position++
							goto l68
						l78:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('\n') {
								goto l79
							}
							position++
							goto l68
						l79:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune(' ') {
								goto l67
							}
							position++
						}
					l68:
						goto l65
					l67:
						position, tokenIndex = position65, tokenIndex65
						{
							position80, tokenIndex80 := position, tokenIndex
							{
								position81, tokenIndex81 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l82
								}
								position++
								goto l81
							l82:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('.') {
									goto l83
								}
								position++
								goto l81
							l83:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('[') {
									goto l84
								}
								position++
								goto l81
							l84:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('(') {
									goto l85
								}
								position++
								goto l81
							l85:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune(')') {
									goto l86
								}
								position++
								goto l81
							l86:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('=') {
									goto l87
								}
								position++
								goto l81
							l87:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('!') {
									goto l88
								}
								position++
								goto l81
							l88:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('>') {
									goto l89
								}
								position++
								goto l81
							l89:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('<') {
									goto l90
								}
								position++
								goto l81
							l90:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('\t') {
									goto l91
								}
								position++
								goto l81
							l91:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('\r') {
									goto l92
								}
								position++
								goto l81
							l92:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune('\n') {
									goto l93
								}
								position++
								goto l81
							l93:
								position, tokenIndex = position81, tokenIndex81
								if buffer[position] != rune(' ') {
									goto l80
								}
								position++
							}
						l81:
							goto l60
						l80:
							position, tokenIndex = position80, tokenIndex80
						}
						if !matchDot() {
							goto l60
						}
					}
				l65:
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						{
							position94, tokenIndex94 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l95
							}
							position++
							if buffer[position] != rune('\\') {
								goto l95
							}
							position++
							goto l94
						l95:
							position, tokenIndex = position94, tokenIndex94
							if buffer[position] != rune('\\') {
								goto l96
							}
							position++
							{
								position97, tokenIndex97 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l98
								}
								position++
								goto l97
							l98:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('[') {
									goto l99
								}
								position++
								goto l97
							l99:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('(') {
									goto l100
								}
								position++
								goto l97
							l100:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune(')') {
									goto l101
								}
								position++
								goto l97
							l101:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('=') {
									goto l102
								}
								position++
								goto l97
							l102:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('!') {
									goto l103
								}
								position++
								goto l97
							l103:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('>') {
									goto l104
								}
								position++
								goto l97
							l104:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('<') {
									goto l105
								}
								position++
								goto l97
							l105:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('\t') {
									goto l106
								}
								position++
								goto l97
							l106:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('\r') {
									goto l107
								}
								position++
								goto l97
							l107:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune('\n') {
									goto l108
								}
								position++
								goto l97
							l108:
								position, tokenIndex = position97, tokenIndex97
								if buffer[position] != rune(' ') {
									goto l96
								}
								position++
							}
						l97:
							goto l94
						l96:
							position, tokenIndex = position94, tokenIndex94
							{
								position109, tokenIndex109 := position, tokenIndex
								{
									position110, tokenIndex110 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l111
									}
									position++
									goto l110
								l111:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('.') {
										goto l112
									}
									position++
									goto l110
								l112:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('[') {
										goto l113
									}
									position++
									goto l110
								l113:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('(') {
										goto l114
									}
									position++
									goto l110
								l114:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune(')') {
										goto l115
									}
									position++
									goto l110
								l115:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('=') {
										goto l116
									}
									position++
									goto l110
								l116:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('!') {
										goto l117
									}
									position++
									goto l110
								l117:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('>') {
										goto l118
									}
									position++
									goto l110
								l118:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('<') {
										goto l119
									}
									position++
									goto l110
								l119:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('\t') {
										goto l120
									}
									position++
									goto l110
								l120:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('\r') {
										goto l121
									}
									position++
									goto l110
								l121:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune('\n') {
										goto l122
									}
									position++
									goto l110
								l122:
									position, tokenIndex = position110, tokenIndex110
									if buffer[position] != rune(' ') {
										goto l109
									}
									position++
								}
							l110:
								goto l64
							l109:
								position, tokenIndex = position109, tokenIndex109
							}
							if !matchDot() {
								goto l64
							}
						}
					l94:
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					add(rulePegText, position62)
				}
				{
					position123, tokenIndex123 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l123
					}
					position++
					if buffer[position] != rune(')') {
						goto l123
					}
					position++
					goto l60
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				if !_rules[ruleAction13]() {
					goto l60
				}
				add(ruledotChildIdentifier, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 11 bracketChildIdentifier <- <(bracketNodeIdentifiers Action14)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[rulebracketNodeIdentifiers]() {
					goto l124
				}
				if !_rules[ruleAction14]() {
					goto l124
				}
				add(rulebracketChildIdentifier, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 12 bracketNodeIdentifiers <- <((singleQuotedNodeIdentifier / doubleQuotedNodeIdentifier) Action15 (sepBracketIdentifier bracketNodeIdentifiers Action16)?)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rulesingleQuotedNodeIdentifier]() {
						goto l129
					}
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if !_rules[ruledoubleQuotedNodeIdentifier]() {
						goto l126
					}
				}
			l128:
				if !_rules[ruleAction15]() {
					goto l126
				}
				{
					position130, tokenIndex130 := position, tokenIndex
					if !_rules[rulesepBracketIdentifier]() {
						goto l130
					}
					if !_rules[rulebracketNodeIdentifiers]() {
						goto l130
					}
					if !_rules[ruleAction16]() {
						goto l130
					}
					goto l131
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
			l131:
				add(rulebracketNodeIdentifiers, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 13 singleQuotedNodeIdentifier <- <('\'' <(('\\' '\\') / ('\\' '\'') / (!('\\' / '\'') .))*> '\'' Action17)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if buffer[position] != rune('\'') {
					goto l132
				}
				position++
				{
					position134 := position
				l135:
					{
						position136, tokenIndex136 := position, tokenIndex
						{
							position137, tokenIndex137 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l138
							}
							position++
							if buffer[position] != rune('\\') {
								goto l138
							}
							position++
							goto l137
						l138:
							position, tokenIndex = position137, tokenIndex137
							if buffer[position] != rune('\\') {
								goto l139
							}
							position++
							if buffer[position] != rune('\'') {
								goto l139
							}
							position++
							goto l137
						l139:
							position, tokenIndex = position137, tokenIndex137
							{
								position140, tokenIndex140 := position, tokenIndex
								{
									position141, tokenIndex141 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l142
									}
									position++
									goto l141
								l142:
									position, tokenIndex = position141, tokenIndex141
									if buffer[position] != rune('\'') {
										goto l140
									}
									position++
								}
							l141:
								goto l136
							l140:
								position, tokenIndex = position140, tokenIndex140
							}
							if !matchDot() {
								goto l136
							}
						}
					l137:
						goto l135
					l136:
						position, tokenIndex = position136, tokenIndex136
					}
					add(rulePegText, position134)
				}
				if buffer[position] != rune('\'') {
					goto l132
				}
				position++
				if !_rules[ruleAction17]() {
					goto l132
				}
				add(rulesingleQuotedNodeIdentifier, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 14 doubleQuotedNodeIdentifier <- <('"' <(('\\' '\\') / ('\\' '"') / (!('\\' / '"') .))*> '"' Action18)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('"') {
					goto l143
				}
				position++
				{
					position145 := position
				l146:
					{
						position147, tokenIndex147 := position, tokenIndex
						{
							position148, tokenIndex148 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l149
							}
							position++
							if buffer[position] != rune('\\') {
								goto l149
							}
							position++
							goto l148
						l149:
							position, tokenIndex = position148, tokenIndex148
							if buffer[position] != rune('\\') {
								goto l150
							}
							position++
							if buffer[position] != rune('"') {
								goto l150
							}
							position++
							goto l148
						l150:
							position, tokenIndex = position148, tokenIndex148
							{
								position151, tokenIndex151 := position, tokenIndex
								{
									position152, tokenIndex152 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l153
									}
									position++
									goto l152
								l153:
									position, tokenIndex = position152, tokenIndex152
									if buffer[position] != rune('"') {
										goto l151
									}
									position++
								}
							l152:
								goto l147
							l151:
								position, tokenIndex = position151, tokenIndex151
							}
							if !matchDot() {
								goto l147
							}
						}
					l148:
						goto l146
					l147:
						position, tokenIndex = position147, tokenIndex147
					}
					add(rulePegText, position145)
				}
				if buffer[position] != rune('"') {
					goto l143
				}
				position++
				if !_rules[ruleAction18]() {
					goto l143
				}
				add(ruledoubleQuotedNodeIdentifier, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 15 sepBracketIdentifier <- <(space ',' space)> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if !_rules[rulespace]() {
					goto l154
				}
				if buffer[position] != rune(',') {
					goto l154
				}
				position++
				if !_rules[rulespace]() {
					goto l154
				}
				add(rulesepBracketIdentifier, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 16 qualifier <- <(union / script / filter)> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				{
					position158, tokenIndex158 := position, tokenIndex
					if !_rules[ruleunion]() {
						goto l159
					}
					goto l158
				l159:
					position, tokenIndex = position158, tokenIndex158
					if !_rules[rulescript]() {
						goto l160
					}
					goto l158
				l160:
					position, tokenIndex = position158, tokenIndex158
					if !_rules[rulefilter]() {
						goto l156
					}
				}
			l158:
				add(rulequalifier, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 17 union <- <(index Action19 (sepUnion union Action20)?)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				if !_rules[ruleindex]() {
					goto l161
				}
				if !_rules[ruleAction19]() {
					goto l161
				}
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[rulesepUnion]() {
						goto l163
					}
					if !_rules[ruleunion]() {
						goto l163
					}
					if !_rules[ruleAction20]() {
						goto l163
					}
					goto l164
				l163:
					position, tokenIndex = position163, tokenIndex163
				}
			l164:
				add(ruleunion, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 18 index <- <((slice Action21) / (<indexNumber> Action22) / ('*' Action23))> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if !_rules[ruleslice]() {
						goto l168
					}
					if !_rules[ruleAction21]() {
						goto l168
					}
					goto l167
				l168:
					position, tokenIndex = position167, tokenIndex167
					{
						position170 := position
						if !_rules[ruleindexNumber]() {
							goto l169
						}
						add(rulePegText, position170)
					}
					if !_rules[ruleAction22]() {
						goto l169
					}
					goto l167
				l169:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('*') {
						goto l165
					}
					position++
					if !_rules[ruleAction23]() {
						goto l165
					}
				}
			l167:
				add(ruleindex, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 19 slice <- <(anyIndex sepSlice anyIndex ((sepSlice anyIndex) / (space Action24)))> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				if !_rules[ruleanyIndex]() {
					goto l171
				}
				if !_rules[rulesepSlice]() {
					goto l171
				}
				if !_rules[ruleanyIndex]() {
					goto l171
				}
				{
					position173, tokenIndex173 := position, tokenIndex
					if !_rules[rulesepSlice]() {
						goto l174
					}
					if !_rules[ruleanyIndex]() {
						goto l174
					}
					goto l173
				l174:
					position, tokenIndex = position173, tokenIndex173
					if !_rules[rulespace]() {
						goto l171
					}
					if !_rules[ruleAction24]() {
						goto l171
					}
				}
			l173:
				add(ruleslice, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 20 anyIndex <- <(<indexNumber?> Action25)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177 := position
					{
						position178, tokenIndex178 := position, tokenIndex
						if !_rules[ruleindexNumber]() {
							goto l178
						}
						goto l179
					l178:
						position, tokenIndex = position178, tokenIndex178
					}
				l179:
					add(rulePegText, position177)
				}
				if !_rules[ruleAction25]() {
					goto l175
				}
				add(ruleanyIndex, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 21 indexNumber <- <(('-' / '+')? [0-9]+)> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				{
					position182, tokenIndex182 := position, tokenIndex
					{
						position184, tokenIndex184 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l185
						}
						position++
						goto l184
					l185:
						position, tokenIndex = position184, tokenIndex184
						if buffer[position] != rune('+') {
							goto l182
						}
						position++
					}
				l184:
					goto l183
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
			l183:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l180
				}
				position++
			l186:
				{
					position187, tokenIndex187 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l187
					}
					position++
					goto l186
				l187:
					position, tokenIndex = position187, tokenIndex187
				}
				add(ruleindexNumber, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 22 sepUnion <- <(space ',' space)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if !_rules[rulespace]() {
					goto l188
				}
				if buffer[position] != rune(',') {
					goto l188
				}
				position++
				if !_rules[rulespace]() {
					goto l188
				}
				add(rulesepUnion, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 23 sepSlice <- <(space ':' space)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if !_rules[rulespace]() {
					goto l190
				}
				if buffer[position] != rune(':') {
					goto l190
				}
				position++
				if !_rules[rulespace]() {
					goto l190
				}
				add(rulesepSlice, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 24 script <- <(scriptStart <command> scriptEnd Action26)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if !_rules[rulescriptStart]() {
					goto l192
				}
				{
					position194 := position
					if !_rules[rulecommand]() {
						goto l192
					}
					add(rulePegText, position194)
				}
				if !_rules[rulescriptEnd]() {
					goto l192
				}
				if !_rules[ruleAction26]() {
					goto l192
				}
				add(rulescript, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 25 command <- <(!')' .)+> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				{
					position199, tokenIndex199 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l199
					}
					position++
					goto l195
				l199:
					position, tokenIndex = position199, tokenIndex199
				}
				if !matchDot() {
					goto l195
				}
			l197:
				{
					position198, tokenIndex198 := position, tokenIndex
					{
						position200, tokenIndex200 := position, tokenIndex
						if buffer[position] != rune(')') {
							goto l200
						}
						position++
						goto l198
					l200:
						position, tokenIndex = position200, tokenIndex200
					}
					if !matchDot() {
						goto l198
					}
					goto l197
				l198:
					position, tokenIndex = position198, tokenIndex198
				}
				add(rulecommand, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 26 filter <- <(filterStart query filterEnd Action27)> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if !_rules[rulefilterStart]() {
					goto l201
				}
				if !_rules[rulequery]() {
					goto l201
				}
				if !_rules[rulefilterEnd]() {
					goto l201
				}
				if !_rules[ruleAction27]() {
					goto l201
				}
				add(rulefilter, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 27 query <- <(andQuery (logicOr query Action28)?)> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if !_rules[ruleandQuery]() {
					goto l203
				}
				{
					position205, tokenIndex205 := position, tokenIndex
					if !_rules[rulelogicOr]() {
						goto l205
					}
					if !_rules[rulequery]() {
						goto l205
					}
					if !_rules[ruleAction28]() {
						goto l205
					}
					goto l206
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
			l206:
				add(rulequery, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 28 andQuery <- <((subQueryStart query subQueryEnd) / (basicQuery (logicAnd andQuery Action29)?))> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if !_rules[rulesubQueryStart]() {
						goto l210
					}
					if !_rules[rulequery]() {
						goto l210
					}
					if !_rules[rulesubQueryEnd]() {
						goto l210
					}
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if !_rules[rulebasicQuery]() {
						goto l207
					}
					{
						position211, tokenIndex211 := position, tokenIndex
						if !_rules[rulelogicAnd]() {
							goto l211
						}
						if !_rules[ruleandQuery]() {
							goto l211
						}
						if !_rules[ruleAction29]() {
							goto l211
						}
						goto l212
					l211:
						position, tokenIndex = position211, tokenIndex211
					}
				l212:
				}
			l209:
				add(ruleandQuery, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 29 basicQuery <- <((<comparator> Action30) / (<logicNot?> Action31 jsonpathFilter Action32))> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				{
					position215, tokenIndex215 := position, tokenIndex
					{
						position217 := position
						if !_rules[rulecomparator]() {
							goto l216
						}
						add(rulePegText, position217)
					}
					if !_rules[ruleAction30]() {
						goto l216
					}
					goto l215
				l216:
					position, tokenIndex = position215, tokenIndex215
					{
						position218 := position
						{
							position219, tokenIndex219 := position, tokenIndex
							if !_rules[rulelogicNot]() {
								goto l219
							}
							goto l220
						l219:
							position, tokenIndex = position219, tokenIndex219
						}
					l220:
						add(rulePegText, position218)
					}
					if !_rules[ruleAction31]() {
						goto l213
					}
					if !_rules[rulejsonpathFilter]() {
						goto l213
					}
					if !_rules[ruleAction32]() {
						goto l213
					}
				}
			l215:
				add(rulebasicQuery, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 30 logicOr <- <(space ('|' '|') space)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if !_rules[rulespace]() {
					goto l221
				}
				if buffer[position] != rune('|') {
					goto l221
				}
				position++
				if buffer[position] != rune('|') {
					goto l221
				}
				position++
				if !_rules[rulespace]() {
					goto l221
				}
				add(rulelogicOr, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 31 logicAnd <- <(space ('&' '&') space)> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				if !_rules[rulespace]() {
					goto l223
				}
				if buffer[position] != rune('&') {
					goto l223
				}
				position++
				if buffer[position] != rune('&') {
					goto l223
				}
				position++
				if !_rules[rulespace]() {
					goto l223
				}
				add(rulelogicAnd, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 32 logicNot <- <('!' space)> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if buffer[position] != rune('!') {
					goto l225
				}
				position++
				if !_rules[rulespace]() {
					goto l225
				}
				add(rulelogicNot, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 33 comparator <- <((qParam space (('=' '=' space qParam Action33) / ('!' '=' space qParam Action34))) / (qNumericParam space (('<' '=' space qNumericParam Action35) / ('<' space qNumericParam Action36) / ('>' '=' space qNumericParam Action37) / ('>' space qNumericParam Action38))) / (singleJsonpathFilter space ('=' '~') space '/' <regex> '/' Action39))> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				{
					position229, tokenIndex229 := position, tokenIndex
					if !_rules[ruleqParam]() {
						goto l230
					}
					if !_rules[rulespace]() {
						goto l230
					}
					{
						position231, tokenIndex231 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l232
						}
						position++
						if buffer[position] != rune('=') {
							goto l232
						}
						position++
						if !_rules[rulespace]() {
							goto l232
						}
						if !_rules[ruleqParam]() {
							goto l232
						}
						if !_rules[ruleAction33]() {
							goto l232
						}
						goto l231
					l232:
						position, tokenIndex = position231, tokenIndex231
						if buffer[position] != rune('!') {
							goto l230
						}
						position++
						if buffer[position] != rune('=') {
							goto l230
						}
						position++
						if !_rules[rulespace]() {
							goto l230
						}
						if !_rules[ruleqParam]() {
							goto l230
						}
						if !_rules[ruleAction34]() {
							goto l230
						}
					}
				l231:
					goto l229
				l230:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[ruleqNumericParam]() {
						goto l233
					}
					if !_rules[rulespace]() {
						goto l233
					}
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l235
						}
						position++
						if buffer[position] != rune('=') {
							goto l235
						}
						position++
						if !_rules[rulespace]() {
							goto l235
						}
						if !_rules[ruleqNumericParam]() {
							goto l235
						}
						if !_rules[ruleAction35]() {
							goto l235
						}
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('<') {
							goto l236
						}
						position++
						if !_rules[rulespace]() {
							goto l236
						}
						if !_rules[ruleqNumericParam]() {
							goto l236
						}
						if !_rules[ruleAction36]() {
							goto l236
						}
						goto l234
					l236:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('>') {
							goto l237
						}
						position++
						if buffer[position] != rune('=') {
							goto l237
						}
						position++
						if !_rules[rulespace]() {
							goto l237
						}
						if !_rules[ruleqNumericParam]() {
							goto l237
						}
						if !_rules[ruleAction37]() {
							goto l237
						}
						goto l234
					l237:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('>') {
							goto l233
						}
						position++
						if !_rules[rulespace]() {
							goto l233
						}
						if !_rules[ruleqNumericParam]() {
							goto l233
						}
						if !_rules[ruleAction38]() {
							goto l233
						}
					}
				l234:
					goto l229
				l233:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[rulesingleJsonpathFilter]() {
						goto l227
					}
					if !_rules[rulespace]() {
						goto l227
					}
					if buffer[position] != rune('=') {
						goto l227
					}
					position++
					if buffer[position] != rune('~') {
						goto l227
					}
					position++
					if !_rules[rulespace]() {
						goto l227
					}
					if buffer[position] != rune('/') {
						goto l227
					}
					position++
					{
						position238 := position
						if !_rules[ruleregex]() {
							goto l227
						}
						add(rulePegText, position238)
					}
					if buffer[position] != rune('/') {
						goto l227
					}
					position++
					if !_rules[ruleAction39]() {
						goto l227
					}
				}
			l229:
				add(rulecomparator, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 34 qParam <- <((qLiteral Action40) / singleJsonpathFilter)> */
		func() bool {
			position239, tokenIndex239 := position, tokenIndex
			{
				position240 := position
				{
					position241, tokenIndex241 := position, tokenIndex
					if !_rules[ruleqLiteral]() {
						goto l242
					}
					if !_rules[ruleAction40]() {
						goto l242
					}
					goto l241
				l242:
					position, tokenIndex = position241, tokenIndex241
					if !_rules[rulesingleJsonpathFilter]() {
						goto l239
					}
				}
			l241:
				add(ruleqParam, position240)
			}
			return true
		l239:
			position, tokenIndex = position239, tokenIndex239
			return false
		},
		/* 35 qNumericParam <- <((lNumber Action41) / singleJsonpathFilter)> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				{
					position245, tokenIndex245 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l246
					}
					if !_rules[ruleAction41]() {
						goto l246
					}
					goto l245
				l246:
					position, tokenIndex = position245, tokenIndex245
					if !_rules[rulesingleJsonpathFilter]() {
						goto l243
					}
				}
			l245:
				add(ruleqNumericParam, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 36 qLiteral <- <(lNumber / lBool / lString / lNull)> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				{
					position249, tokenIndex249 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l250
					}
					goto l249
				l250:
					position, tokenIndex = position249, tokenIndex249
					if !_rules[rulelBool]() {
						goto l251
					}
					goto l249
				l251:
					position, tokenIndex = position249, tokenIndex249
					if !_rules[rulelString]() {
						goto l252
					}
					goto l249
				l252:
					position, tokenIndex = position249, tokenIndex249
					if !_rules[rulelNull]() {
						goto l247
					}
				}
			l249:
				add(ruleqLiteral, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 37 singleJsonpathFilter <- <(jsonpathFilter Action42)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if !_rules[rulejsonpathFilter]() {
					goto l253
				}
				if !_rules[ruleAction42]() {
					goto l253
				}
				add(rulesingleJsonpathFilter, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 38 jsonpathFilter <- <(<jsonpath> Action43)> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				{
					position257 := position
					if !_rules[rulejsonpath]() {
						goto l255
					}
					add(rulePegText, position257)
				}
				if !_rules[ruleAction43]() {
					goto l255
				}
				add(rulejsonpathFilter, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 39 lNumber <- <(<(('-' / '+')? [0-9] ('-' / '+' / '.' / [0-9] / [a-z] / [A-Z])*)> Action44)> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				{
					position260 := position
					{
						position261, tokenIndex261 := position, tokenIndex
						{
							position263, tokenIndex263 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l264
							}
							position++
							goto l263
						l264:
							position, tokenIndex = position263, tokenIndex263
							if buffer[position] != rune('+') {
								goto l261
							}
							position++
						}
					l263:
						goto l262
					l261:
						position, tokenIndex = position261, tokenIndex261
					}
				l262:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l258
					}
					position++
				l265:
					{
						position266, tokenIndex266 := position, tokenIndex
						{
							position267, tokenIndex267 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l268
							}
							position++
							goto l267
						l268:
							position, tokenIndex = position267, tokenIndex267
							if buffer[position] != rune('+') {
								goto l269
							}
							position++
							goto l267
						l269:
							position, tokenIndex = position267, tokenIndex267
							if buffer[position] != rune('.') {
								goto l270
							}
							position++
							goto l267
						l270:
							position, tokenIndex = position267, tokenIndex267
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l271
							}
							position++
							goto l267
						l271:
							position, tokenIndex = position267, tokenIndex267
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l272
							}
							position++
							goto l267
						l272:
							position, tokenIndex = position267, tokenIndex267
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l266
							}
							position++
						}
					l267:
						goto l265
					l266:
						position, tokenIndex = position266, tokenIndex266
					}
					add(rulePegText, position260)
				}
				if !_rules[ruleAction44]() {
					goto l258
				}
				add(rulelNumber, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 40 lBool <- <(((('t' 'r' 'u' 'e') / ('T' 'r' 'u' 'e') / ('T' 'R' 'U' 'E')) Action45) / ((('f' 'a' 'l' 's' 'e') / ('F' 'a' 'l' 's' 'e') / ('F' 'A' 'L' 'S' 'E')) Action46))> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				{
					position275, tokenIndex275 := position, tokenIndex
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l278
						}
						position++
						if buffer[position] != rune('r') {
							goto l278
						}
						position++
						if buffer[position] != rune('u') {
							goto l278
						}
						position++
						if buffer[position] != rune('e') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('T') {
							goto l279
						}
						position++
						if buffer[position] != rune('r') {
							goto l279
						}
						position++
						if buffer[position] != rune('u') {
							goto l279
						}
						position++
						if buffer[position] != rune('e') {
							goto l279
						}
						position++
						goto l277
					l279:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('T') {
							goto l276
						}
						position++
						if buffer[position] != rune('R') {
							goto l276
						}
						position++
						if buffer[position] != rune('U') {
							goto l276
						}
						position++
						if buffer[position] != rune('E') {
							goto l276
						}
						position++
					}
				l277:
					if !_rules[ruleAction45]() {
						goto l276
					}
					goto l275
				l276:
					position, tokenIndex = position275, tokenIndex275
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l281
						}
						position++
						if buffer[position] != rune('a') {
							goto l281
						}
						position++
						if buffer[position] != rune('l') {
							goto l281
						}
						position++
						if buffer[position] != rune('s') {
							goto l281
						}
						position++
						if buffer[position] != rune('e') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('F') {
							goto l282
						}
						position++
						if buffer[position] != rune('a') {
							goto l282
						}
						position++
						if buffer[position] != rune('l') {
							goto l282
						}
						position++
						if buffer[position] != rune('s') {
							goto l282
						}
						position++
						if buffer[position] != rune('e') {
							goto l282
						}
						position++
						goto l280
					l282:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('F') {
							goto l273
						}
						position++
						if buffer[position] != rune('A') {
							goto l273
						}
						position++
						if buffer[position] != rune('L') {
							goto l273
						}
						position++
						if buffer[position] != rune('S') {
							goto l273
						}
						position++
						if buffer[position] != rune('E') {
							goto l273
						}
						position++
					}
				l280:
					if !_rules[ruleAction46]() {
						goto l273
					}
				}
			l275:
				add(rulelBool, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 41 lString <- <(('\'' <(('\\' '\\') / ('\\' '\'') / (!'\'' .))*> '\'' Action47) / ('"' <(('\\' '\\') / ('\\' '"') / (!'"' .))*> '"' Action48))> */
		func() bool {
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l286
					}
					position++
					{
						position287 := position
					l288:
						{
							position289, tokenIndex289 := position, tokenIndex
							{
								position290, tokenIndex290 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l291
								}
								position++
								if buffer[position] != rune('\\') {
									goto l291
								}
								position++
								goto l290
							l291:
								position, tokenIndex = position290, tokenIndex290
								if buffer[position] != rune('\\') {
									goto l292
								}
								position++
								if buffer[position] != rune('\'') {
									goto l292
								}
								position++
								goto l290
							l292:
								position, tokenIndex = position290, tokenIndex290
								{
									position293, tokenIndex293 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l293
									}
									position++
									goto l289
								l293:
									position, tokenIndex = position293, tokenIndex293
								}
								if !matchDot() {
									goto l289
								}
							}
						l290:
							goto l288
						l289:
							position, tokenIndex = position289, tokenIndex289
						}
						add(rulePegText, position287)
					}
					if buffer[position] != rune('\'') {
						goto l286
					}
					position++
					if !_rules[ruleAction47]() {
						goto l286
					}
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					if buffer[position] != rune('"') {
						goto l283
					}
					position++
					{
						position294 := position
					l295:
						{
							position296, tokenIndex296 := position, tokenIndex
							{
								position297, tokenIndex297 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l298
								}
								position++
								if buffer[position] != rune('\\') {
									goto l298
								}
								position++
								goto l297
							l298:
								position, tokenIndex = position297, tokenIndex297
								if buffer[position] != rune('\\') {
									goto l299
								}
								position++
								if buffer[position] != rune('"') {
									goto l299
								}
								position++
								goto l297
							l299:
								position, tokenIndex = position297, tokenIndex297
								{
									position300, tokenIndex300 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l300
									}
									position++
									goto l296
								l300:
									position, tokenIndex = position300, tokenIndex300
								}
								if !matchDot() {
									goto l296
								}
							}
						l297:
							goto l295
						l296:
							position, tokenIndex = position296, tokenIndex296
						}
						add(rulePegText, position294)
					}
					if buffer[position] != rune('"') {
						goto l283
					}
					position++
					if !_rules[ruleAction48]() {
						goto l283
					}
				}
			l285:
				add(rulelString, position284)
			}
			return true
		l283:
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 42 lNull <- <((('n' 'u' 'l' 'l') / ('N' 'u' 'l' 'l') / ('N' 'U' 'L' 'L')) Action49)> */
		func() bool {
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				{
					position303, tokenIndex303 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l304
					}
					position++
					if buffer[position] != rune('u') {
						goto l304
					}
					position++
					if buffer[position] != rune('l') {
						goto l304
					}
					position++
					if buffer[position] != rune('l') {
						goto l304
					}
					position++
					goto l303
				l304:
					position, tokenIndex = position303, tokenIndex303
					if buffer[position] != rune('N') {
						goto l305
					}
					position++
					if buffer[position] != rune('u') {
						goto l305
					}
					position++
					if buffer[position] != rune('l') {
						goto l305
					}
					position++
					if buffer[position] != rune('l') {
						goto l305
					}
					position++
					goto l303
				l305:
					position, tokenIndex = position303, tokenIndex303
					if buffer[position] != rune('N') {
						goto l301
					}
					position++
					if buffer[position] != rune('U') {
						goto l301
					}
					position++
					if buffer[position] != rune('L') {
						goto l301
					}
					position++
					if buffer[position] != rune('L') {
						goto l301
					}
					position++
				}
			l303:
				if !_rules[ruleAction49]() {
					goto l301
				}
				add(rulelNull, position302)
			}
			return true
		l301:
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 43 regex <- <(('\\' '\\') / ('\\' '/') / (!'/' .))*> */
		func() bool {
			{
				position307 := position
			l308:
				{
					position309, tokenIndex309 := position, tokenIndex
					{
						position310, tokenIndex310 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l311
						}
						position++
						if buffer[position] != rune('\\') {
							goto l311
						}
						position++
						goto l310
					l311:
						position, tokenIndex = position310, tokenIndex310
						if buffer[position] != rune('\\') {
							goto l312
						}
						position++
						if buffer[position] != rune('/') {
							goto l312
						}
						position++
						goto l310
					l312:
						position, tokenIndex = position310, tokenIndex310
						{
							position313, tokenIndex313 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l313
							}
							position++
							goto l309
						l313:
							position, tokenIndex = position313, tokenIndex313
						}
						if !matchDot() {
							goto l309
						}
					}
				l310:
					goto l308
				l309:
					position, tokenIndex = position309, tokenIndex309
				}
				add(ruleregex, position307)
			}
			return true
		},
		/* 44 squareBracketStart <- <('[' space)> */
		func() bool {
			position314, tokenIndex314 := position, tokenIndex
			{
				position315 := position
				if buffer[position] != rune('[') {
					goto l314
				}
				position++
				if !_rules[rulespace]() {
					goto l314
				}
				add(rulesquareBracketStart, position315)
			}
			return true
		l314:
			position, tokenIndex = position314, tokenIndex314
			return false
		},
		/* 45 squareBracketEnd <- <(space ']')> */
		func() bool {
			position316, tokenIndex316 := position, tokenIndex
			{
				position317 := position
				if !_rules[rulespace]() {
					goto l316
				}
				if buffer[position] != rune(']') {
					goto l316
				}
				position++
				add(rulesquareBracketEnd, position317)
			}
			return true
		l316:
			position, tokenIndex = position316, tokenIndex316
			return false
		},
		/* 46 scriptStart <- <('(' space)> */
		func() bool {
			position318, tokenIndex318 := position, tokenIndex
			{
				position319 := position
				if buffer[position] != rune('(') {
					goto l318
				}
				position++
				if !_rules[rulespace]() {
					goto l318
				}
				add(rulescriptStart, position319)
			}
			return true
		l318:
			position, tokenIndex = position318, tokenIndex318
			return false
		},
		/* 47 scriptEnd <- <(space ')')> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				if !_rules[rulespace]() {
					goto l320
				}
				if buffer[position] != rune(')') {
					goto l320
				}
				position++
				add(rulescriptEnd, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 48 filterStart <- <('?' '(' space)> */
		func() bool {
			position322, tokenIndex322 := position, tokenIndex
			{
				position323 := position
				if buffer[position] != rune('?') {
					goto l322
				}
				position++
				if buffer[position] != rune('(') {
					goto l322
				}
				position++
				if !_rules[rulespace]() {
					goto l322
				}
				add(rulefilterStart, position323)
			}
			return true
		l322:
			position, tokenIndex = position322, tokenIndex322
			return false
		},
		/* 49 filterEnd <- <(space ')')> */
		func() bool {
			position324, tokenIndex324 := position, tokenIndex
			{
				position325 := position
				if !_rules[rulespace]() {
					goto l324
				}
				if buffer[position] != rune(')') {
					goto l324
				}
				position++
				add(rulefilterEnd, position325)
			}
			return true
		l324:
			position, tokenIndex = position324, tokenIndex324
			return false
		},
		/* 50 subQueryStart <- <('(' space)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if buffer[position] != rune('(') {
					goto l326
				}
				position++
				if !_rules[rulespace]() {
					goto l326
				}
				add(rulesubQueryStart, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 51 subQueryEnd <- <(space ')')> */
		func() bool {
			position328, tokenIndex328 := position, tokenIndex
			{
				position329 := position
				if !_rules[rulespace]() {
					goto l328
				}
				if buffer[position] != rune(')') {
					goto l328
				}
				position++
				add(rulesubQueryEnd, position329)
			}
			return true
		l328:
			position, tokenIndex = position328, tokenIndex328
			return false
		},
		/* 52 space <- <(' ' / '\t')*> */
		func() bool {
			{
				position331 := position
			l332:
				{
					position333, tokenIndex333 := position, tokenIndex
					{
						position334, tokenIndex334 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l335
						}
						position++
						goto l334
					l335:
						position, tokenIndex = position334, tokenIndex334
						if buffer[position] != rune('\t') {
							goto l333
						}
						position++
					}
				l334:
					goto l332
				l333:
					position, tokenIndex = position333, tokenIndex333
				}
				add(rulespace, position331)
			}
			return true
		},
		/* 54 Action0 <- <{
		    p.root = p.pop().(syntaxNode)
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 56 Action1 <- <{
		    p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 57 Action2 <- <{
		    p.saveParams()
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 58 Action3 <- <{
		    p.setNodeChain()
		    p.setRecursiveMultiValue()
		    p.loadParams()
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 59 Action4 <- <{
		    if len(p.paramsList) == 0 {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxUseBeginAtsign, buffer)
		    }
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 60 Action5 <- <{
		    if len(p.paramsList) != 0 {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxOmitDollar, buffer)
		    }
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 61 Action6 <- <{
		    p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 62 Action7 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 63 Action8 <- <{
		    p.pushFunction(text, p.pop().(string))
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 64 Action9 <- <{
		    p.push(text)
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 65 Action10 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 66 Action11 <- <{
		    p.pushRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 67 Action12 <- <{
		    p.pushCurrentRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 68 Action13 <- <{
		    unescapedText := p.unescape(text)
		    if unescapedText == `*` {
		        p.pushChildAsteriskIdentifier(unescapedText)
		    } else {
		        p.pushChildSingleIdentifier(unescapedText)
		    }
		}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 69 Action14 <- <{
		    identifier := p.pop().([]string)
		    if len(identifier) > 1 {
		        p.pushChildMultiIdentifier(identifier)
		    } else {
		        p.pushChildSingleIdentifier(identifier[0])
		    }
		}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 70 Action15 <- <{
		    p.push([]string{p.pop().(string)})
		}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 71 Action16 <- <{
		    identifier2 := p.pop().([]string)
		    identifier1 := p.pop().([]string)
		    p.push(append(identifier1, identifier2...))
		}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 72 Action17 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 73 Action18 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 74 Action19 <- <{
		    subscript := p.pop().(syntaxSubscript)
		    p.pushUnionQualifier(subscript)
		}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 75 Action20 <- <{
		    childIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion.merge(childIndexUnion)
		    parentIndexUnion.setMultiValue()
		    p.push(parentIndexUnion)
		}> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 76 Action21 <- <{
		    step  := p.pop().(*syntaxIndexSubscript)
		    end   := p.pop().(*syntaxIndexSubscript)
		    start := p.pop().(*syntaxIndexSubscript)

		    if step.isOmitted || step.number == 0 {
		        step.number = 1
		    }

		    if step.number > 0 {
		        p.pushSlicePositiveStepSubscript(start, end, step)
		    } else {
		        p.pushSliceNegativeStepSubscript(start, end, step)
		    }
		}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 77 Action22 <- <{
		    p.pushIndexSubscript(text)
		}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 78 Action23 <- <{
		    p.pushAsteriskSubscript()
		}> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 79 Action24 <- <{
		    p.pushIndexSubscript(`1`)
		}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 80 Action25 <- <{
		    if len(text) > 0 {
		        p.pushIndexSubscript(text)
		    } else {
		        p.pushOmittedIndexSubscript(`0`)
		    }
		}> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 81 Action26 <- <{
		    p.pushScriptQualifier(text)
		}> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 82 Action27 <- <{
		    p.pushFilterQualifier(p.pop().(syntaxQuery))
		}> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 83 Action28 <- <{
		    childQuery := p.pop().(syntaxQuery)
		    parentQuery := p.pop().(syntaxQuery)
		    p.pushLogicalOr(parentQuery, childQuery)
		}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 84 Action29 <- <{
		    childQuery := p.pop().(syntaxQuery)
		    parentQuery := p.pop().(syntaxQuery)
		    p.pushLogicalAnd(parentQuery, childQuery)
		}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 85 Action30 <- <{
		        if !p.hasErr() {
		            query := p.pop().(syntaxQuery)
		            p.push(query)

					if logicalNot, ok := query.(*syntaxLogicalNot); ok {
						query = (*logicalNot).param
					}
		            if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
		                _, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
		                _, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
		                if leftIsCurrentRoot && rigthIsCurrentRoot {
		                    p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
		                }
					}
		        }
		    }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 86 Action31 <- <{
		    p.push(len(text) > 0 && text[0:1] == `!`)
		}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 87 Action32 <- <{
		    _ = p.pop().(bool)
		    jsonpathFilter := p.pop().(syntaxQuery)
		    isLogicalNot := p.pop().(bool)
		    if isLogicalNot {
		        p.pushLogicalNot(jsonpathFilter)
		    } else {
		        p.push(jsonpathFilter)
		    }
		}> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 88 Action33 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareEQ(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 89 Action34 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareNE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 90 Action35 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 91 Action36 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 92 Action37 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 93 Action38 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 94 Action39 <- <{
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareRegex(leftParam, text)
		}> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 95 Action40 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 96 Action41 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 97 Action42 <- <{
		    isLiteral := p.pop().(bool)
		    param := p.pop().(syntaxQueryJSONPathParameter)
		    if !p.hasErr() && param.isMultiValueParameter() {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
		    }
		    p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)
		}> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 98 Action43 <- <{
		    node := p.pop().(syntaxNode)
		    checkNode := node
		    if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
		        checkNode = aggregateFunction.param
		    }

		    switch checkNode.(type) {
		    case *syntaxRootIdentifier:
		        p.pushCompareParameterRoot(node)
		        p.push(true)
		    case *syntaxCurrentRootIdentifier:
		        p.pushCompareParameterCurrentRoot(node)
		        p.push(false)
		    default:
		        p.push(&syntaxQueryParamRoot{})
		        p.push(true)
		    }
		}> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 99 Action44 <- <{
		    p.push(p.toFloat(text))
		}> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 100 Action45 <- <{
		    p.push(true)
		}> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
		/* 101 Action46 <- <{
		    p.push(false)
		}> */
		func() bool {
			{
				add(ruleAction46, position)
			}
			return true
		},
		/* 102 Action47 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction47, position)
			}
			return true
		},
		/* 103 Action48 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction48, position)
			}
			return true
		},
		/* 104 Action49 <- <{
		    p.push(nil)
		}> */
		func() bool {
			{
				add(ruleAction49, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
