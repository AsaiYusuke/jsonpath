package jsonpath

// Code generated by C:\Users\prome\go\bin\peg.exe jsonpath.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleexpression
	ruleEND
	rulejsonpath
	rulejsonpathParameter
	rulecontinuedJsonpath
	rulerootNode
	ruleparameterRootNode
	rulechildNode
	rulefunction
	rulefunctionName
	rulebracketNode
	rulerootIdentifier
	rulecurrentRootIdentifier
	ruledotChildIdentifier
	rulebracketChildIdentifier
	rulebracketNodeIdentifier
	rulebracketWildcardIdentifier
	rulesingleQuotedNodeIdentifier
	ruledoubleQuotedNodeIdentifier
	rulesepBracketIdentifier
	rulequalifier
	ruleunion
	ruleindex
	ruleslice
	ruleanyIndex
	ruleindexNumber
	rulesepUnion
	rulesepSlice
	rulescript
	rulecommand
	rulefilter
	rulequery
	ruleandQuery
	rulebasicQuery
	rulelogicOr
	rulelogicAnd
	rulelogicNot
	rulecomparator
	ruleqParam
	ruleqNumericParam
	ruleqLiteral
	rulesingleJsonpathFilter
	rulejsonpathFilter
	rulelNumber
	rulelBool
	rulelString
	rulelNull
	ruleregex
	rulesquareBracketStart
	rulesquareBracketEnd
	rulescriptStart
	rulescriptEnd
	rulefilterStart
	rulefilterEnd
	rulesubQueryStart
	rulesubQueryEnd
	rulespace
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
)

var rul3s = [...]string{
	"Unknown",
	"expression",
	"END",
	"jsonpath",
	"jsonpathParameter",
	"continuedJsonpath",
	"rootNode",
	"parameterRootNode",
	"childNode",
	"function",
	"functionName",
	"bracketNode",
	"rootIdentifier",
	"currentRootIdentifier",
	"dotChildIdentifier",
	"bracketChildIdentifier",
	"bracketNodeIdentifier",
	"bracketWildcardIdentifier",
	"singleQuotedNodeIdentifier",
	"doubleQuotedNodeIdentifier",
	"sepBracketIdentifier",
	"qualifier",
	"union",
	"index",
	"slice",
	"anyIndex",
	"indexNumber",
	"sepUnion",
	"sepSlice",
	"script",
	"command",
	"filter",
	"query",
	"andQuery",
	"basicQuery",
	"logicOr",
	"logicAnd",
	"logicNot",
	"comparator",
	"qParam",
	"qNumericParam",
	"qLiteral",
	"singleJsonpathFilter",
	"jsonpathFilter",
	"lNumber",
	"lBool",
	"lString",
	"lNull",
	"regex",
	"squareBracketStart",
	"squareBracketEnd",
	"scriptStart",
	"scriptEnd",
	"filterStart",
	"filterEnd",
	"subQueryStart",
	"subQueryEnd",
	"space",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type pegJSONPathParser struct {
	jsonPathParser

	Buffer string
	buffer []rune
	rules  [106]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *pegJSONPathParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *pegJSONPathParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *pegJSONPathParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *pegJSONPathParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *pegJSONPathParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *pegJSONPathParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *pegJSONPathParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))

		case ruleAction1:

			p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)

		case ruleAction2:

			p.setNodeChain()
			p.updateRootValueGroup()

		case ruleAction3:

			p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))

		case ruleAction4:

			p.setLastNodeText(text)

		case ruleAction5:

			p.pushFunction(text, p.pop().(string))

		case ruleAction6:

			p.push(text)

		case ruleAction7:

			p.setLastNodeText(text)

		case ruleAction8:

			p.pushRootIdentifier()

		case ruleAction9:

			p.pushCurrentRootIdentifier()

		case ruleAction10:

			p.pushChildWildcardIdentifier()

		case ruleAction11:

			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction12:

			identifier2 := p.pop().(syntaxNode)
			identifier1 := p.pop().(syntaxNode)
			p.pushChildMultiIdentifier(identifier1, identifier2)

		case ruleAction13:

			p.pushChildWildcardIdentifier()

		case ruleAction14:

			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction15:
			// '
			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction16:

			childIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion.merge(childIndexUnion)
			parentIndexUnion.setValueGroup()
			p.push(parentIndexUnion)

		case ruleAction17:

			step := p.pop().(*syntaxIndexSubscript)
			end := p.pop().(*syntaxIndexSubscript)
			start := p.pop().(*syntaxIndexSubscript)

			if step.isOmitted || step.number == 0 {
				step.number = 1
			}

			if step.number > 0 {
				p.pushSlicePositiveStepSubscript(start, end, step)
			} else {
				p.pushSliceNegativeStepSubscript(start, end, step)
			}

		case ruleAction18:

			p.pushIndexSubscript(text)

		case ruleAction19:

			p.pushWildcardSubscript()

		case ruleAction20:

			p.pushUnionQualifier(p.pop().(syntaxSubscript))

		case ruleAction21:

			p.pushIndexSubscript(`1`)

		case ruleAction22:

			if len(text) > 0 {
				p.pushIndexSubscript(text)
			} else {
				p.pushOmittedIndexSubscript(`0`)
			}

		case ruleAction23:

			p.pushScriptQualifier(text)

		case ruleAction24:

			p.pushFilterQualifier(p.pop().(syntaxQuery))

		case ruleAction25:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalOr(leftQuery, rightQuery)

		case ruleAction26:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalAnd(leftQuery, rightQuery)

		case ruleAction27:

			if !p.hasErr() {
				query := p.pop()
				p.push(query)

				if logicalNot, ok := query.(*syntaxLogicalNot); ok {
					query = (*logicalNot).query
				}
				if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
					_, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
					_, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
					if leftIsCurrentRoot && rigthIsCurrentRoot {
						p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
					}
				}
			}

		case ruleAction28:

			_ = p.pop()
			jsonpathFilter := p.pop().(syntaxQuery)
			if text[0:1] == `!` {
				p.pushLogicalNot(jsonpathFilter)
			} else {
				p.push(jsonpathFilter)
			}

		case ruleAction29:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareEQ(leftParam, rightParam)

		case ruleAction30:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareNE(leftParam, rightParam)

		case ruleAction31:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGE(leftParam, rightParam)

		case ruleAction32:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGT(leftParam, rightParam)

		case ruleAction33:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLE(leftParam, rightParam)

		case ruleAction34:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLT(leftParam, rightParam)

		case ruleAction35:

			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareRegex(leftParam, text)

		case ruleAction36:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction37:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction38:

			isLiteral := p.pop().(bool)
			param := p.pop().(syntaxQueryJSONPathParameter)
			if !p.hasErr() && param.isValueGroupParameter() {
				p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
			}
			p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)

		case ruleAction39:

			p.saveParams()

		case ruleAction40:

			p.loadParams()

			node := p.pop().(syntaxNode)
			checkNode := node
			if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
				checkNode = aggregateFunction.param
			}

			switch checkNode.(type) {
			case *syntaxRootIdentifier:
				p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
				p.push(true)
			case *syntaxCurrentRootIdentifier:
				p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
				p.push(false)
			default:
				p.push(&syntaxQueryParamRoot{})
				p.push(true)
			}

		case ruleAction41:

			p.push(p.toFloat(text))

		case ruleAction42:

			p.push(true)

		case ruleAction43:

			p.push(false)

		case ruleAction44:

			p.push(p.unescape(text))

		case ruleAction45:
			// '
			p.push(p.unescape(text))

		case ruleAction46:

			p.push(nil)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *pegJSONPathParser) Init(options ...func(*pegJSONPathParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 expression <- <((jsonpath END Action0) / (jsonpath? <.*> END Action1))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulejsonpath]() {
						goto l3
					}
					if !_rules[ruleEND]() {
						goto l3
					}
					if !_rules[ruleAction0]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulejsonpath]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					{
						position6 := position
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(rulePegText, position6)
					}
					if !_rules[ruleEND]() {
						goto l0
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
				}
			l2:
				add(ruleexpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 END <- <!.> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !matchDot() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleEND, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 jsonpath <- <(space rootNode continuedJsonpath)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[rulerootNode]() {
					goto l12
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l12
				}
				add(rulejsonpath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 jsonpathParameter <- <(space parameterRootNode continuedJsonpath)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[rulespace]() {
					goto l14
				}
				if !_rules[ruleparameterRootNode]() {
					goto l14
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l14
				}
				add(rulejsonpathParameter, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 continuedJsonpath <- <(childNode* function* space Action2)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[rulechildNode]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
			l20:
				{
					position21, tokenIndex21 := position, tokenIndex
					if !_rules[rulefunction]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position21, tokenIndex21
				}
				if !_rules[rulespace]() {
					goto l16
				}
				if !_rules[ruleAction2]() {
					goto l16
				}
				add(rulecontinuedJsonpath, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 rootNode <- <(rootIdentifier / bracketNode / dotChildIdentifier)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[rulebracketNode]() {
						goto l26
					}
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruledotChildIdentifier]() {
						goto l22
					}
				}
			l24:
				add(rulerootNode, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 parameterRootNode <- <(rootIdentifier / currentRootIdentifier)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position29, tokenIndex29
					if !_rules[rulecurrentRootIdentifier]() {
						goto l27
					}
				}
			l29:
				add(ruleparameterRootNode, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 7 childNode <- <(('.' '.' (bracketNode / dotChildIdentifier) Action3) / (<('.' dotChildIdentifier)> Action4) / bracketNode)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33, tokenIndex33 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulebracketNode]() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruledotChildIdentifier]() {
							goto l34
						}
					}
				l35:
					if !_rules[ruleAction3]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					{
						position38 := position
						if buffer[position] != rune('.') {
							goto l37
						}
						position++
						if !_rules[ruledotChildIdentifier]() {
							goto l37
						}
						add(rulePegText, position38)
					}
					if !_rules[ruleAction4]() {
						goto l37
					}
					goto l33
				l37:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[rulebracketNode]() {
						goto l31
					}
				}
			l33:
				add(rulechildNode, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 8 function <- <(<('.' functionName ('(' ')'))> Action5)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					if buffer[position] != rune('.') {
						goto l39
					}
					position++
					if !_rules[rulefunctionName]() {
						goto l39
					}
					if buffer[position] != rune('(') {
						goto l39
					}
					position++
					if buffer[position] != rune(')') {
						goto l39
					}
					position++
					add(rulePegText, position41)
				}
				if !_rules[ruleAction5]() {
					goto l39
				}
				add(rulefunction, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 functionName <- <(<('-' / '_' / [a-z] / [A-Z])+> Action6)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44 := position
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('_') {
							goto l49
						}
						position++
						goto l47
					l49:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l50
						}
						position++
						goto l47
					l50:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l42
						}
						position++
					}
				l47:
				l45:
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('_') {
								goto l53
							}
							position++
							goto l51
						l53:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l54
							}
							position++
							goto l51
						l54:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l46
							}
							position++
						}
					l51:
						goto l45
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					add(rulePegText, position44)
				}
				if !_rules[ruleAction6]() {
					goto l42
				}
				add(rulefunctionName, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 bracketNode <- <(<(squareBracketStart (bracketChildIdentifier / qualifier) squareBracketEnd)> Action7)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57 := position
					if !_rules[rulesquareBracketStart]() {
						goto l55
					}
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[rulebracketChildIdentifier]() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if !_rules[rulequalifier]() {
							goto l55
						}
					}
				l58:
					if !_rules[rulesquareBracketEnd]() {
						goto l55
					}
					add(rulePegText, position57)
				}
				if !_rules[ruleAction7]() {
					goto l55
				}
				add(rulebracketNode, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 rootIdentifier <- <('$' Action8)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('$') {
					goto l60
				}
				position++
				if !_rules[ruleAction8]() {
					goto l60
				}
				add(rulerootIdentifier, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 12 currentRootIdentifier <- <('@' Action9)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('@') {
					goto l62
				}
				position++
				if !_rules[ruleAction9]() {
					goto l62
				}
				add(rulecurrentRootIdentifier, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 13 dotChildIdentifier <- <(('*' Action10) / (<(('\\' '\\') / ('\\' ('.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ')) / (!('\\' / '.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ') .))+> !('(' ')') Action11))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l67
					}
					position++
					if !_rules[ruleAction10]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					{
						position68 := position
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if buffer[position] != rune('\\') {
								goto l73
							}
							position++
							{
								position74, tokenIndex74 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l75
								}
								position++
								goto l74
							l75:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('[') {
									goto l76
								}
								position++
								goto l74
							l76:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('(') {
									goto l77
								}
								position++
								goto l74
							l77:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(')') {
									goto l78
								}
								position++
								goto l74
							l78:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('=') {
									goto l79
								}
								position++
								goto l74
							l79:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('!') {
									goto l80
								}
								position++
								goto l74
							l80:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('>') {
									goto l81
								}
								position++
								goto l74
							l81:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('<') {
									goto l82
								}
								position++
								goto l74
							l82:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\t') {
									goto l83
								}
								position++
								goto l74
							l83:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\r') {
									goto l84
								}
								position++
								goto l74
							l84:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\n') {
									goto l85
								}
								position++
								goto l74
							l85:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(' ') {
									goto l73
								}
								position++
							}
						l74:
							goto l71
						l73:
							position, tokenIndex = position71, tokenIndex71
							{
								position86, tokenIndex86 := position, tokenIndex
								{
									position87, tokenIndex87 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l88
									}
									position++
									goto l87
								l88:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('.') {
										goto l89
									}
									position++
									goto l87
								l89:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('[') {
										goto l90
									}
									position++
									goto l87
								l90:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('(') {
										goto l91
									}
									position++
									goto l87
								l91:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(')') {
										goto l92
									}
									position++
									goto l87
								l92:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('=') {
										goto l93
									}
									position++
									goto l87
								l93:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('!') {
										goto l94
									}
									position++
									goto l87
								l94:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('>') {
										goto l95
									}
									position++
									goto l87
								l95:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('<') {
										goto l96
									}
									position++
									goto l87
								l96:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\t') {
										goto l97
									}
									position++
									goto l87
								l97:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\r') {
										goto l98
									}
									position++
									goto l87
								l98:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\n') {
										goto l99
									}
									position++
									goto l87
								l99:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(' ') {
										goto l86
									}
									position++
								}
							l87:
								goto l64
							l86:
								position, tokenIndex = position86, tokenIndex86
							}
							if !matchDot() {
								goto l64
							}
						}
					l71:
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							{
								position100, tokenIndex100 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								goto l100
							l101:
								position, tokenIndex = position100, tokenIndex100
								if buffer[position] != rune('\\') {
									goto l102
								}
								position++
								{
									position103, tokenIndex103 := position, tokenIndex
									if buffer[position] != rune('.') {
										goto l104
									}
									position++
									goto l103
								l104:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('[') {
										goto l105
									}
									position++
									goto l103
								l105:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('(') {
										goto l106
									}
									position++
									goto l103
								l106:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(')') {
										goto l107
									}
									position++
									goto l103
								l107:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('=') {
										goto l108
									}
									position++
									goto l103
								l108:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('!') {
										goto l109
									}
									position++
									goto l103
								l109:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('>') {
										goto l110
									}
									position++
									goto l103
								l110:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('<') {
										goto l111
									}
									position++
									goto l103
								l111:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\t') {
										goto l112
									}
									position++
									goto l103
								l112:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\r') {
										goto l113
									}
									position++
									goto l103
								l113:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\n') {
										goto l114
									}
									position++
									goto l103
								l114:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(' ') {
										goto l102
									}
									position++
								}
							l103:
								goto l100
							l102:
								position, tokenIndex = position100, tokenIndex100
								{
									position115, tokenIndex115 := position, tokenIndex
									{
										position116, tokenIndex116 := position, tokenIndex
										if buffer[position] != rune('\\') {
											goto l117
										}
										position++
										goto l116
									l117:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('.') {
											goto l118
										}
										position++
										goto l116
									l118:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('[') {
											goto l119
										}
										position++
										goto l116
									l119:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('(') {
											goto l120
										}
										position++
										goto l116
									l120:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(')') {
											goto l121
										}
										position++
										goto l116
									l121:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('=') {
											goto l122
										}
										position++
										goto l116
									l122:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('!') {
											goto l123
										}
										position++
										goto l116
									l123:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('>') {
											goto l124
										}
										position++
										goto l116
									l124:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('<') {
											goto l125
										}
										position++
										goto l116
									l125:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\t') {
											goto l126
										}
										position++
										goto l116
									l126:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\r') {
											goto l127
										}
										position++
										goto l116
									l127:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\n') {
											goto l128
										}
										position++
										goto l116
									l128:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(' ') {
											goto l115
										}
										position++
									}
								l116:
									goto l70
								l115:
									position, tokenIndex = position115, tokenIndex115
								}
								if !matchDot() {
									goto l70
								}
							}
						l100:
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						add(rulePegText, position68)
					}
					{
						position129, tokenIndex129 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l129
						}
						position++
						if buffer[position] != rune(')') {
							goto l129
						}
						position++
						goto l64
					l129:
						position, tokenIndex = position129, tokenIndex129
					}
					if !_rules[ruleAction11]() {
						goto l64
					}
				}
			l66:
				add(ruledotChildIdentifier, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 14 bracketChildIdentifier <- <(bracketNodeIdentifier (sepBracketIdentifier bracketNodeIdentifier Action12)* !sepBracketIdentifier)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[rulebracketNodeIdentifier]() {
					goto l130
				}
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[rulesepBracketIdentifier]() {
						goto l133
					}
					if !_rules[rulebracketNodeIdentifier]() {
						goto l133
					}
					if !_rules[ruleAction12]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				{
					position134, tokenIndex134 := position, tokenIndex
					if !_rules[rulesepBracketIdentifier]() {
						goto l134
					}
					goto l130
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
				add(rulebracketChildIdentifier, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 15 bracketNodeIdentifier <- <(bracketWildcardIdentifier / singleQuotedNodeIdentifier / doubleQuotedNodeIdentifier)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rulebracketWildcardIdentifier]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[rulesingleQuotedNodeIdentifier]() {
						goto l139
					}
					goto l137
				l139:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[ruledoubleQuotedNodeIdentifier]() {
						goto l135
					}
				}
			l137:
				add(rulebracketNodeIdentifier, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 16 bracketWildcardIdentifier <- <(<'*'> Action13)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142 := position
					if buffer[position] != rune('*') {
						goto l140
					}
					position++
					add(rulePegText, position142)
				}
				if !_rules[ruleAction13]() {
					goto l140
				}
				add(rulebracketWildcardIdentifier, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 17 singleQuotedNodeIdentifier <- <('\'' <(('\\' '\\') / ('\\' '\'') / (!('\\' / '\'') .))*> '\'' Action14)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('\'') {
					goto l143
				}
				position++
				{
					position145 := position
				l146:
					{
						position147, tokenIndex147 := position, tokenIndex
						{
							position148, tokenIndex148 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l149
							}
							position++
							if buffer[position] != rune('\\') {
								goto l149
							}
							position++
							goto l148
						l149:
							position, tokenIndex = position148, tokenIndex148
							if buffer[position] != rune('\\') {
								goto l150
							}
							position++
							if buffer[position] != rune('\'') {
								goto l150
							}
							position++
							goto l148
						l150:
							position, tokenIndex = position148, tokenIndex148
							{
								position151, tokenIndex151 := position, tokenIndex
								{
									position152, tokenIndex152 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l153
									}
									position++
									goto l152
								l153:
									position, tokenIndex = position152, tokenIndex152
									if buffer[position] != rune('\'') {
										goto l151
									}
									position++
								}
							l152:
								goto l147
							l151:
								position, tokenIndex = position151, tokenIndex151
							}
							if !matchDot() {
								goto l147
							}
						}
					l148:
						goto l146
					l147:
						position, tokenIndex = position147, tokenIndex147
					}
					add(rulePegText, position145)
				}
				if buffer[position] != rune('\'') {
					goto l143
				}
				position++
				if !_rules[ruleAction14]() {
					goto l143
				}
				add(rulesingleQuotedNodeIdentifier, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 18 doubleQuotedNodeIdentifier <- <('"' <(('\\' '\\') / ('\\' '"') / (!('\\' / '"') .))*> '"' Action15)> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('"') {
					goto l154
				}
				position++
				{
					position156 := position
				l157:
					{
						position158, tokenIndex158 := position, tokenIndex
						{
							position159, tokenIndex159 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l160
							}
							position++
							if buffer[position] != rune('\\') {
								goto l160
							}
							position++
							goto l159
						l160:
							position, tokenIndex = position159, tokenIndex159
							if buffer[position] != rune('\\') {
								goto l161
							}
							position++
							if buffer[position] != rune('"') {
								goto l161
							}
							position++
							goto l159
						l161:
							position, tokenIndex = position159, tokenIndex159
							{
								position162, tokenIndex162 := position, tokenIndex
								{
									position163, tokenIndex163 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l164
									}
									position++
									goto l163
								l164:
									position, tokenIndex = position163, tokenIndex163
									if buffer[position] != rune('"') {
										goto l162
									}
									position++
								}
							l163:
								goto l158
							l162:
								position, tokenIndex = position162, tokenIndex162
							}
							if !matchDot() {
								goto l158
							}
						}
					l159:
						goto l157
					l158:
						position, tokenIndex = position158, tokenIndex158
					}
					add(rulePegText, position156)
				}
				if buffer[position] != rune('"') {
					goto l154
				}
				position++
				if !_rules[ruleAction15]() {
					goto l154
				}
				add(ruledoubleQuotedNodeIdentifier, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 19 sepBracketIdentifier <- <(space ',' space)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if !_rules[rulespace]() {
					goto l165
				}
				if buffer[position] != rune(',') {
					goto l165
				}
				position++
				if !_rules[rulespace]() {
					goto l165
				}
				add(rulesepBracketIdentifier, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 20 qualifier <- <(union / script / filter)> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				{
					position169, tokenIndex169 := position, tokenIndex
					if !_rules[ruleunion]() {
						goto l170
					}
					goto l169
				l170:
					position, tokenIndex = position169, tokenIndex169
					if !_rules[rulescript]() {
						goto l171
					}
					goto l169
				l171:
					position, tokenIndex = position169, tokenIndex169
					if !_rules[rulefilter]() {
						goto l167
					}
				}
			l169:
				add(rulequalifier, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 21 union <- <(index (sepUnion index Action16)* !sepUnion)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if !_rules[ruleindex]() {
					goto l172
				}
			l174:
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[rulesepUnion]() {
						goto l175
					}
					if !_rules[ruleindex]() {
						goto l175
					}
					if !_rules[ruleAction16]() {
						goto l175
					}
					goto l174
				l175:
					position, tokenIndex = position175, tokenIndex175
				}
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[rulesepUnion]() {
						goto l176
					}
					goto l172
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(ruleunion, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 22 index <- <(((slice Action17) / (<indexNumber> Action18) / ('*' Action19)) Action20)> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[ruleslice]() {
						goto l180
					}
					if !_rules[ruleAction17]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					{
						position182 := position
						if !_rules[ruleindexNumber]() {
							goto l181
						}
						add(rulePegText, position182)
					}
					if !_rules[ruleAction18]() {
						goto l181
					}
					goto l179
				l181:
					position, tokenIndex = position179, tokenIndex179
					if buffer[position] != rune('*') {
						goto l177
					}
					position++
					if !_rules[ruleAction19]() {
						goto l177
					}
				}
			l179:
				if !_rules[ruleAction20]() {
					goto l177
				}
				add(ruleindex, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 23 slice <- <(anyIndex sepSlice anyIndex ((sepSlice anyIndex) / (space Action21)))> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				if !_rules[ruleanyIndex]() {
					goto l183
				}
				if !_rules[rulesepSlice]() {
					goto l183
				}
				if !_rules[ruleanyIndex]() {
					goto l183
				}
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[rulesepSlice]() {
						goto l186
					}
					if !_rules[ruleanyIndex]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[rulespace]() {
						goto l183
					}
					if !_rules[ruleAction21]() {
						goto l183
					}
				}
			l185:
				add(ruleslice, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 24 anyIndex <- <(<indexNumber?> Action22)> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				{
					position189 := position
					{
						position190, tokenIndex190 := position, tokenIndex
						if !_rules[ruleindexNumber]() {
							goto l190
						}
						goto l191
					l190:
						position, tokenIndex = position190, tokenIndex190
					}
				l191:
					add(rulePegText, position189)
				}
				if !_rules[ruleAction22]() {
					goto l187
				}
				add(ruleanyIndex, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 25 indexNumber <- <(('-' / '+')? [0-9]+)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				{
					position194, tokenIndex194 := position, tokenIndex
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						if buffer[position] != rune('+') {
							goto l194
						}
						position++
					}
				l196:
					goto l195
				l194:
					position, tokenIndex = position194, tokenIndex194
				}
			l195:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l192
				}
				position++
			l198:
				{
					position199, tokenIndex199 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l199
					}
					position++
					goto l198
				l199:
					position, tokenIndex = position199, tokenIndex199
				}
				add(ruleindexNumber, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 26 sepUnion <- <(space ',' space)> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if !_rules[rulespace]() {
					goto l200
				}
				if buffer[position] != rune(',') {
					goto l200
				}
				position++
				if !_rules[rulespace]() {
					goto l200
				}
				add(rulesepUnion, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 27 sepSlice <- <(space ':' space)> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if !_rules[rulespace]() {
					goto l202
				}
				if buffer[position] != rune(':') {
					goto l202
				}
				position++
				if !_rules[rulespace]() {
					goto l202
				}
				add(rulesepSlice, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 28 script <- <(scriptStart <command> scriptEnd Action23)> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if !_rules[rulescriptStart]() {
					goto l204
				}
				{
					position206 := position
					if !_rules[rulecommand]() {
						goto l204
					}
					add(rulePegText, position206)
				}
				if !_rules[rulescriptEnd]() {
					goto l204
				}
				if !_rules[ruleAction23]() {
					goto l204
				}
				add(rulescript, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 29 command <- <(!')' .)+> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position211, tokenIndex211 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l211
					}
					position++
					goto l207
				l211:
					position, tokenIndex = position211, tokenIndex211
				}
				if !matchDot() {
					goto l207
				}
			l209:
				{
					position210, tokenIndex210 := position, tokenIndex
					{
						position212, tokenIndex212 := position, tokenIndex
						if buffer[position] != rune(')') {
							goto l212
						}
						position++
						goto l210
					l212:
						position, tokenIndex = position212, tokenIndex212
					}
					if !matchDot() {
						goto l210
					}
					goto l209
				l210:
					position, tokenIndex = position210, tokenIndex210
				}
				add(rulecommand, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 30 filter <- <(filterStart query filterEnd Action24)> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				if !_rules[rulefilterStart]() {
					goto l213
				}
				if !_rules[rulequery]() {
					goto l213
				}
				if !_rules[rulefilterEnd]() {
					goto l213
				}
				if !_rules[ruleAction24]() {
					goto l213
				}
				add(rulefilter, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 31 query <- <(andQuery (logicOr andQuery Action25)*)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if !_rules[ruleandQuery]() {
					goto l215
				}
			l217:
				{
					position218, tokenIndex218 := position, tokenIndex
					if !_rules[rulelogicOr]() {
						goto l218
					}
					if !_rules[ruleandQuery]() {
						goto l218
					}
					if !_rules[ruleAction25]() {
						goto l218
					}
					goto l217
				l218:
					position, tokenIndex = position218, tokenIndex218
				}
				add(rulequery, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 32 andQuery <- <(basicQuery (logicAnd basicQuery Action26)*)> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				if !_rules[rulebasicQuery]() {
					goto l219
				}
			l221:
				{
					position222, tokenIndex222 := position, tokenIndex
					if !_rules[rulelogicAnd]() {
						goto l222
					}
					if !_rules[rulebasicQuery]() {
						goto l222
					}
					if !_rules[ruleAction26]() {
						goto l222
					}
					goto l221
				l222:
					position, tokenIndex = position222, tokenIndex222
				}
				add(ruleandQuery, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 33 basicQuery <- <((subQueryStart query subQueryEnd) / (<comparator> Action27) / (<(logicNot? jsonpathFilter)> Action28))> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				{
					position225, tokenIndex225 := position, tokenIndex
					if !_rules[rulesubQueryStart]() {
						goto l226
					}
					if !_rules[rulequery]() {
						goto l226
					}
					if !_rules[rulesubQueryEnd]() {
						goto l226
					}
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					{
						position228 := position
						if !_rules[rulecomparator]() {
							goto l227
						}
						add(rulePegText, position228)
					}
					if !_rules[ruleAction27]() {
						goto l227
					}
					goto l225
				l227:
					position, tokenIndex = position225, tokenIndex225
					{
						position229 := position
						{
							position230, tokenIndex230 := position, tokenIndex
							if !_rules[rulelogicNot]() {
								goto l230
							}
							goto l231
						l230:
							position, tokenIndex = position230, tokenIndex230
						}
					l231:
						if !_rules[rulejsonpathFilter]() {
							goto l223
						}
						add(rulePegText, position229)
					}
					if !_rules[ruleAction28]() {
						goto l223
					}
				}
			l225:
				add(rulebasicQuery, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 34 logicOr <- <(space ('|' '|') space)> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				if !_rules[rulespace]() {
					goto l232
				}
				if buffer[position] != rune('|') {
					goto l232
				}
				position++
				if buffer[position] != rune('|') {
					goto l232
				}
				position++
				if !_rules[rulespace]() {
					goto l232
				}
				add(rulelogicOr, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 35 logicAnd <- <(space ('&' '&') space)> */
		func() bool {
			position234, tokenIndex234 := position, tokenIndex
			{
				position235 := position
				if !_rules[rulespace]() {
					goto l234
				}
				if buffer[position] != rune('&') {
					goto l234
				}
				position++
				if buffer[position] != rune('&') {
					goto l234
				}
				position++
				if !_rules[rulespace]() {
					goto l234
				}
				add(rulelogicAnd, position235)
			}
			return true
		l234:
			position, tokenIndex = position234, tokenIndex234
			return false
		},
		/* 36 logicNot <- <('!' space)> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				if buffer[position] != rune('!') {
					goto l236
				}
				position++
				if !_rules[rulespace]() {
					goto l236
				}
				add(rulelogicNot, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 37 comparator <- <((qParam space (('=' '=' space qParam Action29) / ('!' '=' space qParam Action30))) / (qNumericParam space (('<' '=' space qNumericParam Action31) / ('<' space qNumericParam Action32) / ('>' '=' space qNumericParam Action33) / ('>' space qNumericParam Action34))) / (singleJsonpathFilter space ('=' '~') space '/' <regex> '/' Action35))> */
		func() bool {
			position238, tokenIndex238 := position, tokenIndex
			{
				position239 := position
				{
					position240, tokenIndex240 := position, tokenIndex
					if !_rules[ruleqParam]() {
						goto l241
					}
					if !_rules[rulespace]() {
						goto l241
					}
					{
						position242, tokenIndex242 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l243
						}
						position++
						if buffer[position] != rune('=') {
							goto l243
						}
						position++
						if !_rules[rulespace]() {
							goto l243
						}
						if !_rules[ruleqParam]() {
							goto l243
						}
						if !_rules[ruleAction29]() {
							goto l243
						}
						goto l242
					l243:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('!') {
							goto l241
						}
						position++
						if buffer[position] != rune('=') {
							goto l241
						}
						position++
						if !_rules[rulespace]() {
							goto l241
						}
						if !_rules[ruleqParam]() {
							goto l241
						}
						if !_rules[ruleAction30]() {
							goto l241
						}
					}
				l242:
					goto l240
				l241:
					position, tokenIndex = position240, tokenIndex240
					if !_rules[ruleqNumericParam]() {
						goto l244
					}
					if !_rules[rulespace]() {
						goto l244
					}
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l246
						}
						position++
						if buffer[position] != rune('=') {
							goto l246
						}
						position++
						if !_rules[rulespace]() {
							goto l246
						}
						if !_rules[ruleqNumericParam]() {
							goto l246
						}
						if !_rules[ruleAction31]() {
							goto l246
						}
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('<') {
							goto l247
						}
						position++
						if !_rules[rulespace]() {
							goto l247
						}
						if !_rules[ruleqNumericParam]() {
							goto l247
						}
						if !_rules[ruleAction32]() {
							goto l247
						}
						goto l245
					l247:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('>') {
							goto l248
						}
						position++
						if buffer[position] != rune('=') {
							goto l248
						}
						position++
						if !_rules[rulespace]() {
							goto l248
						}
						if !_rules[ruleqNumericParam]() {
							goto l248
						}
						if !_rules[ruleAction33]() {
							goto l248
						}
						goto l245
					l248:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('>') {
							goto l244
						}
						position++
						if !_rules[rulespace]() {
							goto l244
						}
						if !_rules[ruleqNumericParam]() {
							goto l244
						}
						if !_rules[ruleAction34]() {
							goto l244
						}
					}
				l245:
					goto l240
				l244:
					position, tokenIndex = position240, tokenIndex240
					if !_rules[rulesingleJsonpathFilter]() {
						goto l238
					}
					if !_rules[rulespace]() {
						goto l238
					}
					if buffer[position] != rune('=') {
						goto l238
					}
					position++
					if buffer[position] != rune('~') {
						goto l238
					}
					position++
					if !_rules[rulespace]() {
						goto l238
					}
					if buffer[position] != rune('/') {
						goto l238
					}
					position++
					{
						position249 := position
						if !_rules[ruleregex]() {
							goto l238
						}
						add(rulePegText, position249)
					}
					if buffer[position] != rune('/') {
						goto l238
					}
					position++
					if !_rules[ruleAction35]() {
						goto l238
					}
				}
			l240:
				add(rulecomparator, position239)
			}
			return true
		l238:
			position, tokenIndex = position238, tokenIndex238
			return false
		},
		/* 38 qParam <- <((qLiteral Action36) / singleJsonpathFilter)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				{
					position252, tokenIndex252 := position, tokenIndex
					if !_rules[ruleqLiteral]() {
						goto l253
					}
					if !_rules[ruleAction36]() {
						goto l253
					}
					goto l252
				l253:
					position, tokenIndex = position252, tokenIndex252
					if !_rules[rulesingleJsonpathFilter]() {
						goto l250
					}
				}
			l252:
				add(ruleqParam, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		/* 39 qNumericParam <- <((lNumber Action37) / singleJsonpathFilter)> */
		func() bool {
			position254, tokenIndex254 := position, tokenIndex
			{
				position255 := position
				{
					position256, tokenIndex256 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l257
					}
					if !_rules[ruleAction37]() {
						goto l257
					}
					goto l256
				l257:
					position, tokenIndex = position256, tokenIndex256
					if !_rules[rulesingleJsonpathFilter]() {
						goto l254
					}
				}
			l256:
				add(ruleqNumericParam, position255)
			}
			return true
		l254:
			position, tokenIndex = position254, tokenIndex254
			return false
		},
		/* 40 qLiteral <- <(lNumber / lBool / lString / lNull)> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				{
					position260, tokenIndex260 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l261
					}
					goto l260
				l261:
					position, tokenIndex = position260, tokenIndex260
					if !_rules[rulelBool]() {
						goto l262
					}
					goto l260
				l262:
					position, tokenIndex = position260, tokenIndex260
					if !_rules[rulelString]() {
						goto l263
					}
					goto l260
				l263:
					position, tokenIndex = position260, tokenIndex260
					if !_rules[rulelNull]() {
						goto l258
					}
				}
			l260:
				add(ruleqLiteral, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 41 singleJsonpathFilter <- <(jsonpathFilter Action38)> */
		func() bool {
			position264, tokenIndex264 := position, tokenIndex
			{
				position265 := position
				if !_rules[rulejsonpathFilter]() {
					goto l264
				}
				if !_rules[ruleAction38]() {
					goto l264
				}
				add(rulesingleJsonpathFilter, position265)
			}
			return true
		l264:
			position, tokenIndex = position264, tokenIndex264
			return false
		},
		/* 42 jsonpathFilter <- <(Action39 <jsonpathParameter> Action40)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if !_rules[ruleAction39]() {
					goto l266
				}
				{
					position268 := position
					if !_rules[rulejsonpathParameter]() {
						goto l266
					}
					add(rulePegText, position268)
				}
				if !_rules[ruleAction40]() {
					goto l266
				}
				add(rulejsonpathFilter, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 43 lNumber <- <(<(('-' / '+')? [0-9] ('-' / '+' / '.' / [0-9] / [a-z] / [A-Z])*)> Action41)> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271 := position
					{
						position272, tokenIndex272 := position, tokenIndex
						{
							position274, tokenIndex274 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l275
							}
							position++
							goto l274
						l275:
							position, tokenIndex = position274, tokenIndex274
							if buffer[position] != rune('+') {
								goto l272
							}
							position++
						}
					l274:
						goto l273
					l272:
						position, tokenIndex = position272, tokenIndex272
					}
				l273:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l269
					}
					position++
				l276:
					{
						position277, tokenIndex277 := position, tokenIndex
						{
							position278, tokenIndex278 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l279
							}
							position++
							goto l278
						l279:
							position, tokenIndex = position278, tokenIndex278
							if buffer[position] != rune('+') {
								goto l280
							}
							position++
							goto l278
						l280:
							position, tokenIndex = position278, tokenIndex278
							if buffer[position] != rune('.') {
								goto l281
							}
							position++
							goto l278
						l281:
							position, tokenIndex = position278, tokenIndex278
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l282
							}
							position++
							goto l278
						l282:
							position, tokenIndex = position278, tokenIndex278
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l283
							}
							position++
							goto l278
						l283:
							position, tokenIndex = position278, tokenIndex278
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l277
							}
							position++
						}
					l278:
						goto l276
					l277:
						position, tokenIndex = position277, tokenIndex277
					}
					add(rulePegText, position271)
				}
				if !_rules[ruleAction41]() {
					goto l269
				}
				add(rulelNumber, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 44 lBool <- <(((('t' 'r' 'u' 'e') / ('T' 'r' 'u' 'e') / ('T' 'R' 'U' 'E')) Action42) / ((('f' 'a' 'l' 's' 'e') / ('F' 'a' 'l' 's' 'e') / ('F' 'A' 'L' 'S' 'E')) Action43))> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				{
					position286, tokenIndex286 := position, tokenIndex
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l289
						}
						position++
						if buffer[position] != rune('r') {
							goto l289
						}
						position++
						if buffer[position] != rune('u') {
							goto l289
						}
						position++
						if buffer[position] != rune('e') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('T') {
							goto l290
						}
						position++
						if buffer[position] != rune('r') {
							goto l290
						}
						position++
						if buffer[position] != rune('u') {
							goto l290
						}
						position++
						if buffer[position] != rune('e') {
							goto l290
						}
						position++
						goto l288
					l290:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('T') {
							goto l287
						}
						position++
						if buffer[position] != rune('R') {
							goto l287
						}
						position++
						if buffer[position] != rune('U') {
							goto l287
						}
						position++
						if buffer[position] != rune('E') {
							goto l287
						}
						position++
					}
				l288:
					if !_rules[ruleAction42]() {
						goto l287
					}
					goto l286
				l287:
					position, tokenIndex = position286, tokenIndex286
					{
						position291, tokenIndex291 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l292
						}
						position++
						if buffer[position] != rune('a') {
							goto l292
						}
						position++
						if buffer[position] != rune('l') {
							goto l292
						}
						position++
						if buffer[position] != rune('s') {
							goto l292
						}
						position++
						if buffer[position] != rune('e') {
							goto l292
						}
						position++
						goto l291
					l292:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('F') {
							goto l293
						}
						position++
						if buffer[position] != rune('a') {
							goto l293
						}
						position++
						if buffer[position] != rune('l') {
							goto l293
						}
						position++
						if buffer[position] != rune('s') {
							goto l293
						}
						position++
						if buffer[position] != rune('e') {
							goto l293
						}
						position++
						goto l291
					l293:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('F') {
							goto l284
						}
						position++
						if buffer[position] != rune('A') {
							goto l284
						}
						position++
						if buffer[position] != rune('L') {
							goto l284
						}
						position++
						if buffer[position] != rune('S') {
							goto l284
						}
						position++
						if buffer[position] != rune('E') {
							goto l284
						}
						position++
					}
				l291:
					if !_rules[ruleAction43]() {
						goto l284
					}
				}
			l286:
				add(rulelBool, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 45 lString <- <(('\'' <(('\\' '\\') / ('\\' '\'') / (!'\'' .))*> '\'' Action44) / ('"' <(('\\' '\\') / ('\\' '"') / (!'"' .))*> '"' Action45))> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				{
					position296, tokenIndex296 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l297
					}
					position++
					{
						position298 := position
					l299:
						{
							position300, tokenIndex300 := position, tokenIndex
							{
								position301, tokenIndex301 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l302
								}
								position++
								if buffer[position] != rune('\\') {
									goto l302
								}
								position++
								goto l301
							l302:
								position, tokenIndex = position301, tokenIndex301
								if buffer[position] != rune('\\') {
									goto l303
								}
								position++
								if buffer[position] != rune('\'') {
									goto l303
								}
								position++
								goto l301
							l303:
								position, tokenIndex = position301, tokenIndex301
								{
									position304, tokenIndex304 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l304
									}
									position++
									goto l300
								l304:
									position, tokenIndex = position304, tokenIndex304
								}
								if !matchDot() {
									goto l300
								}
							}
						l301:
							goto l299
						l300:
							position, tokenIndex = position300, tokenIndex300
						}
						add(rulePegText, position298)
					}
					if buffer[position] != rune('\'') {
						goto l297
					}
					position++
					if !_rules[ruleAction44]() {
						goto l297
					}
					goto l296
				l297:
					position, tokenIndex = position296, tokenIndex296
					if buffer[position] != rune('"') {
						goto l294
					}
					position++
					{
						position305 := position
					l306:
						{
							position307, tokenIndex307 := position, tokenIndex
							{
								position308, tokenIndex308 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l309
								}
								position++
								if buffer[position] != rune('\\') {
									goto l309
								}
								position++
								goto l308
							l309:
								position, tokenIndex = position308, tokenIndex308
								if buffer[position] != rune('\\') {
									goto l310
								}
								position++
								if buffer[position] != rune('"') {
									goto l310
								}
								position++
								goto l308
							l310:
								position, tokenIndex = position308, tokenIndex308
								{
									position311, tokenIndex311 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l311
									}
									position++
									goto l307
								l311:
									position, tokenIndex = position311, tokenIndex311
								}
								if !matchDot() {
									goto l307
								}
							}
						l308:
							goto l306
						l307:
							position, tokenIndex = position307, tokenIndex307
						}
						add(rulePegText, position305)
					}
					if buffer[position] != rune('"') {
						goto l294
					}
					position++
					if !_rules[ruleAction45]() {
						goto l294
					}
				}
			l296:
				add(rulelString, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 46 lNull <- <((('n' 'u' 'l' 'l') / ('N' 'u' 'l' 'l') / ('N' 'U' 'L' 'L')) Action46)> */
		func() bool {
			position312, tokenIndex312 := position, tokenIndex
			{
				position313 := position
				{
					position314, tokenIndex314 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l315
					}
					position++
					if buffer[position] != rune('u') {
						goto l315
					}
					position++
					if buffer[position] != rune('l') {
						goto l315
					}
					position++
					if buffer[position] != rune('l') {
						goto l315
					}
					position++
					goto l314
				l315:
					position, tokenIndex = position314, tokenIndex314
					if buffer[position] != rune('N') {
						goto l316
					}
					position++
					if buffer[position] != rune('u') {
						goto l316
					}
					position++
					if buffer[position] != rune('l') {
						goto l316
					}
					position++
					if buffer[position] != rune('l') {
						goto l316
					}
					position++
					goto l314
				l316:
					position, tokenIndex = position314, tokenIndex314
					if buffer[position] != rune('N') {
						goto l312
					}
					position++
					if buffer[position] != rune('U') {
						goto l312
					}
					position++
					if buffer[position] != rune('L') {
						goto l312
					}
					position++
					if buffer[position] != rune('L') {
						goto l312
					}
					position++
				}
			l314:
				if !_rules[ruleAction46]() {
					goto l312
				}
				add(rulelNull, position313)
			}
			return true
		l312:
			position, tokenIndex = position312, tokenIndex312
			return false
		},
		/* 47 regex <- <(('\\' '\\') / ('\\' '/') / (!'/' .))*> */
		func() bool {
			{
				position318 := position
			l319:
				{
					position320, tokenIndex320 := position, tokenIndex
					{
						position321, tokenIndex321 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l322
						}
						position++
						if buffer[position] != rune('\\') {
							goto l322
						}
						position++
						goto l321
					l322:
						position, tokenIndex = position321, tokenIndex321
						if buffer[position] != rune('\\') {
							goto l323
						}
						position++
						if buffer[position] != rune('/') {
							goto l323
						}
						position++
						goto l321
					l323:
						position, tokenIndex = position321, tokenIndex321
						{
							position324, tokenIndex324 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l324
							}
							position++
							goto l320
						l324:
							position, tokenIndex = position324, tokenIndex324
						}
						if !matchDot() {
							goto l320
						}
					}
				l321:
					goto l319
				l320:
					position, tokenIndex = position320, tokenIndex320
				}
				add(ruleregex, position318)
			}
			return true
		},
		/* 48 squareBracketStart <- <('[' space)> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if buffer[position] != rune('[') {
					goto l325
				}
				position++
				if !_rules[rulespace]() {
					goto l325
				}
				add(rulesquareBracketStart, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 49 squareBracketEnd <- <(space ']')> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[rulespace]() {
					goto l327
				}
				if buffer[position] != rune(']') {
					goto l327
				}
				position++
				add(rulesquareBracketEnd, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 50 scriptStart <- <('(' space)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if buffer[position] != rune('(') {
					goto l329
				}
				position++
				if !_rules[rulespace]() {
					goto l329
				}
				add(rulescriptStart, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 51 scriptEnd <- <(space ')')> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				if !_rules[rulespace]() {
					goto l331
				}
				if buffer[position] != rune(')') {
					goto l331
				}
				position++
				add(rulescriptEnd, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 52 filterStart <- <('?' '(' space)> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				if buffer[position] != rune('?') {
					goto l333
				}
				position++
				if buffer[position] != rune('(') {
					goto l333
				}
				position++
				if !_rules[rulespace]() {
					goto l333
				}
				add(rulefilterStart, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 53 filterEnd <- <(space ')')> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[rulespace]() {
					goto l335
				}
				if buffer[position] != rune(')') {
					goto l335
				}
				position++
				add(rulefilterEnd, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 54 subQueryStart <- <('(' space)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if buffer[position] != rune('(') {
					goto l337
				}
				position++
				if !_rules[rulespace]() {
					goto l337
				}
				add(rulesubQueryStart, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 55 subQueryEnd <- <(space ')')> */
		func() bool {
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if !_rules[rulespace]() {
					goto l339
				}
				if buffer[position] != rune(')') {
					goto l339
				}
				position++
				add(rulesubQueryEnd, position340)
			}
			return true
		l339:
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 56 space <- <(' ' / '\t')*> */
		func() bool {
			{
				position342 := position
			l343:
				{
					position344, tokenIndex344 := position, tokenIndex
					{
						position345, tokenIndex345 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l346
						}
						position++
						goto l345
					l346:
						position, tokenIndex = position345, tokenIndex345
						if buffer[position] != rune('\t') {
							goto l344
						}
						position++
					}
				l345:
					goto l343
				l344:
					position, tokenIndex = position344, tokenIndex344
				}
				add(rulespace, position342)
			}
			return true
		},
		/* 58 Action0 <- <{
		    p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 60 Action1 <- <{
		    p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 61 Action2 <- <{
		    p.setNodeChain()
		    p.updateRootValueGroup()
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 62 Action3 <- <{
		    p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 63 Action4 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 64 Action5 <- <{
		    p.pushFunction(text, p.pop().(string))
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 65 Action6 <- <{
		    p.push(text)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 66 Action7 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 67 Action8 <- <{
		    p.pushRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 68 Action9 <- <{
		    p.pushCurrentRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 69 Action10 <- <{
		    p.pushChildWildcardIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 70 Action11 <- <{
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 71 Action12 <- <{
		    identifier2 := p.pop().(syntaxNode)
		    identifier1 := p.pop().(syntaxNode)
		    p.pushChildMultiIdentifier(identifier1, identifier2)
		}> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 72 Action13 <- <{
		    p.pushChildWildcardIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 73 Action14 <- <{
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 74 Action15 <- <{ // '
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 75 Action16 <- <{
		    childIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion.merge(childIndexUnion)
		    parentIndexUnion.setValueGroup()
		    p.push(parentIndexUnion)
		}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 76 Action17 <- <{
		    step  := p.pop().(*syntaxIndexSubscript)
		    end   := p.pop().(*syntaxIndexSubscript)
		    start := p.pop().(*syntaxIndexSubscript)

		    if step.isOmitted || step.number == 0 {
		        step.number = 1
		    }

		    if step.number > 0 {
		        p.pushSlicePositiveStepSubscript(start, end, step)
		    } else {
		        p.pushSliceNegativeStepSubscript(start, end, step)
		    }
		}> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 77 Action18 <- <{
		    p.pushIndexSubscript(text)
		}> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 78 Action19 <- <{
		    p.pushWildcardSubscript()
		}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 79 Action20 <- <{
		    p.pushUnionQualifier(p.pop().(syntaxSubscript))
		}> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 80 Action21 <- <{
		    p.pushIndexSubscript(`1`)
		}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 81 Action22 <- <{
		    if len(text) > 0 {
		        p.pushIndexSubscript(text)
		    } else {
		        p.pushOmittedIndexSubscript(`0`)
		    }
		}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 82 Action23 <- <{
		    p.pushScriptQualifier(text)
		}> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 83 Action24 <- <{
		    p.pushFilterQualifier(p.pop().(syntaxQuery))
		}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 84 Action25 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalOr(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 85 Action26 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalAnd(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 86 Action27 <- <{
		        if !p.hasErr() {
		            query := p.pop()
		            p.push(query)

					if logicalNot, ok := query.(*syntaxLogicalNot); ok {
						query = (*logicalNot).query
					}
		            if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
		                _, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
		                _, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
		                if leftIsCurrentRoot && rigthIsCurrentRoot {
		                    p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
		                }
					}
		        }
		    }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 87 Action28 <- <{
		    _ = p.pop()
		    jsonpathFilter := p.pop().(syntaxQuery)
		    if text[0:1] == `!` {
		        p.pushLogicalNot(jsonpathFilter)
		    } else {
		        p.push(jsonpathFilter)
		    }
		}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 88 Action29 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareEQ(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 89 Action30 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareNE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 90 Action31 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 91 Action32 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 92 Action33 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 93 Action34 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 94 Action35 <- <{
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareRegex(leftParam, text)
		}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 95 Action36 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 96 Action37 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 97 Action38 <- <{
		    isLiteral := p.pop().(bool)
		    param := p.pop().(syntaxQueryJSONPathParameter)
		    if !p.hasErr() && param.isValueGroupParameter() {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
		    }
		    p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)
		}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 98 Action39 <- <{
		    p.saveParams()
		}> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 99 Action40 <- <{
		    p.loadParams()

		    node := p.pop().(syntaxNode)
		    checkNode := node
		    if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
		        checkNode = aggregateFunction.param
		    }

		    switch checkNode.(type) {
		    case *syntaxRootIdentifier:
		        p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
		        p.push(true)
		    case *syntaxCurrentRootIdentifier:
		        p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
		        p.push(false)
		    default:
		        p.push(&syntaxQueryParamRoot{})
		        p.push(true)
		    }
		}> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 100 Action41 <- <{
		    p.push(p.toFloat(text))
		}> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 101 Action42 <- <{
		    p.push(true)
		}> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 102 Action43 <- <{
		    p.push(false)
		}> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 103 Action44 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 104 Action45 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
		/* 105 Action46 <- <{
		    p.push(nil)
		}> */
		func() bool {
			{
				add(ruleAction46, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
