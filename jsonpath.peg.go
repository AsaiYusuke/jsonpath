package jsonpath

// Code generated by C:\Users\prome\go\bin\peg.exe jsonpath.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleexpression
	ruleEND
	rulejsonpath
	rulejsonpathParameter
	rulecontinuedJsonpath
	rulerootNode
	ruleparameterRootNode
	rulechildNode
	rulefunction
	rulefunctionName
	rulebracketNode
	rulerootIdentifier
	rulecurrentRootIdentifier
	ruledotChildIdentifier
	rulebracketChildIdentifier
	rulebracketNodeIdentifier
	rulewildcardIdentifier
	rulesingleQuotedNodeIdentifier
	ruledoubleQuotedNodeIdentifier
	rulequalifier
	ruleunion
	ruleindex
	ruleslice
	ruleanyIndex
	ruleindexNumber
	rulesep
	rulesepSlice
	rulescript
	rulecommand
	rulefilter
	rulequery
	ruleandQuery
	rulebasicQuery
	rulelogicOr
	rulelogicAnd
	rulelogicNot
	rulecomparator
	ruleqParam
	ruleqNumericParam
	ruleqLiteral
	rulesingleJsonpathFilter
	rulejsonpathFilter
	rulelNumber
	rulelBool
	rulelString
	rulelNull
	ruleregex
	rulesquareBracketStart
	rulesquareBracketEnd
	rulescriptStart
	rulescriptEnd
	rulefilterStart
	rulefilterEnd
	rulesubQueryStart
	rulesubQueryEnd
	rulespace
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
)

var rul3s = [...]string{
	"Unknown",
	"expression",
	"END",
	"jsonpath",
	"jsonpathParameter",
	"continuedJsonpath",
	"rootNode",
	"parameterRootNode",
	"childNode",
	"function",
	"functionName",
	"bracketNode",
	"rootIdentifier",
	"currentRootIdentifier",
	"dotChildIdentifier",
	"bracketChildIdentifier",
	"bracketNodeIdentifier",
	"wildcardIdentifier",
	"singleQuotedNodeIdentifier",
	"doubleQuotedNodeIdentifier",
	"qualifier",
	"union",
	"index",
	"slice",
	"anyIndex",
	"indexNumber",
	"sep",
	"sepSlice",
	"script",
	"command",
	"filter",
	"query",
	"andQuery",
	"basicQuery",
	"logicOr",
	"logicAnd",
	"logicNot",
	"comparator",
	"qParam",
	"qNumericParam",
	"qLiteral",
	"singleJsonpathFilter",
	"jsonpathFilter",
	"lNumber",
	"lBool",
	"lString",
	"lNull",
	"regex",
	"squareBracketStart",
	"squareBracketEnd",
	"scriptStart",
	"scriptEnd",
	"filterStart",
	"filterEnd",
	"subQueryStart",
	"subQueryEnd",
	"space",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type pegJSONPathParser struct {
	jsonPathParser

	Buffer string
	buffer []rune
	rules  [104]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *pegJSONPathParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *pegJSONPathParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *pegJSONPathParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *pegJSONPathParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *pegJSONPathParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *pegJSONPathParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *pegJSONPathParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))

		case ruleAction1:

			p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)

		case ruleAction2:

			p.setNodeChain()
			p.updateRootValueGroup()

		case ruleAction3:

			p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))

		case ruleAction4:

			p.setLastNodeText(text)

		case ruleAction5:

			p.pushFunction(text, p.pop().(string))

		case ruleAction6:

			p.push(text)

		case ruleAction7:

			p.setLastNodeText(text)

		case ruleAction8:

			p.pushRootIdentifier()

		case ruleAction9:

			p.pushCurrentRootIdentifier()

		case ruleAction10:

			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction11:

			identifier2 := p.pop().(syntaxNode)
			identifier1 := p.pop().(syntaxNode)
			p.pushChildMultiIdentifier(identifier1, identifier2)

		case ruleAction12:

			p.pushChildWildcardIdentifier()

		case ruleAction13:

			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction14:
			// '
			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction15:

			childIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion.merge(childIndexUnion)
			parentIndexUnion.setValueGroup()
			p.push(parentIndexUnion)

		case ruleAction16:

			step := p.pop().(*syntaxIndexSubscript)
			end := p.pop().(*syntaxIndexSubscript)
			start := p.pop().(*syntaxIndexSubscript)

			if step.isOmitted || step.number == 0 {
				step.number = 1
			}

			if step.number > 0 {
				p.pushSlicePositiveStepSubscript(start, end, step)
			} else {
				p.pushSliceNegativeStepSubscript(start, end, step)
			}

		case ruleAction17:

			p.pushIndexSubscript(text)

		case ruleAction18:

			p.pushWildcardSubscript()

		case ruleAction19:

			p.pushUnionQualifier(p.pop().(syntaxSubscript))

		case ruleAction20:

			p.pushIndexSubscript(`1`)

		case ruleAction21:

			if len(text) > 0 {
				p.pushIndexSubscript(text)
			} else {
				p.pushOmittedIndexSubscript(`0`)
			}

		case ruleAction22:

			p.pushScriptQualifier(text)

		case ruleAction23:

			p.pushFilterQualifier(p.pop().(syntaxQuery))

		case ruleAction24:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalOr(leftQuery, rightQuery)

		case ruleAction25:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalAnd(leftQuery, rightQuery)

		case ruleAction26:

			if !p.hasErr() {
				query := p.pop()
				p.push(query)

				if logicalNot, ok := query.(*syntaxLogicalNot); ok {
					query = (*logicalNot).query
				}
				if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
					_, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
					_, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
					if leftIsCurrentRoot && rigthIsCurrentRoot {
						p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
					}
				}
			}

		case ruleAction27:

			_ = p.pop()
			jsonpathFilter := p.pop().(syntaxQuery)
			if text[0:1] == `!` {
				p.pushLogicalNot(jsonpathFilter)
			} else {
				p.push(jsonpathFilter)
			}

		case ruleAction28:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareEQ(leftParam, rightParam)

		case ruleAction29:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareNE(leftParam, rightParam)

		case ruleAction30:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGE(leftParam, rightParam)

		case ruleAction31:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGT(leftParam, rightParam)

		case ruleAction32:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLE(leftParam, rightParam)

		case ruleAction33:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLT(leftParam, rightParam)

		case ruleAction34:

			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareRegex(leftParam, text)

		case ruleAction35:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction36:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction37:

			isLiteral := p.pop().(bool)
			param := p.pop().(syntaxQueryJSONPathParameter)
			if !p.hasErr() && param.isValueGroupParameter() {
				p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
			}
			p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)

		case ruleAction38:

			p.saveParams()

		case ruleAction39:

			p.loadParams()

			node := p.pop().(syntaxNode)
			checkNode := node
			if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
				checkNode = aggregateFunction.param
			}

			switch checkNode.(type) {
			case *syntaxRootIdentifier:
				p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
				p.push(true)
			case *syntaxCurrentRootIdentifier:
				p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
				p.push(false)
			default:
				p.push(&syntaxQueryParamRoot{})
				p.push(true)
			}

		case ruleAction40:

			p.push(p.toFloat(text))

		case ruleAction41:

			p.push(true)

		case ruleAction42:

			p.push(false)

		case ruleAction43:

			p.push(p.unescape(text))

		case ruleAction44:
			// '
			p.push(p.unescape(text))

		case ruleAction45:

			p.push(nil)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *pegJSONPathParser) Init(options ...func(*pegJSONPathParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 expression <- <((jsonpath END Action0) / (jsonpath? <.*> END Action1))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulejsonpath]() {
						goto l3
					}
					if !_rules[ruleEND]() {
						goto l3
					}
					if !_rules[ruleAction0]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulejsonpath]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					{
						position6 := position
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(rulePegText, position6)
					}
					if !_rules[ruleEND]() {
						goto l0
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
				}
			l2:
				add(ruleexpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 END <- <!.> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !matchDot() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleEND, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 jsonpath <- <(space rootNode continuedJsonpath)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[rulerootNode]() {
					goto l12
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l12
				}
				add(rulejsonpath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 jsonpathParameter <- <(space parameterRootNode continuedJsonpath)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[rulespace]() {
					goto l14
				}
				if !_rules[ruleparameterRootNode]() {
					goto l14
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l14
				}
				add(rulejsonpathParameter, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 continuedJsonpath <- <(childNode* function* space Action2)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[rulechildNode]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
			l20:
				{
					position21, tokenIndex21 := position, tokenIndex
					if !_rules[rulefunction]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position21, tokenIndex21
				}
				if !_rules[rulespace]() {
					goto l16
				}
				if !_rules[ruleAction2]() {
					goto l16
				}
				add(rulecontinuedJsonpath, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 rootNode <- <(rootIdentifier / bracketNode / dotChildIdentifier)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[rulebracketNode]() {
						goto l26
					}
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruledotChildIdentifier]() {
						goto l22
					}
				}
			l24:
				add(rulerootNode, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 parameterRootNode <- <(rootIdentifier / currentRootIdentifier)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position29, tokenIndex29
					if !_rules[rulecurrentRootIdentifier]() {
						goto l27
					}
				}
			l29:
				add(ruleparameterRootNode, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 7 childNode <- <(('.' '.' (bracketNode / dotChildIdentifier) Action3) / (<('.' dotChildIdentifier)> Action4) / bracketNode)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33, tokenIndex33 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulebracketNode]() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruledotChildIdentifier]() {
							goto l34
						}
					}
				l35:
					if !_rules[ruleAction3]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					{
						position38 := position
						if buffer[position] != rune('.') {
							goto l37
						}
						position++
						if !_rules[ruledotChildIdentifier]() {
							goto l37
						}
						add(rulePegText, position38)
					}
					if !_rules[ruleAction4]() {
						goto l37
					}
					goto l33
				l37:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[rulebracketNode]() {
						goto l31
					}
				}
			l33:
				add(rulechildNode, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 8 function <- <(<('.' functionName ('(' ')'))> Action5)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					if buffer[position] != rune('.') {
						goto l39
					}
					position++
					if !_rules[rulefunctionName]() {
						goto l39
					}
					if buffer[position] != rune('(') {
						goto l39
					}
					position++
					if buffer[position] != rune(')') {
						goto l39
					}
					position++
					add(rulePegText, position41)
				}
				if !_rules[ruleAction5]() {
					goto l39
				}
				add(rulefunction, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 functionName <- <(<('-' / '_' / [a-z] / [A-Z])+> Action6)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44 := position
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('_') {
							goto l49
						}
						position++
						goto l47
					l49:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l50
						}
						position++
						goto l47
					l50:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l42
						}
						position++
					}
				l47:
				l45:
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('_') {
								goto l53
							}
							position++
							goto l51
						l53:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l54
							}
							position++
							goto l51
						l54:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l46
							}
							position++
						}
					l51:
						goto l45
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					add(rulePegText, position44)
				}
				if !_rules[ruleAction6]() {
					goto l42
				}
				add(rulefunctionName, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 bracketNode <- <(<(squareBracketStart (bracketChildIdentifier / qualifier) squareBracketEnd)> Action7)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57 := position
					if !_rules[rulesquareBracketStart]() {
						goto l55
					}
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[rulebracketChildIdentifier]() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if !_rules[rulequalifier]() {
							goto l55
						}
					}
				l58:
					if !_rules[rulesquareBracketEnd]() {
						goto l55
					}
					add(rulePegText, position57)
				}
				if !_rules[ruleAction7]() {
					goto l55
				}
				add(rulebracketNode, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 rootIdentifier <- <('$' Action8)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('$') {
					goto l60
				}
				position++
				if !_rules[ruleAction8]() {
					goto l60
				}
				add(rulerootIdentifier, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 12 currentRootIdentifier <- <('@' Action9)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('@') {
					goto l62
				}
				position++
				if !_rules[ruleAction9]() {
					goto l62
				}
				add(rulecurrentRootIdentifier, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 13 dotChildIdentifier <- <(wildcardIdentifier / (<(('\\' '\\') / ('\\' ('.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ')) / (!('\\' / '.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ') .))+> !('(' ')') Action10))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[rulewildcardIdentifier]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					{
						position68 := position
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if buffer[position] != rune('\\') {
								goto l73
							}
							position++
							{
								position74, tokenIndex74 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l75
								}
								position++
								goto l74
							l75:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('[') {
									goto l76
								}
								position++
								goto l74
							l76:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('(') {
									goto l77
								}
								position++
								goto l74
							l77:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(')') {
									goto l78
								}
								position++
								goto l74
							l78:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('=') {
									goto l79
								}
								position++
								goto l74
							l79:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('!') {
									goto l80
								}
								position++
								goto l74
							l80:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('>') {
									goto l81
								}
								position++
								goto l74
							l81:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('<') {
									goto l82
								}
								position++
								goto l74
							l82:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\t') {
									goto l83
								}
								position++
								goto l74
							l83:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\r') {
									goto l84
								}
								position++
								goto l74
							l84:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\n') {
									goto l85
								}
								position++
								goto l74
							l85:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(' ') {
									goto l73
								}
								position++
							}
						l74:
							goto l71
						l73:
							position, tokenIndex = position71, tokenIndex71
							{
								position86, tokenIndex86 := position, tokenIndex
								{
									position87, tokenIndex87 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l88
									}
									position++
									goto l87
								l88:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('.') {
										goto l89
									}
									position++
									goto l87
								l89:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('[') {
										goto l90
									}
									position++
									goto l87
								l90:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('(') {
										goto l91
									}
									position++
									goto l87
								l91:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(')') {
										goto l92
									}
									position++
									goto l87
								l92:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('=') {
										goto l93
									}
									position++
									goto l87
								l93:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('!') {
										goto l94
									}
									position++
									goto l87
								l94:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('>') {
										goto l95
									}
									position++
									goto l87
								l95:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('<') {
										goto l96
									}
									position++
									goto l87
								l96:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\t') {
										goto l97
									}
									position++
									goto l87
								l97:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\r') {
										goto l98
									}
									position++
									goto l87
								l98:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\n') {
										goto l99
									}
									position++
									goto l87
								l99:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(' ') {
										goto l86
									}
									position++
								}
							l87:
								goto l64
							l86:
								position, tokenIndex = position86, tokenIndex86
							}
							if !matchDot() {
								goto l64
							}
						}
					l71:
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							{
								position100, tokenIndex100 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								goto l100
							l101:
								position, tokenIndex = position100, tokenIndex100
								if buffer[position] != rune('\\') {
									goto l102
								}
								position++
								{
									position103, tokenIndex103 := position, tokenIndex
									if buffer[position] != rune('.') {
										goto l104
									}
									position++
									goto l103
								l104:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('[') {
										goto l105
									}
									position++
									goto l103
								l105:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('(') {
										goto l106
									}
									position++
									goto l103
								l106:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(')') {
										goto l107
									}
									position++
									goto l103
								l107:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('=') {
										goto l108
									}
									position++
									goto l103
								l108:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('!') {
										goto l109
									}
									position++
									goto l103
								l109:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('>') {
										goto l110
									}
									position++
									goto l103
								l110:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('<') {
										goto l111
									}
									position++
									goto l103
								l111:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\t') {
										goto l112
									}
									position++
									goto l103
								l112:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\r') {
										goto l113
									}
									position++
									goto l103
								l113:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\n') {
										goto l114
									}
									position++
									goto l103
								l114:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(' ') {
										goto l102
									}
									position++
								}
							l103:
								goto l100
							l102:
								position, tokenIndex = position100, tokenIndex100
								{
									position115, tokenIndex115 := position, tokenIndex
									{
										position116, tokenIndex116 := position, tokenIndex
										if buffer[position] != rune('\\') {
											goto l117
										}
										position++
										goto l116
									l117:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('.') {
											goto l118
										}
										position++
										goto l116
									l118:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('[') {
											goto l119
										}
										position++
										goto l116
									l119:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('(') {
											goto l120
										}
										position++
										goto l116
									l120:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(')') {
											goto l121
										}
										position++
										goto l116
									l121:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('=') {
											goto l122
										}
										position++
										goto l116
									l122:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('!') {
											goto l123
										}
										position++
										goto l116
									l123:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('>') {
											goto l124
										}
										position++
										goto l116
									l124:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('<') {
											goto l125
										}
										position++
										goto l116
									l125:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\t') {
											goto l126
										}
										position++
										goto l116
									l126:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\r') {
											goto l127
										}
										position++
										goto l116
									l127:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\n') {
											goto l128
										}
										position++
										goto l116
									l128:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(' ') {
											goto l115
										}
										position++
									}
								l116:
									goto l70
								l115:
									position, tokenIndex = position115, tokenIndex115
								}
								if !matchDot() {
									goto l70
								}
							}
						l100:
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						add(rulePegText, position68)
					}
					{
						position129, tokenIndex129 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l129
						}
						position++
						if buffer[position] != rune(')') {
							goto l129
						}
						position++
						goto l64
					l129:
						position, tokenIndex = position129, tokenIndex129
					}
					if !_rules[ruleAction10]() {
						goto l64
					}
				}
			l66:
				add(ruledotChildIdentifier, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 14 bracketChildIdentifier <- <(bracketNodeIdentifier (sep bracketNodeIdentifier Action11)* !sep)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[rulebracketNodeIdentifier]() {
					goto l130
				}
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l133
					}
					if !_rules[rulebracketNodeIdentifier]() {
						goto l133
					}
					if !_rules[ruleAction11]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				{
					position134, tokenIndex134 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l134
					}
					goto l130
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
				add(rulebracketChildIdentifier, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 15 bracketNodeIdentifier <- <(wildcardIdentifier / singleQuotedNodeIdentifier / doubleQuotedNodeIdentifier)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rulewildcardIdentifier]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[rulesingleQuotedNodeIdentifier]() {
						goto l139
					}
					goto l137
				l139:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[ruledoubleQuotedNodeIdentifier]() {
						goto l135
					}
				}
			l137:
				add(rulebracketNodeIdentifier, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 16 wildcardIdentifier <- <('*' Action12)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if buffer[position] != rune('*') {
					goto l140
				}
				position++
				if !_rules[ruleAction12]() {
					goto l140
				}
				add(rulewildcardIdentifier, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 17 singleQuotedNodeIdentifier <- <('\'' <(('\\' '\\') / ('\\' '\'') / (!('\\' / '\'') .))*> '\'' Action13)> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('\'') {
					goto l142
				}
				position++
				{
					position144 := position
				l145:
					{
						position146, tokenIndex146 := position, tokenIndex
						{
							position147, tokenIndex147 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l148
							}
							position++
							if buffer[position] != rune('\\') {
								goto l148
							}
							position++
							goto l147
						l148:
							position, tokenIndex = position147, tokenIndex147
							if buffer[position] != rune('\\') {
								goto l149
							}
							position++
							if buffer[position] != rune('\'') {
								goto l149
							}
							position++
							goto l147
						l149:
							position, tokenIndex = position147, tokenIndex147
							{
								position150, tokenIndex150 := position, tokenIndex
								{
									position151, tokenIndex151 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l152
									}
									position++
									goto l151
								l152:
									position, tokenIndex = position151, tokenIndex151
									if buffer[position] != rune('\'') {
										goto l150
									}
									position++
								}
							l151:
								goto l146
							l150:
								position, tokenIndex = position150, tokenIndex150
							}
							if !matchDot() {
								goto l146
							}
						}
					l147:
						goto l145
					l146:
						position, tokenIndex = position146, tokenIndex146
					}
					add(rulePegText, position144)
				}
				if buffer[position] != rune('\'') {
					goto l142
				}
				position++
				if !_rules[ruleAction13]() {
					goto l142
				}
				add(rulesingleQuotedNodeIdentifier, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 18 doubleQuotedNodeIdentifier <- <('"' <(('\\' '\\') / ('\\' '"') / (!('\\' / '"') .))*> '"' Action14)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if buffer[position] != rune('"') {
					goto l153
				}
				position++
				{
					position155 := position
				l156:
					{
						position157, tokenIndex157 := position, tokenIndex
						{
							position158, tokenIndex158 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l159
							}
							position++
							if buffer[position] != rune('\\') {
								goto l159
							}
							position++
							goto l158
						l159:
							position, tokenIndex = position158, tokenIndex158
							if buffer[position] != rune('\\') {
								goto l160
							}
							position++
							if buffer[position] != rune('"') {
								goto l160
							}
							position++
							goto l158
						l160:
							position, tokenIndex = position158, tokenIndex158
							{
								position161, tokenIndex161 := position, tokenIndex
								{
									position162, tokenIndex162 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l163
									}
									position++
									goto l162
								l163:
									position, tokenIndex = position162, tokenIndex162
									if buffer[position] != rune('"') {
										goto l161
									}
									position++
								}
							l162:
								goto l157
							l161:
								position, tokenIndex = position161, tokenIndex161
							}
							if !matchDot() {
								goto l157
							}
						}
					l158:
						goto l156
					l157:
						position, tokenIndex = position157, tokenIndex157
					}
					add(rulePegText, position155)
				}
				if buffer[position] != rune('"') {
					goto l153
				}
				position++
				if !_rules[ruleAction14]() {
					goto l153
				}
				add(ruledoubleQuotedNodeIdentifier, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 19 qualifier <- <(union / script / filter)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[ruleunion]() {
						goto l167
					}
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if !_rules[rulescript]() {
						goto l168
					}
					goto l166
				l168:
					position, tokenIndex = position166, tokenIndex166
					if !_rules[rulefilter]() {
						goto l164
					}
				}
			l166:
				add(rulequalifier, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 20 union <- <(index (sep index Action15)* !sep)> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if !_rules[ruleindex]() {
					goto l169
				}
			l171:
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l172
					}
					if !_rules[ruleindex]() {
						goto l172
					}
					if !_rules[ruleAction15]() {
						goto l172
					}
					goto l171
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
				{
					position173, tokenIndex173 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l173
					}
					goto l169
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				add(ruleunion, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 21 index <- <(((slice Action16) / (<indexNumber> Action17) / ('*' Action18)) Action19)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[ruleslice]() {
						goto l177
					}
					if !_rules[ruleAction16]() {
						goto l177
					}
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					{
						position179 := position
						if !_rules[ruleindexNumber]() {
							goto l178
						}
						add(rulePegText, position179)
					}
					if !_rules[ruleAction17]() {
						goto l178
					}
					goto l176
				l178:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('*') {
						goto l174
					}
					position++
					if !_rules[ruleAction18]() {
						goto l174
					}
				}
			l176:
				if !_rules[ruleAction19]() {
					goto l174
				}
				add(ruleindex, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 22 slice <- <(anyIndex sepSlice anyIndex ((sepSlice anyIndex) / (space Action20)))> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if !_rules[ruleanyIndex]() {
					goto l180
				}
				if !_rules[rulesepSlice]() {
					goto l180
				}
				if !_rules[ruleanyIndex]() {
					goto l180
				}
				{
					position182, tokenIndex182 := position, tokenIndex
					if !_rules[rulesepSlice]() {
						goto l183
					}
					if !_rules[ruleanyIndex]() {
						goto l183
					}
					goto l182
				l183:
					position, tokenIndex = position182, tokenIndex182
					if !_rules[rulespace]() {
						goto l180
					}
					if !_rules[ruleAction20]() {
						goto l180
					}
				}
			l182:
				add(ruleslice, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 23 anyIndex <- <(<indexNumber?> Action21)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186 := position
					{
						position187, tokenIndex187 := position, tokenIndex
						if !_rules[ruleindexNumber]() {
							goto l187
						}
						goto l188
					l187:
						position, tokenIndex = position187, tokenIndex187
					}
				l188:
					add(rulePegText, position186)
				}
				if !_rules[ruleAction21]() {
					goto l184
				}
				add(ruleanyIndex, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 24 indexNumber <- <(('-' / '+')? [0-9]+)> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				{
					position191, tokenIndex191 := position, tokenIndex
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('+') {
							goto l191
						}
						position++
					}
				l193:
					goto l192
				l191:
					position, tokenIndex = position191, tokenIndex191
				}
			l192:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l189
				}
				position++
			l195:
				{
					position196, tokenIndex196 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l196
					}
					position++
					goto l195
				l196:
					position, tokenIndex = position196, tokenIndex196
				}
				add(ruleindexNumber, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 25 sep <- <(space ',' space)> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if !_rules[rulespace]() {
					goto l197
				}
				if buffer[position] != rune(',') {
					goto l197
				}
				position++
				if !_rules[rulespace]() {
					goto l197
				}
				add(rulesep, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 26 sepSlice <- <(space ':' space)> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if !_rules[rulespace]() {
					goto l199
				}
				if buffer[position] != rune(':') {
					goto l199
				}
				position++
				if !_rules[rulespace]() {
					goto l199
				}
				add(rulesepSlice, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 27 script <- <(scriptStart <command> scriptEnd Action22)> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if !_rules[rulescriptStart]() {
					goto l201
				}
				{
					position203 := position
					if !_rules[rulecommand]() {
						goto l201
					}
					add(rulePegText, position203)
				}
				if !_rules[rulescriptEnd]() {
					goto l201
				}
				if !_rules[ruleAction22]() {
					goto l201
				}
				add(rulescript, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 28 command <- <(!')' .)+> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				{
					position208, tokenIndex208 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l208
					}
					position++
					goto l204
				l208:
					position, tokenIndex = position208, tokenIndex208
				}
				if !matchDot() {
					goto l204
				}
			l206:
				{
					position207, tokenIndex207 := position, tokenIndex
					{
						position209, tokenIndex209 := position, tokenIndex
						if buffer[position] != rune(')') {
							goto l209
						}
						position++
						goto l207
					l209:
						position, tokenIndex = position209, tokenIndex209
					}
					if !matchDot() {
						goto l207
					}
					goto l206
				l207:
					position, tokenIndex = position207, tokenIndex207
				}
				add(rulecommand, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 29 filter <- <(filterStart query filterEnd Action23)> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if !_rules[rulefilterStart]() {
					goto l210
				}
				if !_rules[rulequery]() {
					goto l210
				}
				if !_rules[rulefilterEnd]() {
					goto l210
				}
				if !_rules[ruleAction23]() {
					goto l210
				}
				add(rulefilter, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 30 query <- <(andQuery (logicOr andQuery Action24)*)> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if !_rules[ruleandQuery]() {
					goto l212
				}
			l214:
				{
					position215, tokenIndex215 := position, tokenIndex
					if !_rules[rulelogicOr]() {
						goto l215
					}
					if !_rules[ruleandQuery]() {
						goto l215
					}
					if !_rules[ruleAction24]() {
						goto l215
					}
					goto l214
				l215:
					position, tokenIndex = position215, tokenIndex215
				}
				add(rulequery, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 31 andQuery <- <(basicQuery (logicAnd basicQuery Action25)*)> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if !_rules[rulebasicQuery]() {
					goto l216
				}
			l218:
				{
					position219, tokenIndex219 := position, tokenIndex
					if !_rules[rulelogicAnd]() {
						goto l219
					}
					if !_rules[rulebasicQuery]() {
						goto l219
					}
					if !_rules[ruleAction25]() {
						goto l219
					}
					goto l218
				l219:
					position, tokenIndex = position219, tokenIndex219
				}
				add(ruleandQuery, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 32 basicQuery <- <((subQueryStart query subQueryEnd) / (<comparator> Action26) / (<(logicNot? jsonpathFilter)> Action27))> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222, tokenIndex222 := position, tokenIndex
					if !_rules[rulesubQueryStart]() {
						goto l223
					}
					if !_rules[rulequery]() {
						goto l223
					}
					if !_rules[rulesubQueryEnd]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					{
						position225 := position
						if !_rules[rulecomparator]() {
							goto l224
						}
						add(rulePegText, position225)
					}
					if !_rules[ruleAction26]() {
						goto l224
					}
					goto l222
				l224:
					position, tokenIndex = position222, tokenIndex222
					{
						position226 := position
						{
							position227, tokenIndex227 := position, tokenIndex
							if !_rules[rulelogicNot]() {
								goto l227
							}
							goto l228
						l227:
							position, tokenIndex = position227, tokenIndex227
						}
					l228:
						if !_rules[rulejsonpathFilter]() {
							goto l220
						}
						add(rulePegText, position226)
					}
					if !_rules[ruleAction27]() {
						goto l220
					}
				}
			l222:
				add(rulebasicQuery, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 33 logicOr <- <(space ('|' '|') space)> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if !_rules[rulespace]() {
					goto l229
				}
				if buffer[position] != rune('|') {
					goto l229
				}
				position++
				if buffer[position] != rune('|') {
					goto l229
				}
				position++
				if !_rules[rulespace]() {
					goto l229
				}
				add(rulelogicOr, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 34 logicAnd <- <(space ('&' '&') space)> */
		func() bool {
			position231, tokenIndex231 := position, tokenIndex
			{
				position232 := position
				if !_rules[rulespace]() {
					goto l231
				}
				if buffer[position] != rune('&') {
					goto l231
				}
				position++
				if buffer[position] != rune('&') {
					goto l231
				}
				position++
				if !_rules[rulespace]() {
					goto l231
				}
				add(rulelogicAnd, position232)
			}
			return true
		l231:
			position, tokenIndex = position231, tokenIndex231
			return false
		},
		/* 35 logicNot <- <('!' space)> */
		func() bool {
			position233, tokenIndex233 := position, tokenIndex
			{
				position234 := position
				if buffer[position] != rune('!') {
					goto l233
				}
				position++
				if !_rules[rulespace]() {
					goto l233
				}
				add(rulelogicNot, position234)
			}
			return true
		l233:
			position, tokenIndex = position233, tokenIndex233
			return false
		},
		/* 36 comparator <- <((qParam space (('=' '=' space qParam Action28) / ('!' '=' space qParam Action29))) / (qNumericParam space (('<' '=' space qNumericParam Action30) / ('<' space qNumericParam Action31) / ('>' '=' space qNumericParam Action32) / ('>' space qNumericParam Action33))) / (singleJsonpathFilter space ('=' '~') space '/' <regex> '/' Action34))> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				{
					position237, tokenIndex237 := position, tokenIndex
					if !_rules[ruleqParam]() {
						goto l238
					}
					if !_rules[rulespace]() {
						goto l238
					}
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l240
						}
						position++
						if buffer[position] != rune('=') {
							goto l240
						}
						position++
						if !_rules[rulespace]() {
							goto l240
						}
						if !_rules[ruleqParam]() {
							goto l240
						}
						if !_rules[ruleAction28]() {
							goto l240
						}
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('!') {
							goto l238
						}
						position++
						if buffer[position] != rune('=') {
							goto l238
						}
						position++
						if !_rules[rulespace]() {
							goto l238
						}
						if !_rules[ruleqParam]() {
							goto l238
						}
						if !_rules[ruleAction29]() {
							goto l238
						}
					}
				l239:
					goto l237
				l238:
					position, tokenIndex = position237, tokenIndex237
					if !_rules[ruleqNumericParam]() {
						goto l241
					}
					if !_rules[rulespace]() {
						goto l241
					}
					{
						position242, tokenIndex242 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l243
						}
						position++
						if buffer[position] != rune('=') {
							goto l243
						}
						position++
						if !_rules[rulespace]() {
							goto l243
						}
						if !_rules[ruleqNumericParam]() {
							goto l243
						}
						if !_rules[ruleAction30]() {
							goto l243
						}
						goto l242
					l243:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('<') {
							goto l244
						}
						position++
						if !_rules[rulespace]() {
							goto l244
						}
						if !_rules[ruleqNumericParam]() {
							goto l244
						}
						if !_rules[ruleAction31]() {
							goto l244
						}
						goto l242
					l244:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('>') {
							goto l245
						}
						position++
						if buffer[position] != rune('=') {
							goto l245
						}
						position++
						if !_rules[rulespace]() {
							goto l245
						}
						if !_rules[ruleqNumericParam]() {
							goto l245
						}
						if !_rules[ruleAction32]() {
							goto l245
						}
						goto l242
					l245:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('>') {
							goto l241
						}
						position++
						if !_rules[rulespace]() {
							goto l241
						}
						if !_rules[ruleqNumericParam]() {
							goto l241
						}
						if !_rules[ruleAction33]() {
							goto l241
						}
					}
				l242:
					goto l237
				l241:
					position, tokenIndex = position237, tokenIndex237
					if !_rules[rulesingleJsonpathFilter]() {
						goto l235
					}
					if !_rules[rulespace]() {
						goto l235
					}
					if buffer[position] != rune('=') {
						goto l235
					}
					position++
					if buffer[position] != rune('~') {
						goto l235
					}
					position++
					if !_rules[rulespace]() {
						goto l235
					}
					if buffer[position] != rune('/') {
						goto l235
					}
					position++
					{
						position246 := position
						if !_rules[ruleregex]() {
							goto l235
						}
						add(rulePegText, position246)
					}
					if buffer[position] != rune('/') {
						goto l235
					}
					position++
					if !_rules[ruleAction34]() {
						goto l235
					}
				}
			l237:
				add(rulecomparator, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 37 qParam <- <((qLiteral Action35) / singleJsonpathFilter)> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				{
					position249, tokenIndex249 := position, tokenIndex
					if !_rules[ruleqLiteral]() {
						goto l250
					}
					if !_rules[ruleAction35]() {
						goto l250
					}
					goto l249
				l250:
					position, tokenIndex = position249, tokenIndex249
					if !_rules[rulesingleJsonpathFilter]() {
						goto l247
					}
				}
			l249:
				add(ruleqParam, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 38 qNumericParam <- <((lNumber Action36) / singleJsonpathFilter)> */
		func() bool {
			position251, tokenIndex251 := position, tokenIndex
			{
				position252 := position
				{
					position253, tokenIndex253 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l254
					}
					if !_rules[ruleAction36]() {
						goto l254
					}
					goto l253
				l254:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[rulesingleJsonpathFilter]() {
						goto l251
					}
				}
			l253:
				add(ruleqNumericParam, position252)
			}
			return true
		l251:
			position, tokenIndex = position251, tokenIndex251
			return false
		},
		/* 39 qLiteral <- <(lNumber / lBool / lString / lNull)> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				{
					position257, tokenIndex257 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l258
					}
					goto l257
				l258:
					position, tokenIndex = position257, tokenIndex257
					if !_rules[rulelBool]() {
						goto l259
					}
					goto l257
				l259:
					position, tokenIndex = position257, tokenIndex257
					if !_rules[rulelString]() {
						goto l260
					}
					goto l257
				l260:
					position, tokenIndex = position257, tokenIndex257
					if !_rules[rulelNull]() {
						goto l255
					}
				}
			l257:
				add(ruleqLiteral, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 40 singleJsonpathFilter <- <(<jsonpathFilter> Action37)> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263 := position
					if !_rules[rulejsonpathFilter]() {
						goto l261
					}
					add(rulePegText, position263)
				}
				if !_rules[ruleAction37]() {
					goto l261
				}
				add(rulesingleJsonpathFilter, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 41 jsonpathFilter <- <(Action38 jsonpathParameter Action39)> */
		func() bool {
			position264, tokenIndex264 := position, tokenIndex
			{
				position265 := position
				if !_rules[ruleAction38]() {
					goto l264
				}
				if !_rules[rulejsonpathParameter]() {
					goto l264
				}
				if !_rules[ruleAction39]() {
					goto l264
				}
				add(rulejsonpathFilter, position265)
			}
			return true
		l264:
			position, tokenIndex = position264, tokenIndex264
			return false
		},
		/* 42 lNumber <- <(<(('-' / '+')? [0-9] ('-' / '+' / '.' / [0-9] / [a-z] / [A-Z])*)> Action40)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				{
					position268 := position
					{
						position269, tokenIndex269 := position, tokenIndex
						{
							position271, tokenIndex271 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l272
							}
							position++
							goto l271
						l272:
							position, tokenIndex = position271, tokenIndex271
							if buffer[position] != rune('+') {
								goto l269
							}
							position++
						}
					l271:
						goto l270
					l269:
						position, tokenIndex = position269, tokenIndex269
					}
				l270:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l266
					}
					position++
				l273:
					{
						position274, tokenIndex274 := position, tokenIndex
						{
							position275, tokenIndex275 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l276
							}
							position++
							goto l275
						l276:
							position, tokenIndex = position275, tokenIndex275
							if buffer[position] != rune('+') {
								goto l277
							}
							position++
							goto l275
						l277:
							position, tokenIndex = position275, tokenIndex275
							if buffer[position] != rune('.') {
								goto l278
							}
							position++
							goto l275
						l278:
							position, tokenIndex = position275, tokenIndex275
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l279
							}
							position++
							goto l275
						l279:
							position, tokenIndex = position275, tokenIndex275
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l280
							}
							position++
							goto l275
						l280:
							position, tokenIndex = position275, tokenIndex275
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l274
							}
							position++
						}
					l275:
						goto l273
					l274:
						position, tokenIndex = position274, tokenIndex274
					}
					add(rulePegText, position268)
				}
				if !_rules[ruleAction40]() {
					goto l266
				}
				add(rulelNumber, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 43 lBool <- <(((('t' 'r' 'u' 'e') / ('T' 'r' 'u' 'e') / ('T' 'R' 'U' 'E')) Action41) / ((('f' 'a' 'l' 's' 'e') / ('F' 'a' 'l' 's' 'e') / ('F' 'A' 'L' 'S' 'E')) Action42))> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				{
					position283, tokenIndex283 := position, tokenIndex
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l286
						}
						position++
						if buffer[position] != rune('r') {
							goto l286
						}
						position++
						if buffer[position] != rune('u') {
							goto l286
						}
						position++
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('T') {
							goto l287
						}
						position++
						if buffer[position] != rune('r') {
							goto l287
						}
						position++
						if buffer[position] != rune('u') {
							goto l287
						}
						position++
						if buffer[position] != rune('e') {
							goto l287
						}
						position++
						goto l285
					l287:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('T') {
							goto l284
						}
						position++
						if buffer[position] != rune('R') {
							goto l284
						}
						position++
						if buffer[position] != rune('U') {
							goto l284
						}
						position++
						if buffer[position] != rune('E') {
							goto l284
						}
						position++
					}
				l285:
					if !_rules[ruleAction41]() {
						goto l284
					}
					goto l283
				l284:
					position, tokenIndex = position283, tokenIndex283
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l289
						}
						position++
						if buffer[position] != rune('a') {
							goto l289
						}
						position++
						if buffer[position] != rune('l') {
							goto l289
						}
						position++
						if buffer[position] != rune('s') {
							goto l289
						}
						position++
						if buffer[position] != rune('e') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('F') {
							goto l290
						}
						position++
						if buffer[position] != rune('a') {
							goto l290
						}
						position++
						if buffer[position] != rune('l') {
							goto l290
						}
						position++
						if buffer[position] != rune('s') {
							goto l290
						}
						position++
						if buffer[position] != rune('e') {
							goto l290
						}
						position++
						goto l288
					l290:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('F') {
							goto l281
						}
						position++
						if buffer[position] != rune('A') {
							goto l281
						}
						position++
						if buffer[position] != rune('L') {
							goto l281
						}
						position++
						if buffer[position] != rune('S') {
							goto l281
						}
						position++
						if buffer[position] != rune('E') {
							goto l281
						}
						position++
					}
				l288:
					if !_rules[ruleAction42]() {
						goto l281
					}
				}
			l283:
				add(rulelBool, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 44 lString <- <(('\'' <(('\\' '\\') / ('\\' '\'') / (!'\'' .))*> '\'' Action43) / ('"' <(('\\' '\\') / ('\\' '"') / (!'"' .))*> '"' Action44))> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l294
					}
					position++
					{
						position295 := position
					l296:
						{
							position297, tokenIndex297 := position, tokenIndex
							{
								position298, tokenIndex298 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l299
								}
								position++
								if buffer[position] != rune('\\') {
									goto l299
								}
								position++
								goto l298
							l299:
								position, tokenIndex = position298, tokenIndex298
								if buffer[position] != rune('\\') {
									goto l300
								}
								position++
								if buffer[position] != rune('\'') {
									goto l300
								}
								position++
								goto l298
							l300:
								position, tokenIndex = position298, tokenIndex298
								{
									position301, tokenIndex301 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l301
									}
									position++
									goto l297
								l301:
									position, tokenIndex = position301, tokenIndex301
								}
								if !matchDot() {
									goto l297
								}
							}
						l298:
							goto l296
						l297:
							position, tokenIndex = position297, tokenIndex297
						}
						add(rulePegText, position295)
					}
					if buffer[position] != rune('\'') {
						goto l294
					}
					position++
					if !_rules[ruleAction43]() {
						goto l294
					}
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					if buffer[position] != rune('"') {
						goto l291
					}
					position++
					{
						position302 := position
					l303:
						{
							position304, tokenIndex304 := position, tokenIndex
							{
								position305, tokenIndex305 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l306
								}
								position++
								if buffer[position] != rune('\\') {
									goto l306
								}
								position++
								goto l305
							l306:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\\') {
									goto l307
								}
								position++
								if buffer[position] != rune('"') {
									goto l307
								}
								position++
								goto l305
							l307:
								position, tokenIndex = position305, tokenIndex305
								{
									position308, tokenIndex308 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l308
									}
									position++
									goto l304
								l308:
									position, tokenIndex = position308, tokenIndex308
								}
								if !matchDot() {
									goto l304
								}
							}
						l305:
							goto l303
						l304:
							position, tokenIndex = position304, tokenIndex304
						}
						add(rulePegText, position302)
					}
					if buffer[position] != rune('"') {
						goto l291
					}
					position++
					if !_rules[ruleAction44]() {
						goto l291
					}
				}
			l293:
				add(rulelString, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 45 lNull <- <((('n' 'u' 'l' 'l') / ('N' 'u' 'l' 'l') / ('N' 'U' 'L' 'L')) Action45)> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				{
					position311, tokenIndex311 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l312
					}
					position++
					if buffer[position] != rune('u') {
						goto l312
					}
					position++
					if buffer[position] != rune('l') {
						goto l312
					}
					position++
					if buffer[position] != rune('l') {
						goto l312
					}
					position++
					goto l311
				l312:
					position, tokenIndex = position311, tokenIndex311
					if buffer[position] != rune('N') {
						goto l313
					}
					position++
					if buffer[position] != rune('u') {
						goto l313
					}
					position++
					if buffer[position] != rune('l') {
						goto l313
					}
					position++
					if buffer[position] != rune('l') {
						goto l313
					}
					position++
					goto l311
				l313:
					position, tokenIndex = position311, tokenIndex311
					if buffer[position] != rune('N') {
						goto l309
					}
					position++
					if buffer[position] != rune('U') {
						goto l309
					}
					position++
					if buffer[position] != rune('L') {
						goto l309
					}
					position++
					if buffer[position] != rune('L') {
						goto l309
					}
					position++
				}
			l311:
				if !_rules[ruleAction45]() {
					goto l309
				}
				add(rulelNull, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 46 regex <- <(('\\' '\\') / ('\\' '/') / (!'/' .))*> */
		func() bool {
			{
				position315 := position
			l316:
				{
					position317, tokenIndex317 := position, tokenIndex
					{
						position318, tokenIndex318 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l319
						}
						position++
						if buffer[position] != rune('\\') {
							goto l319
						}
						position++
						goto l318
					l319:
						position, tokenIndex = position318, tokenIndex318
						if buffer[position] != rune('\\') {
							goto l320
						}
						position++
						if buffer[position] != rune('/') {
							goto l320
						}
						position++
						goto l318
					l320:
						position, tokenIndex = position318, tokenIndex318
						{
							position321, tokenIndex321 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l321
							}
							position++
							goto l317
						l321:
							position, tokenIndex = position321, tokenIndex321
						}
						if !matchDot() {
							goto l317
						}
					}
				l318:
					goto l316
				l317:
					position, tokenIndex = position317, tokenIndex317
				}
				add(ruleregex, position315)
			}
			return true
		},
		/* 47 squareBracketStart <- <('[' space)> */
		func() bool {
			position322, tokenIndex322 := position, tokenIndex
			{
				position323 := position
				if buffer[position] != rune('[') {
					goto l322
				}
				position++
				if !_rules[rulespace]() {
					goto l322
				}
				add(rulesquareBracketStart, position323)
			}
			return true
		l322:
			position, tokenIndex = position322, tokenIndex322
			return false
		},
		/* 48 squareBracketEnd <- <(space ']')> */
		func() bool {
			position324, tokenIndex324 := position, tokenIndex
			{
				position325 := position
				if !_rules[rulespace]() {
					goto l324
				}
				if buffer[position] != rune(']') {
					goto l324
				}
				position++
				add(rulesquareBracketEnd, position325)
			}
			return true
		l324:
			position, tokenIndex = position324, tokenIndex324
			return false
		},
		/* 49 scriptStart <- <('(' space)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if buffer[position] != rune('(') {
					goto l326
				}
				position++
				if !_rules[rulespace]() {
					goto l326
				}
				add(rulescriptStart, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 50 scriptEnd <- <(space ')')> */
		func() bool {
			position328, tokenIndex328 := position, tokenIndex
			{
				position329 := position
				if !_rules[rulespace]() {
					goto l328
				}
				if buffer[position] != rune(')') {
					goto l328
				}
				position++
				add(rulescriptEnd, position329)
			}
			return true
		l328:
			position, tokenIndex = position328, tokenIndex328
			return false
		},
		/* 51 filterStart <- <('?' '(' space)> */
		func() bool {
			position330, tokenIndex330 := position, tokenIndex
			{
				position331 := position
				if buffer[position] != rune('?') {
					goto l330
				}
				position++
				if buffer[position] != rune('(') {
					goto l330
				}
				position++
				if !_rules[rulespace]() {
					goto l330
				}
				add(rulefilterStart, position331)
			}
			return true
		l330:
			position, tokenIndex = position330, tokenIndex330
			return false
		},
		/* 52 filterEnd <- <(space ')')> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				if !_rules[rulespace]() {
					goto l332
				}
				if buffer[position] != rune(')') {
					goto l332
				}
				position++
				add(rulefilterEnd, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
		/* 53 subQueryStart <- <('(' space)> */
		func() bool {
			position334, tokenIndex334 := position, tokenIndex
			{
				position335 := position
				if buffer[position] != rune('(') {
					goto l334
				}
				position++
				if !_rules[rulespace]() {
					goto l334
				}
				add(rulesubQueryStart, position335)
			}
			return true
		l334:
			position, tokenIndex = position334, tokenIndex334
			return false
		},
		/* 54 subQueryEnd <- <(space ')')> */
		func() bool {
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				if !_rules[rulespace]() {
					goto l336
				}
				if buffer[position] != rune(')') {
					goto l336
				}
				position++
				add(rulesubQueryEnd, position337)
			}
			return true
		l336:
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 55 space <- <(' ' / '\t')*> */
		func() bool {
			{
				position339 := position
			l340:
				{
					position341, tokenIndex341 := position, tokenIndex
					{
						position342, tokenIndex342 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l343
						}
						position++
						goto l342
					l343:
						position, tokenIndex = position342, tokenIndex342
						if buffer[position] != rune('\t') {
							goto l341
						}
						position++
					}
				l342:
					goto l340
				l341:
					position, tokenIndex = position341, tokenIndex341
				}
				add(rulespace, position339)
			}
			return true
		},
		/* 57 Action0 <- <{
		    p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 59 Action1 <- <{
		    p.syntaxErr(begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 60 Action2 <- <{
		    p.setNodeChain()
		    p.updateRootValueGroup()
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 61 Action3 <- <{
		    p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 62 Action4 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 63 Action5 <- <{
		    p.pushFunction(text, p.pop().(string))
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 64 Action6 <- <{
		    p.push(text)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 65 Action7 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 66 Action8 <- <{
		    p.pushRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 67 Action9 <- <{
		    p.pushCurrentRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 68 Action10 <- <{
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 69 Action11 <- <{
		    identifier2 := p.pop().(syntaxNode)
		    identifier1 := p.pop().(syntaxNode)
		    p.pushChildMultiIdentifier(identifier1, identifier2)
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 70 Action12 <- <{
		    p.pushChildWildcardIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 71 Action13 <- <{
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 72 Action14 <- <{ // '
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 73 Action15 <- <{
		    childIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion.merge(childIndexUnion)
		    parentIndexUnion.setValueGroup()
		    p.push(parentIndexUnion)
		}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 74 Action16 <- <{
		    step  := p.pop().(*syntaxIndexSubscript)
		    end   := p.pop().(*syntaxIndexSubscript)
		    start := p.pop().(*syntaxIndexSubscript)

		    if step.isOmitted || step.number == 0 {
		        step.number = 1
		    }

		    if step.number > 0 {
		        p.pushSlicePositiveStepSubscript(start, end, step)
		    } else {
		        p.pushSliceNegativeStepSubscript(start, end, step)
		    }
		}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 75 Action17 <- <{
		    p.pushIndexSubscript(text)
		}> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 76 Action18 <- <{
		    p.pushWildcardSubscript()
		}> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 77 Action19 <- <{
		    p.pushUnionQualifier(p.pop().(syntaxSubscript))
		}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 78 Action20 <- <{
		    p.pushIndexSubscript(`1`)
		}> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 79 Action21 <- <{
		    if len(text) > 0 {
		        p.pushIndexSubscript(text)
		    } else {
		        p.pushOmittedIndexSubscript(`0`)
		    }
		}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 80 Action22 <- <{
		    p.pushScriptQualifier(text)
		}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 81 Action23 <- <{
		    p.pushFilterQualifier(p.pop().(syntaxQuery))
		}> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 82 Action24 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalOr(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 83 Action25 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalAnd(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 84 Action26 <- <{
		        if !p.hasErr() {
		            query := p.pop()
		            p.push(query)

					if logicalNot, ok := query.(*syntaxLogicalNot); ok {
						query = (*logicalNot).query
					}
		            if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
		                _, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
		                _, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
		                if leftIsCurrentRoot && rigthIsCurrentRoot {
		                    p.syntaxErr(begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer)
		                }
					}
		        }
		    }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 85 Action27 <- <{
		    _ = p.pop()
		    jsonpathFilter := p.pop().(syntaxQuery)
		    if text[0:1] == `!` {
		        p.pushLogicalNot(jsonpathFilter)
		    } else {
		        p.push(jsonpathFilter)
		    }
		}> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 86 Action28 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareEQ(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 87 Action29 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareNE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 88 Action30 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 89 Action31 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 90 Action32 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 91 Action33 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 92 Action34 <- <{
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareRegex(leftParam, text)
		}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 93 Action35 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 94 Action36 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 95 Action37 <- <{
		    isLiteral := p.pop().(bool)
		    param := p.pop().(syntaxQueryJSONPathParameter)
		    if !p.hasErr() && param.isValueGroupParameter() {
		        p.syntaxErr(begin, msgErrorInvalidSyntaxFilterValueGroup, buffer)
		    }
		    p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)
		}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 96 Action38 <- <{
		    p.saveParams()
		}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 97 Action39 <- <{
		    p.loadParams()

		    node := p.pop().(syntaxNode)
		    checkNode := node
		    if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
		        checkNode = aggregateFunction.param
		    }

		    switch checkNode.(type) {
		    case *syntaxRootIdentifier:
		        p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
		        p.push(true)
		    case *syntaxCurrentRootIdentifier:
		        p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
		        p.push(false)
		    default:
		        p.push(&syntaxQueryParamRoot{})
		        p.push(true)
		    }
		}> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 98 Action40 <- <{
		    p.push(p.toFloat(text))
		}> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 99 Action41 <- <{
		    p.push(true)
		}> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 100 Action42 <- <{
		    p.push(false)
		}> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 101 Action43 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 102 Action44 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 103 Action45 <- <{
		    p.push(nil)
		}> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
