package jsonpath

// Code generated by C:\Users\prome\go\bin\peg.exe jsonpath.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleexpression
	ruleEND
	rulejsonpath
	rulejsonpathParameter
	rulecontinuedJsonpath
	rulerootNode
	ruleparameterRootNode
	rulechildNode
	rulefunction
	rulefunctionName
	rulebracketNode
	rulerootIdentifier
	rulecurrentRootIdentifier
	ruledotChildIdentifier
	rulebracketChildIdentifier
	rulebracketNodeIdentifier
	rulewildcardIdentifier
	rulesingleQuotedNodeIdentifier
	ruledoubleQuotedNodeIdentifier
	rulequalifier
	ruleunion
	ruleindex
	ruleslice
	ruleanyIndex
	ruleindexNumber
	rulesep
	rulesepSlice
	rulescript
	rulecommand
	rulefilter
	rulequery
	ruleandQuery
	rulebasicQuery
	rulelogicOr
	rulelogicAnd
	rulelogicNot
	rulecomparator
	ruleqParam
	ruleqNumericParam
	ruleqLiteral
	rulesingleJsonpathFilter
	rulejsonpathFilter
	rulelNumber
	rulelBool
	rulelString
	rulelNull
	ruleregex
	rulesquareBracketStart
	rulesquareBracketEnd
	rulescriptStart
	rulescriptEnd
	rulefilterStart
	rulefilterEnd
	rulesubQueryStart
	rulesubQueryEnd
	rulespace
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
)

var rul3s = [...]string{
	"Unknown",
	"expression",
	"END",
	"jsonpath",
	"jsonpathParameter",
	"continuedJsonpath",
	"rootNode",
	"parameterRootNode",
	"childNode",
	"function",
	"functionName",
	"bracketNode",
	"rootIdentifier",
	"currentRootIdentifier",
	"dotChildIdentifier",
	"bracketChildIdentifier",
	"bracketNodeIdentifier",
	"wildcardIdentifier",
	"singleQuotedNodeIdentifier",
	"doubleQuotedNodeIdentifier",
	"qualifier",
	"union",
	"index",
	"slice",
	"anyIndex",
	"indexNumber",
	"sep",
	"sepSlice",
	"script",
	"command",
	"filter",
	"query",
	"andQuery",
	"basicQuery",
	"logicOr",
	"logicAnd",
	"logicNot",
	"comparator",
	"qParam",
	"qNumericParam",
	"qLiteral",
	"singleJsonpathFilter",
	"jsonpathFilter",
	"lNumber",
	"lBool",
	"lString",
	"lNull",
	"regex",
	"squareBracketStart",
	"squareBracketEnd",
	"scriptStart",
	"scriptEnd",
	"filterStart",
	"filterEnd",
	"subQueryStart",
	"subQueryEnd",
	"space",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type pegJSONPathParser struct {
	jsonPathParser

	Buffer string
	buffer []rune
	rules  [104]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *pegJSONPathParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *pegJSONPathParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *pegJSONPathParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *pegJSONPathParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *pegJSONPathParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *pegJSONPathParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *pegJSONPathParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))
			p.setConnectedText(p.root)

		case ruleAction1:

			panic(p.syntaxErr(
				begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer))

		case ruleAction2:

			p.setNodeChain()
			p.updateRootValueGroup()

		case ruleAction3:

			p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))

		case ruleAction4:

			p.setLastNodeText(text)

		case ruleAction5:

			p.pushFunction(text, p.pop().(string))

		case ruleAction6:

			p.push(text)

		case ruleAction7:

			p.setLastNodeText(text)

		case ruleAction8:

			p.pushRootIdentifier()

		case ruleAction9:

			p.pushCurrentRootIdentifier()

		case ruleAction10:

			p.pushChildSingleIdentifier(p.unescape(text))

		case ruleAction11:

			identifier2 := p.pop().(syntaxNode)
			identifier1 := p.pop().(syntaxNode)
			p.pushChildMultiIdentifier(identifier1, identifier2)

		case ruleAction12:

			p.pushChildWildcardIdentifier()

		case ruleAction13:

			p.pushChildSingleIdentifier(p.unescapeSingleQuotedString(text))

		case ruleAction14:
			// '
			p.pushChildSingleIdentifier(p.unescapeDoubleQuotedString(text))

		case ruleAction15:

			childIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion := p.pop().(*syntaxUnionQualifier)
			parentIndexUnion.merge(childIndexUnion)
			parentIndexUnion.setValueGroup()
			p.push(parentIndexUnion)

		case ruleAction16:

			step := p.pop().(*syntaxIndexSubscript)
			end := p.pop().(*syntaxIndexSubscript)
			start := p.pop().(*syntaxIndexSubscript)

			if step.isOmitted || step.number == 0 {
				step.number = 1
			}

			if step.number > 0 {
				p.pushSlicePositiveStepSubscript(start, end, step)
			} else {
				p.pushSliceNegativeStepSubscript(start, end, step)
			}

		case ruleAction17:

			p.pushIndexSubscript(text)

		case ruleAction18:

			p.pushWildcardSubscript()

		case ruleAction19:

			p.pushUnionQualifier(p.pop().(syntaxSubscript))

		case ruleAction20:

			p.pushIndexSubscript(`1`)

		case ruleAction21:

			if len(text) > 0 {
				p.pushIndexSubscript(text)
			} else {
				p.pushOmittedIndexSubscript(`0`)
			}

		case ruleAction22:

			p.pushScriptQualifier(text)

		case ruleAction23:

			p.pushFilterQualifier(p.pop().(syntaxQuery))

		case ruleAction24:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalOr(leftQuery, rightQuery)

		case ruleAction25:

			rightQuery := p.pop().(syntaxQuery)
			leftQuery := p.pop().(syntaxQuery)
			p.pushLogicalAnd(leftQuery, rightQuery)

		case ruleAction26:

			query := p.pop()
			p.push(query)

			if logicalNot, ok := query.(*syntaxLogicalNot); ok {
				query = (*logicalNot).query
			}
			if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
				_, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
				_, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
				if leftIsCurrentRoot && rigthIsCurrentRoot {
					panic(p.syntaxErr(
						begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer))
				}
			}

		case ruleAction27:

			_ = p.pop()
			jsonpathFilter := p.pop().(syntaxQuery)
			if text[0:1] == `!` {
				p.pushLogicalNot(jsonpathFilter)
			} else {
				p.push(jsonpathFilter)
			}

		case ruleAction28:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareEQ(leftParam, rightParam)

		case ruleAction29:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareNE(leftParam, rightParam)

		case ruleAction30:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGE(leftParam, rightParam)

		case ruleAction31:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareGT(leftParam, rightParam)

		case ruleAction32:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLE(leftParam, rightParam)

		case ruleAction33:

			rightParam := p.pop().(*syntaxBasicCompareParameter)
			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareLT(leftParam, rightParam)

		case ruleAction34:

			leftParam := p.pop().(*syntaxBasicCompareParameter)
			p.pushCompareRegex(leftParam, text)

		case ruleAction35:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction36:

			p.pushCompareParameterLiteral(p.pop())

		case ruleAction37:

			isLiteral := p.pop().(bool)
			param := p.pop().(syntaxQueryJSONPathParameter)
			if param.isValueGroupParameter() {
				panic(p.syntaxErr(
					begin, msgErrorInvalidSyntaxFilterValueGroup, buffer))
			}
			p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)

		case ruleAction38:

			p.saveParams()

		case ruleAction39:

			p.loadParams()

			node := p.pop().(syntaxNode)
			checkNode := node
			if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
				checkNode = aggregateFunction.param
			}

			switch checkNode.(type) {
			case *syntaxRootIdentifier:
				p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
				p.push(true)
			case *syntaxCurrentRootIdentifier:
				p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
				p.push(false)
			default:
				p.push(&syntaxQueryParamRoot{})
				p.push(true)
			}

		case ruleAction40:

			p.push(p.toFloat(text))

		case ruleAction41:

			p.push(true)

		case ruleAction42:

			p.push(false)

		case ruleAction43:

			p.push(p.unescape(text))

		case ruleAction44:
			// '
			p.push(p.unescape(text))

		case ruleAction45:

			p.push(nil)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*pegJSONPathParser) error {
	return func(p *pegJSONPathParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *pegJSONPathParser) Init(options ...func(*pegJSONPathParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 expression <- <((jsonpath END Action0) / (jsonpath? <.*> END Action1))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulejsonpath]() {
						goto l3
					}
					if !_rules[ruleEND]() {
						goto l3
					}
					if !_rules[ruleAction0]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulejsonpath]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					{
						position6 := position
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(rulePegText, position6)
					}
					if !_rules[ruleEND]() {
						goto l0
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
				}
			l2:
				add(ruleexpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 END <- <!.> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !matchDot() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleEND, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 2 jsonpath <- <(space rootNode continuedJsonpath)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[rulespace]() {
					goto l12
				}
				if !_rules[rulerootNode]() {
					goto l12
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l12
				}
				add(rulejsonpath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 jsonpathParameter <- <(space parameterRootNode continuedJsonpath)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[rulespace]() {
					goto l14
				}
				if !_rules[ruleparameterRootNode]() {
					goto l14
				}
				if !_rules[rulecontinuedJsonpath]() {
					goto l14
				}
				add(rulejsonpathParameter, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 continuedJsonpath <- <(childNode* function* space Action2)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[rulechildNode]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
			l20:
				{
					position21, tokenIndex21 := position, tokenIndex
					if !_rules[rulefunction]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position21, tokenIndex21
				}
				if !_rules[rulespace]() {
					goto l16
				}
				if !_rules[ruleAction2]() {
					goto l16
				}
				add(rulecontinuedJsonpath, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 rootNode <- <(rootIdentifier / bracketNode / dotChildIdentifier)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[rulebracketNode]() {
						goto l26
					}
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruledotChildIdentifier]() {
						goto l22
					}
				}
			l24:
				add(rulerootNode, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 parameterRootNode <- <(rootIdentifier / currentRootIdentifier)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rulerootIdentifier]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position29, tokenIndex29
					if !_rules[rulecurrentRootIdentifier]() {
						goto l27
					}
				}
			l29:
				add(ruleparameterRootNode, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 7 childNode <- <(('.' '.' (bracketNode / dotChildIdentifier) Action3) / (<('.' dotChildIdentifier)> Action4) / bracketNode)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33, tokenIndex33 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					if buffer[position] != rune('.') {
						goto l34
					}
					position++
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulebracketNode]() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if !_rules[ruledotChildIdentifier]() {
							goto l34
						}
					}
				l35:
					if !_rules[ruleAction3]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					{
						position38 := position
						if buffer[position] != rune('.') {
							goto l37
						}
						position++
						if !_rules[ruledotChildIdentifier]() {
							goto l37
						}
						add(rulePegText, position38)
					}
					if !_rules[ruleAction4]() {
						goto l37
					}
					goto l33
				l37:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[rulebracketNode]() {
						goto l31
					}
				}
			l33:
				add(rulechildNode, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 8 function <- <(<('.' functionName ('(' ')'))> Action5)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					if buffer[position] != rune('.') {
						goto l39
					}
					position++
					if !_rules[rulefunctionName]() {
						goto l39
					}
					if buffer[position] != rune('(') {
						goto l39
					}
					position++
					if buffer[position] != rune(')') {
						goto l39
					}
					position++
					add(rulePegText, position41)
				}
				if !_rules[ruleAction5]() {
					goto l39
				}
				add(rulefunction, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 functionName <- <(<('-' / '_' / [a-z] / [A-Z])+> Action6)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44 := position
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('_') {
							goto l49
						}
						position++
						goto l47
					l49:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l50
						}
						position++
						goto l47
					l50:
						position, tokenIndex = position47, tokenIndex47
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l42
						}
						position++
					}
				l47:
				l45:
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('_') {
								goto l53
							}
							position++
							goto l51
						l53:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l54
							}
							position++
							goto l51
						l54:
							position, tokenIndex = position51, tokenIndex51
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l46
							}
							position++
						}
					l51:
						goto l45
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					add(rulePegText, position44)
				}
				if !_rules[ruleAction6]() {
					goto l42
				}
				add(rulefunctionName, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 bracketNode <- <(<(squareBracketStart (bracketChildIdentifier / qualifier) squareBracketEnd)> Action7)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57 := position
					if !_rules[rulesquareBracketStart]() {
						goto l55
					}
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[rulebracketChildIdentifier]() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if !_rules[rulequalifier]() {
							goto l55
						}
					}
				l58:
					if !_rules[rulesquareBracketEnd]() {
						goto l55
					}
					add(rulePegText, position57)
				}
				if !_rules[ruleAction7]() {
					goto l55
				}
				add(rulebracketNode, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 rootIdentifier <- <('$' Action8)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('$') {
					goto l60
				}
				position++
				if !_rules[ruleAction8]() {
					goto l60
				}
				add(rulerootIdentifier, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 12 currentRootIdentifier <- <('@' Action9)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('@') {
					goto l62
				}
				position++
				if !_rules[ruleAction9]() {
					goto l62
				}
				add(rulecurrentRootIdentifier, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 13 dotChildIdentifier <- <(wildcardIdentifier / (<(('\\' '\\') / ('\\' ('.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ')) / (!('\\' / '.' / '[' / '(' / ')' / '=' / '!' / '>' / '<' / '\t' / '\r' / '\n' / ' ') .))+> !('(' ')') Action10))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[rulewildcardIdentifier]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					{
						position68 := position
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							if buffer[position] != rune('\\') {
								goto l72
							}
							position++
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if buffer[position] != rune('\\') {
								goto l73
							}
							position++
							{
								position74, tokenIndex74 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l75
								}
								position++
								goto l74
							l75:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('[') {
									goto l76
								}
								position++
								goto l74
							l76:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('(') {
									goto l77
								}
								position++
								goto l74
							l77:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(')') {
									goto l78
								}
								position++
								goto l74
							l78:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('=') {
									goto l79
								}
								position++
								goto l74
							l79:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('!') {
									goto l80
								}
								position++
								goto l74
							l80:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('>') {
									goto l81
								}
								position++
								goto l74
							l81:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('<') {
									goto l82
								}
								position++
								goto l74
							l82:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\t') {
									goto l83
								}
								position++
								goto l74
							l83:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\r') {
									goto l84
								}
								position++
								goto l74
							l84:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune('\n') {
									goto l85
								}
								position++
								goto l74
							l85:
								position, tokenIndex = position74, tokenIndex74
								if buffer[position] != rune(' ') {
									goto l73
								}
								position++
							}
						l74:
							goto l71
						l73:
							position, tokenIndex = position71, tokenIndex71
							{
								position86, tokenIndex86 := position, tokenIndex
								{
									position87, tokenIndex87 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l88
									}
									position++
									goto l87
								l88:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('.') {
										goto l89
									}
									position++
									goto l87
								l89:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('[') {
										goto l90
									}
									position++
									goto l87
								l90:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('(') {
										goto l91
									}
									position++
									goto l87
								l91:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(')') {
										goto l92
									}
									position++
									goto l87
								l92:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('=') {
										goto l93
									}
									position++
									goto l87
								l93:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('!') {
										goto l94
									}
									position++
									goto l87
								l94:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('>') {
										goto l95
									}
									position++
									goto l87
								l95:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('<') {
										goto l96
									}
									position++
									goto l87
								l96:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\t') {
										goto l97
									}
									position++
									goto l87
								l97:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\r') {
										goto l98
									}
									position++
									goto l87
								l98:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune('\n') {
										goto l99
									}
									position++
									goto l87
								l99:
									position, tokenIndex = position87, tokenIndex87
									if buffer[position] != rune(' ') {
										goto l86
									}
									position++
								}
							l87:
								goto l64
							l86:
								position, tokenIndex = position86, tokenIndex86
							}
							if !matchDot() {
								goto l64
							}
						}
					l71:
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							{
								position100, tokenIndex100 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								if buffer[position] != rune('\\') {
									goto l101
								}
								position++
								goto l100
							l101:
								position, tokenIndex = position100, tokenIndex100
								if buffer[position] != rune('\\') {
									goto l102
								}
								position++
								{
									position103, tokenIndex103 := position, tokenIndex
									if buffer[position] != rune('.') {
										goto l104
									}
									position++
									goto l103
								l104:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('[') {
										goto l105
									}
									position++
									goto l103
								l105:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('(') {
										goto l106
									}
									position++
									goto l103
								l106:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(')') {
										goto l107
									}
									position++
									goto l103
								l107:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('=') {
										goto l108
									}
									position++
									goto l103
								l108:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('!') {
										goto l109
									}
									position++
									goto l103
								l109:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('>') {
										goto l110
									}
									position++
									goto l103
								l110:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('<') {
										goto l111
									}
									position++
									goto l103
								l111:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\t') {
										goto l112
									}
									position++
									goto l103
								l112:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\r') {
										goto l113
									}
									position++
									goto l103
								l113:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune('\n') {
										goto l114
									}
									position++
									goto l103
								l114:
									position, tokenIndex = position103, tokenIndex103
									if buffer[position] != rune(' ') {
										goto l102
									}
									position++
								}
							l103:
								goto l100
							l102:
								position, tokenIndex = position100, tokenIndex100
								{
									position115, tokenIndex115 := position, tokenIndex
									{
										position116, tokenIndex116 := position, tokenIndex
										if buffer[position] != rune('\\') {
											goto l117
										}
										position++
										goto l116
									l117:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('.') {
											goto l118
										}
										position++
										goto l116
									l118:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('[') {
											goto l119
										}
										position++
										goto l116
									l119:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('(') {
											goto l120
										}
										position++
										goto l116
									l120:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(')') {
											goto l121
										}
										position++
										goto l116
									l121:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('=') {
											goto l122
										}
										position++
										goto l116
									l122:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('!') {
											goto l123
										}
										position++
										goto l116
									l123:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('>') {
											goto l124
										}
										position++
										goto l116
									l124:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('<') {
											goto l125
										}
										position++
										goto l116
									l125:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\t') {
											goto l126
										}
										position++
										goto l116
									l126:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\r') {
											goto l127
										}
										position++
										goto l116
									l127:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune('\n') {
											goto l128
										}
										position++
										goto l116
									l128:
										position, tokenIndex = position116, tokenIndex116
										if buffer[position] != rune(' ') {
											goto l115
										}
										position++
									}
								l116:
									goto l70
								l115:
									position, tokenIndex = position115, tokenIndex115
								}
								if !matchDot() {
									goto l70
								}
							}
						l100:
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						add(rulePegText, position68)
					}
					{
						position129, tokenIndex129 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l129
						}
						position++
						if buffer[position] != rune(')') {
							goto l129
						}
						position++
						goto l64
					l129:
						position, tokenIndex = position129, tokenIndex129
					}
					if !_rules[ruleAction10]() {
						goto l64
					}
				}
			l66:
				add(ruledotChildIdentifier, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 14 bracketChildIdentifier <- <(bracketNodeIdentifier (sep bracketNodeIdentifier Action11)* !sep)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[rulebracketNodeIdentifier]() {
					goto l130
				}
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l133
					}
					if !_rules[rulebracketNodeIdentifier]() {
						goto l133
					}
					if !_rules[ruleAction11]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				{
					position134, tokenIndex134 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l134
					}
					goto l130
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
				add(rulebracketChildIdentifier, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 15 bracketNodeIdentifier <- <(wildcardIdentifier / singleQuotedNodeIdentifier / doubleQuotedNodeIdentifier)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rulewildcardIdentifier]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[rulesingleQuotedNodeIdentifier]() {
						goto l139
					}
					goto l137
				l139:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[ruledoubleQuotedNodeIdentifier]() {
						goto l135
					}
				}
			l137:
				add(rulebracketNodeIdentifier, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 16 wildcardIdentifier <- <('*' Action12)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if buffer[position] != rune('*') {
					goto l140
				}
				position++
				if !_rules[ruleAction12]() {
					goto l140
				}
				add(rulewildcardIdentifier, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 17 singleQuotedNodeIdentifier <- <('\'' <(('\\' ('\'' / '/' / '\\' / 'b' / 'f' / 'n' / 'r' / 't')) / ('\\' 'u' ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F]))) / (!('\'' / '\\') .))*> '\'' Action13)> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('\'') {
					goto l142
				}
				position++
				{
					position144 := position
				l145:
					{
						position146, tokenIndex146 := position, tokenIndex
						{
							position147, tokenIndex147 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l148
							}
							position++
							{
								position149, tokenIndex149 := position, tokenIndex
								if buffer[position] != rune('\'') {
									goto l150
								}
								position++
								goto l149
							l150:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('/') {
									goto l151
								}
								position++
								goto l149
							l151:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('\\') {
									goto l152
								}
								position++
								goto l149
							l152:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('b') {
									goto l153
								}
								position++
								goto l149
							l153:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('f') {
									goto l154
								}
								position++
								goto l149
							l154:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('n') {
									goto l155
								}
								position++
								goto l149
							l155:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('r') {
									goto l156
								}
								position++
								goto l149
							l156:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('t') {
									goto l148
								}
								position++
							}
						l149:
							goto l147
						l148:
							position, tokenIndex = position147, tokenIndex147
							if buffer[position] != rune('\\') {
								goto l157
							}
							position++
							if buffer[position] != rune('u') {
								goto l157
							}
							position++
							{
								position158, tokenIndex158 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l159
								}
								position++
								goto l158
							l159:
								position, tokenIndex = position158, tokenIndex158
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l160
								}
								position++
								goto l158
							l160:
								position, tokenIndex = position158, tokenIndex158
								{
									position161, tokenIndex161 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l162
									}
									position++
									goto l161
								l162:
									position, tokenIndex = position161, tokenIndex161
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l157
									}
									position++
								}
							l161:
							}
						l158:
							{
								position163, tokenIndex163 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l164
								}
								position++
								goto l163
							l164:
								position, tokenIndex = position163, tokenIndex163
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l165
								}
								position++
								goto l163
							l165:
								position, tokenIndex = position163, tokenIndex163
								{
									position166, tokenIndex166 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l167
									}
									position++
									goto l166
								l167:
									position, tokenIndex = position166, tokenIndex166
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l157
									}
									position++
								}
							l166:
							}
						l163:
							{
								position168, tokenIndex168 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l169
								}
								position++
								goto l168
							l169:
								position, tokenIndex = position168, tokenIndex168
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l170
								}
								position++
								goto l168
							l170:
								position, tokenIndex = position168, tokenIndex168
								{
									position171, tokenIndex171 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l172
									}
									position++
									goto l171
								l172:
									position, tokenIndex = position171, tokenIndex171
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l157
									}
									position++
								}
							l171:
							}
						l168:
							{
								position173, tokenIndex173 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l174
								}
								position++
								goto l173
							l174:
								position, tokenIndex = position173, tokenIndex173
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l175
								}
								position++
								goto l173
							l175:
								position, tokenIndex = position173, tokenIndex173
								{
									position176, tokenIndex176 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l177
									}
									position++
									goto l176
								l177:
									position, tokenIndex = position176, tokenIndex176
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l157
									}
									position++
								}
							l176:
							}
						l173:
							goto l147
						l157:
							position, tokenIndex = position147, tokenIndex147
							{
								position178, tokenIndex178 := position, tokenIndex
								{
									position179, tokenIndex179 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l180
									}
									position++
									goto l179
								l180:
									position, tokenIndex = position179, tokenIndex179
									if buffer[position] != rune('\\') {
										goto l178
									}
									position++
								}
							l179:
								goto l146
							l178:
								position, tokenIndex = position178, tokenIndex178
							}
							if !matchDot() {
								goto l146
							}
						}
					l147:
						goto l145
					l146:
						position, tokenIndex = position146, tokenIndex146
					}
					add(rulePegText, position144)
				}
				if buffer[position] != rune('\'') {
					goto l142
				}
				position++
				if !_rules[ruleAction13]() {
					goto l142
				}
				add(rulesingleQuotedNodeIdentifier, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 18 doubleQuotedNodeIdentifier <- <('"' <(('\\' ('"' / '/' / '\\' / 'b' / 'f' / 'n' / 'r' / 't')) / ('\\' 'u' ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F])) ([0-9] / [0-9] / ([a-f] / [A-F]))) / (!('"' / '\\') .))*> '"' Action14)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune('"') {
					goto l181
				}
				position++
				{
					position183 := position
				l184:
					{
						position185, tokenIndex185 := position, tokenIndex
						{
							position186, tokenIndex186 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l187
							}
							position++
							{
								position188, tokenIndex188 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l189
								}
								position++
								goto l188
							l189:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('/') {
									goto l190
								}
								position++
								goto l188
							l190:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('\\') {
									goto l191
								}
								position++
								goto l188
							l191:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('b') {
									goto l192
								}
								position++
								goto l188
							l192:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('f') {
									goto l193
								}
								position++
								goto l188
							l193:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('n') {
									goto l194
								}
								position++
								goto l188
							l194:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('r') {
									goto l195
								}
								position++
								goto l188
							l195:
								position, tokenIndex = position188, tokenIndex188
								if buffer[position] != rune('t') {
									goto l187
								}
								position++
							}
						l188:
							goto l186
						l187:
							position, tokenIndex = position186, tokenIndex186
							if buffer[position] != rune('\\') {
								goto l196
							}
							position++
							if buffer[position] != rune('u') {
								goto l196
							}
							position++
							{
								position197, tokenIndex197 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l198
								}
								position++
								goto l197
							l198:
								position, tokenIndex = position197, tokenIndex197
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l199
								}
								position++
								goto l197
							l199:
								position, tokenIndex = position197, tokenIndex197
								{
									position200, tokenIndex200 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l201
									}
									position++
									goto l200
								l201:
									position, tokenIndex = position200, tokenIndex200
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l196
									}
									position++
								}
							l200:
							}
						l197:
							{
								position202, tokenIndex202 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l203
								}
								position++
								goto l202
							l203:
								position, tokenIndex = position202, tokenIndex202
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l204
								}
								position++
								goto l202
							l204:
								position, tokenIndex = position202, tokenIndex202
								{
									position205, tokenIndex205 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l206
									}
									position++
									goto l205
								l206:
									position, tokenIndex = position205, tokenIndex205
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l196
									}
									position++
								}
							l205:
							}
						l202:
							{
								position207, tokenIndex207 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l208
								}
								position++
								goto l207
							l208:
								position, tokenIndex = position207, tokenIndex207
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l209
								}
								position++
								goto l207
							l209:
								position, tokenIndex = position207, tokenIndex207
								{
									position210, tokenIndex210 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l211
									}
									position++
									goto l210
								l211:
									position, tokenIndex = position210, tokenIndex210
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l196
									}
									position++
								}
							l210:
							}
						l207:
							{
								position212, tokenIndex212 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l213
								}
								position++
								goto l212
							l213:
								position, tokenIndex = position212, tokenIndex212
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l214
								}
								position++
								goto l212
							l214:
								position, tokenIndex = position212, tokenIndex212
								{
									position215, tokenIndex215 := position, tokenIndex
									if c := buffer[position]; c < rune('a') || c > rune('f') {
										goto l216
									}
									position++
									goto l215
								l216:
									position, tokenIndex = position215, tokenIndex215
									if c := buffer[position]; c < rune('A') || c > rune('F') {
										goto l196
									}
									position++
								}
							l215:
							}
						l212:
							goto l186
						l196:
							position, tokenIndex = position186, tokenIndex186
							{
								position217, tokenIndex217 := position, tokenIndex
								{
									position218, tokenIndex218 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l219
									}
									position++
									goto l218
								l219:
									position, tokenIndex = position218, tokenIndex218
									if buffer[position] != rune('\\') {
										goto l217
									}
									position++
								}
							l218:
								goto l185
							l217:
								position, tokenIndex = position217, tokenIndex217
							}
							if !matchDot() {
								goto l185
							}
						}
					l186:
						goto l184
					l185:
						position, tokenIndex = position185, tokenIndex185
					}
					add(rulePegText, position183)
				}
				if buffer[position] != rune('"') {
					goto l181
				}
				position++
				if !_rules[ruleAction14]() {
					goto l181
				}
				add(ruledoubleQuotedNodeIdentifier, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 19 qualifier <- <(union / script / filter)> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222, tokenIndex222 := position, tokenIndex
					if !_rules[ruleunion]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[rulescript]() {
						goto l224
					}
					goto l222
				l224:
					position, tokenIndex = position222, tokenIndex222
					if !_rules[rulefilter]() {
						goto l220
					}
				}
			l222:
				add(rulequalifier, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 20 union <- <(index (sep index Action15)* !sep)> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if !_rules[ruleindex]() {
					goto l225
				}
			l227:
				{
					position228, tokenIndex228 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l228
					}
					if !_rules[ruleindex]() {
						goto l228
					}
					if !_rules[ruleAction15]() {
						goto l228
					}
					goto l227
				l228:
					position, tokenIndex = position228, tokenIndex228
				}
				{
					position229, tokenIndex229 := position, tokenIndex
					if !_rules[rulesep]() {
						goto l229
					}
					goto l225
				l229:
					position, tokenIndex = position229, tokenIndex229
				}
				add(ruleunion, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 21 index <- <(((slice Action16) / (<indexNumber> Action17) / ('*' Action18)) Action19)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if !_rules[ruleslice]() {
						goto l233
					}
					if !_rules[ruleAction16]() {
						goto l233
					}
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					{
						position235 := position
						if !_rules[ruleindexNumber]() {
							goto l234
						}
						add(rulePegText, position235)
					}
					if !_rules[ruleAction17]() {
						goto l234
					}
					goto l232
				l234:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('*') {
						goto l230
					}
					position++
					if !_rules[ruleAction18]() {
						goto l230
					}
				}
			l232:
				if !_rules[ruleAction19]() {
					goto l230
				}
				add(ruleindex, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 22 slice <- <(anyIndex sepSlice anyIndex ((sepSlice anyIndex) / (space Action20)))> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				if !_rules[ruleanyIndex]() {
					goto l236
				}
				if !_rules[rulesepSlice]() {
					goto l236
				}
				if !_rules[ruleanyIndex]() {
					goto l236
				}
				{
					position238, tokenIndex238 := position, tokenIndex
					if !_rules[rulesepSlice]() {
						goto l239
					}
					if !_rules[ruleanyIndex]() {
						goto l239
					}
					goto l238
				l239:
					position, tokenIndex = position238, tokenIndex238
					if !_rules[rulespace]() {
						goto l236
					}
					if !_rules[ruleAction20]() {
						goto l236
					}
				}
			l238:
				add(ruleslice, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 23 anyIndex <- <(<indexNumber?> Action21)> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				{
					position242 := position
					{
						position243, tokenIndex243 := position, tokenIndex
						if !_rules[ruleindexNumber]() {
							goto l243
						}
						goto l244
					l243:
						position, tokenIndex = position243, tokenIndex243
					}
				l244:
					add(rulePegText, position242)
				}
				if !_rules[ruleAction21]() {
					goto l240
				}
				add(ruleanyIndex, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 24 indexNumber <- <(('-' / '+')? [0-9]+)> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				{
					position247, tokenIndex247 := position, tokenIndex
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('+') {
							goto l247
						}
						position++
					}
				l249:
					goto l248
				l247:
					position, tokenIndex = position247, tokenIndex247
				}
			l248:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l245
				}
				position++
			l251:
				{
					position252, tokenIndex252 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l252
					}
					position++
					goto l251
				l252:
					position, tokenIndex = position252, tokenIndex252
				}
				add(ruleindexNumber, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 25 sep <- <(space ',' space)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if !_rules[rulespace]() {
					goto l253
				}
				if buffer[position] != rune(',') {
					goto l253
				}
				position++
				if !_rules[rulespace]() {
					goto l253
				}
				add(rulesep, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 26 sepSlice <- <(space ':' space)> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				if !_rules[rulespace]() {
					goto l255
				}
				if buffer[position] != rune(':') {
					goto l255
				}
				position++
				if !_rules[rulespace]() {
					goto l255
				}
				add(rulesepSlice, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 27 script <- <(scriptStart <command> scriptEnd Action22)> */
		func() bool {
			position257, tokenIndex257 := position, tokenIndex
			{
				position258 := position
				if !_rules[rulescriptStart]() {
					goto l257
				}
				{
					position259 := position
					if !_rules[rulecommand]() {
						goto l257
					}
					add(rulePegText, position259)
				}
				if !_rules[rulescriptEnd]() {
					goto l257
				}
				if !_rules[ruleAction22]() {
					goto l257
				}
				add(rulescript, position258)
			}
			return true
		l257:
			position, tokenIndex = position257, tokenIndex257
			return false
		},
		/* 28 command <- <(!')' .)+> */
		func() bool {
			position260, tokenIndex260 := position, tokenIndex
			{
				position261 := position
				{
					position264, tokenIndex264 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l264
					}
					position++
					goto l260
				l264:
					position, tokenIndex = position264, tokenIndex264
				}
				if !matchDot() {
					goto l260
				}
			l262:
				{
					position263, tokenIndex263 := position, tokenIndex
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune(')') {
							goto l265
						}
						position++
						goto l263
					l265:
						position, tokenIndex = position265, tokenIndex265
					}
					if !matchDot() {
						goto l263
					}
					goto l262
				l263:
					position, tokenIndex = position263, tokenIndex263
				}
				add(rulecommand, position261)
			}
			return true
		l260:
			position, tokenIndex = position260, tokenIndex260
			return false
		},
		/* 29 filter <- <(filterStart query filterEnd Action23)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if !_rules[rulefilterStart]() {
					goto l266
				}
				if !_rules[rulequery]() {
					goto l266
				}
				if !_rules[rulefilterEnd]() {
					goto l266
				}
				if !_rules[ruleAction23]() {
					goto l266
				}
				add(rulefilter, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 30 query <- <(andQuery (logicOr andQuery Action24)*)> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if !_rules[ruleandQuery]() {
					goto l268
				}
			l270:
				{
					position271, tokenIndex271 := position, tokenIndex
					if !_rules[rulelogicOr]() {
						goto l271
					}
					if !_rules[ruleandQuery]() {
						goto l271
					}
					if !_rules[ruleAction24]() {
						goto l271
					}
					goto l270
				l271:
					position, tokenIndex = position271, tokenIndex271
				}
				add(rulequery, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 31 andQuery <- <(basicQuery (logicAnd basicQuery Action25)*)> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				if !_rules[rulebasicQuery]() {
					goto l272
				}
			l274:
				{
					position275, tokenIndex275 := position, tokenIndex
					if !_rules[rulelogicAnd]() {
						goto l275
					}
					if !_rules[rulebasicQuery]() {
						goto l275
					}
					if !_rules[ruleAction25]() {
						goto l275
					}
					goto l274
				l275:
					position, tokenIndex = position275, tokenIndex275
				}
				add(ruleandQuery, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 32 basicQuery <- <((subQueryStart query subQueryEnd) / (<comparator> Action26) / (<(logicNot? jsonpathFilter)> Action27))> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				{
					position278, tokenIndex278 := position, tokenIndex
					if !_rules[rulesubQueryStart]() {
						goto l279
					}
					if !_rules[rulequery]() {
						goto l279
					}
					if !_rules[rulesubQueryEnd]() {
						goto l279
					}
					goto l278
				l279:
					position, tokenIndex = position278, tokenIndex278
					{
						position281 := position
						if !_rules[rulecomparator]() {
							goto l280
						}
						add(rulePegText, position281)
					}
					if !_rules[ruleAction26]() {
						goto l280
					}
					goto l278
				l280:
					position, tokenIndex = position278, tokenIndex278
					{
						position282 := position
						{
							position283, tokenIndex283 := position, tokenIndex
							if !_rules[rulelogicNot]() {
								goto l283
							}
							goto l284
						l283:
							position, tokenIndex = position283, tokenIndex283
						}
					l284:
						if !_rules[rulejsonpathFilter]() {
							goto l276
						}
						add(rulePegText, position282)
					}
					if !_rules[ruleAction27]() {
						goto l276
					}
				}
			l278:
				add(rulebasicQuery, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 33 logicOr <- <(space ('|' '|') space)> */
		func() bool {
			position285, tokenIndex285 := position, tokenIndex
			{
				position286 := position
				if !_rules[rulespace]() {
					goto l285
				}
				if buffer[position] != rune('|') {
					goto l285
				}
				position++
				if buffer[position] != rune('|') {
					goto l285
				}
				position++
				if !_rules[rulespace]() {
					goto l285
				}
				add(rulelogicOr, position286)
			}
			return true
		l285:
			position, tokenIndex = position285, tokenIndex285
			return false
		},
		/* 34 logicAnd <- <(space ('&' '&') space)> */
		func() bool {
			position287, tokenIndex287 := position, tokenIndex
			{
				position288 := position
				if !_rules[rulespace]() {
					goto l287
				}
				if buffer[position] != rune('&') {
					goto l287
				}
				position++
				if buffer[position] != rune('&') {
					goto l287
				}
				position++
				if !_rules[rulespace]() {
					goto l287
				}
				add(rulelogicAnd, position288)
			}
			return true
		l287:
			position, tokenIndex = position287, tokenIndex287
			return false
		},
		/* 35 logicNot <- <('!' space)> */
		func() bool {
			position289, tokenIndex289 := position, tokenIndex
			{
				position290 := position
				if buffer[position] != rune('!') {
					goto l289
				}
				position++
				if !_rules[rulespace]() {
					goto l289
				}
				add(rulelogicNot, position290)
			}
			return true
		l289:
			position, tokenIndex = position289, tokenIndex289
			return false
		},
		/* 36 comparator <- <((qParam space (('=' '=' space qParam Action28) / ('!' '=' space qParam Action29))) / (qNumericParam space (('<' '=' space qNumericParam Action30) / ('<' space qNumericParam Action31) / ('>' '=' space qNumericParam Action32) / ('>' space qNumericParam Action33))) / (singleJsonpathFilter space ('=' '~') space '/' <regex> '/' Action34))> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				{
					position293, tokenIndex293 := position, tokenIndex
					if !_rules[ruleqParam]() {
						goto l294
					}
					if !_rules[rulespace]() {
						goto l294
					}
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l296
						}
						position++
						if buffer[position] != rune('=') {
							goto l296
						}
						position++
						if !_rules[rulespace]() {
							goto l296
						}
						if !_rules[ruleqParam]() {
							goto l296
						}
						if !_rules[ruleAction28]() {
							goto l296
						}
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('!') {
							goto l294
						}
						position++
						if buffer[position] != rune('=') {
							goto l294
						}
						position++
						if !_rules[rulespace]() {
							goto l294
						}
						if !_rules[ruleqParam]() {
							goto l294
						}
						if !_rules[ruleAction29]() {
							goto l294
						}
					}
				l295:
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					if !_rules[ruleqNumericParam]() {
						goto l297
					}
					if !_rules[rulespace]() {
						goto l297
					}
					{
						position298, tokenIndex298 := position, tokenIndex
						if buffer[position] != rune('<') {
							goto l299
						}
						position++
						if buffer[position] != rune('=') {
							goto l299
						}
						position++
						if !_rules[rulespace]() {
							goto l299
						}
						if !_rules[ruleqNumericParam]() {
							goto l299
						}
						if !_rules[ruleAction30]() {
							goto l299
						}
						goto l298
					l299:
						position, tokenIndex = position298, tokenIndex298
						if buffer[position] != rune('<') {
							goto l300
						}
						position++
						if !_rules[rulespace]() {
							goto l300
						}
						if !_rules[ruleqNumericParam]() {
							goto l300
						}
						if !_rules[ruleAction31]() {
							goto l300
						}
						goto l298
					l300:
						position, tokenIndex = position298, tokenIndex298
						if buffer[position] != rune('>') {
							goto l301
						}
						position++
						if buffer[position] != rune('=') {
							goto l301
						}
						position++
						if !_rules[rulespace]() {
							goto l301
						}
						if !_rules[ruleqNumericParam]() {
							goto l301
						}
						if !_rules[ruleAction32]() {
							goto l301
						}
						goto l298
					l301:
						position, tokenIndex = position298, tokenIndex298
						if buffer[position] != rune('>') {
							goto l297
						}
						position++
						if !_rules[rulespace]() {
							goto l297
						}
						if !_rules[ruleqNumericParam]() {
							goto l297
						}
						if !_rules[ruleAction33]() {
							goto l297
						}
					}
				l298:
					goto l293
				l297:
					position, tokenIndex = position293, tokenIndex293
					if !_rules[rulesingleJsonpathFilter]() {
						goto l291
					}
					if !_rules[rulespace]() {
						goto l291
					}
					if buffer[position] != rune('=') {
						goto l291
					}
					position++
					if buffer[position] != rune('~') {
						goto l291
					}
					position++
					if !_rules[rulespace]() {
						goto l291
					}
					if buffer[position] != rune('/') {
						goto l291
					}
					position++
					{
						position302 := position
						if !_rules[ruleregex]() {
							goto l291
						}
						add(rulePegText, position302)
					}
					if buffer[position] != rune('/') {
						goto l291
					}
					position++
					if !_rules[ruleAction34]() {
						goto l291
					}
				}
			l293:
				add(rulecomparator, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 37 qParam <- <((qLiteral Action35) / singleJsonpathFilter)> */
		func() bool {
			position303, tokenIndex303 := position, tokenIndex
			{
				position304 := position
				{
					position305, tokenIndex305 := position, tokenIndex
					if !_rules[ruleqLiteral]() {
						goto l306
					}
					if !_rules[ruleAction35]() {
						goto l306
					}
					goto l305
				l306:
					position, tokenIndex = position305, tokenIndex305
					if !_rules[rulesingleJsonpathFilter]() {
						goto l303
					}
				}
			l305:
				add(ruleqParam, position304)
			}
			return true
		l303:
			position, tokenIndex = position303, tokenIndex303
			return false
		},
		/* 38 qNumericParam <- <((lNumber Action36) / singleJsonpathFilter)> */
		func() bool {
			position307, tokenIndex307 := position, tokenIndex
			{
				position308 := position
				{
					position309, tokenIndex309 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l310
					}
					if !_rules[ruleAction36]() {
						goto l310
					}
					goto l309
				l310:
					position, tokenIndex = position309, tokenIndex309
					if !_rules[rulesingleJsonpathFilter]() {
						goto l307
					}
				}
			l309:
				add(ruleqNumericParam, position308)
			}
			return true
		l307:
			position, tokenIndex = position307, tokenIndex307
			return false
		},
		/* 39 qLiteral <- <(lNumber / lBool / lString / lNull)> */
		func() bool {
			position311, tokenIndex311 := position, tokenIndex
			{
				position312 := position
				{
					position313, tokenIndex313 := position, tokenIndex
					if !_rules[rulelNumber]() {
						goto l314
					}
					goto l313
				l314:
					position, tokenIndex = position313, tokenIndex313
					if !_rules[rulelBool]() {
						goto l315
					}
					goto l313
				l315:
					position, tokenIndex = position313, tokenIndex313
					if !_rules[rulelString]() {
						goto l316
					}
					goto l313
				l316:
					position, tokenIndex = position313, tokenIndex313
					if !_rules[rulelNull]() {
						goto l311
					}
				}
			l313:
				add(ruleqLiteral, position312)
			}
			return true
		l311:
			position, tokenIndex = position311, tokenIndex311
			return false
		},
		/* 40 singleJsonpathFilter <- <(<jsonpathFilter> Action37)> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				{
					position319 := position
					if !_rules[rulejsonpathFilter]() {
						goto l317
					}
					add(rulePegText, position319)
				}
				if !_rules[ruleAction37]() {
					goto l317
				}
				add(rulesingleJsonpathFilter, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 41 jsonpathFilter <- <(Action38 jsonpathParameter Action39)> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				if !_rules[ruleAction38]() {
					goto l320
				}
				if !_rules[rulejsonpathParameter]() {
					goto l320
				}
				if !_rules[ruleAction39]() {
					goto l320
				}
				add(rulejsonpathFilter, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 42 lNumber <- <(<(('-' / '+')? [0-9] ('-' / '+' / '.' / [0-9] / [a-z] / [A-Z])*)> Action40)> */
		func() bool {
			position322, tokenIndex322 := position, tokenIndex
			{
				position323 := position
				{
					position324 := position
					{
						position325, tokenIndex325 := position, tokenIndex
						{
							position327, tokenIndex327 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l328
							}
							position++
							goto l327
						l328:
							position, tokenIndex = position327, tokenIndex327
							if buffer[position] != rune('+') {
								goto l325
							}
							position++
						}
					l327:
						goto l326
					l325:
						position, tokenIndex = position325, tokenIndex325
					}
				l326:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l322
					}
					position++
				l329:
					{
						position330, tokenIndex330 := position, tokenIndex
						{
							position331, tokenIndex331 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l332
							}
							position++
							goto l331
						l332:
							position, tokenIndex = position331, tokenIndex331
							if buffer[position] != rune('+') {
								goto l333
							}
							position++
							goto l331
						l333:
							position, tokenIndex = position331, tokenIndex331
							if buffer[position] != rune('.') {
								goto l334
							}
							position++
							goto l331
						l334:
							position, tokenIndex = position331, tokenIndex331
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l335
							}
							position++
							goto l331
						l335:
							position, tokenIndex = position331, tokenIndex331
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l336
							}
							position++
							goto l331
						l336:
							position, tokenIndex = position331, tokenIndex331
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l330
							}
							position++
						}
					l331:
						goto l329
					l330:
						position, tokenIndex = position330, tokenIndex330
					}
					add(rulePegText, position324)
				}
				if !_rules[ruleAction40]() {
					goto l322
				}
				add(rulelNumber, position323)
			}
			return true
		l322:
			position, tokenIndex = position322, tokenIndex322
			return false
		},
		/* 43 lBool <- <(((('t' 'r' 'u' 'e') / ('T' 'r' 'u' 'e') / ('T' 'R' 'U' 'E')) Action41) / ((('f' 'a' 'l' 's' 'e') / ('F' 'a' 'l' 's' 'e') / ('F' 'A' 'L' 'S' 'E')) Action42))> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339, tokenIndex339 := position, tokenIndex
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l342
						}
						position++
						if buffer[position] != rune('r') {
							goto l342
						}
						position++
						if buffer[position] != rune('u') {
							goto l342
						}
						position++
						if buffer[position] != rune('e') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('T') {
							goto l343
						}
						position++
						if buffer[position] != rune('r') {
							goto l343
						}
						position++
						if buffer[position] != rune('u') {
							goto l343
						}
						position++
						if buffer[position] != rune('e') {
							goto l343
						}
						position++
						goto l341
					l343:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('T') {
							goto l340
						}
						position++
						if buffer[position] != rune('R') {
							goto l340
						}
						position++
						if buffer[position] != rune('U') {
							goto l340
						}
						position++
						if buffer[position] != rune('E') {
							goto l340
						}
						position++
					}
				l341:
					if !_rules[ruleAction41]() {
						goto l340
					}
					goto l339
				l340:
					position, tokenIndex = position339, tokenIndex339
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l345
						}
						position++
						if buffer[position] != rune('a') {
							goto l345
						}
						position++
						if buffer[position] != rune('l') {
							goto l345
						}
						position++
						if buffer[position] != rune('s') {
							goto l345
						}
						position++
						if buffer[position] != rune('e') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('F') {
							goto l346
						}
						position++
						if buffer[position] != rune('a') {
							goto l346
						}
						position++
						if buffer[position] != rune('l') {
							goto l346
						}
						position++
						if buffer[position] != rune('s') {
							goto l346
						}
						position++
						if buffer[position] != rune('e') {
							goto l346
						}
						position++
						goto l344
					l346:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('F') {
							goto l337
						}
						position++
						if buffer[position] != rune('A') {
							goto l337
						}
						position++
						if buffer[position] != rune('L') {
							goto l337
						}
						position++
						if buffer[position] != rune('S') {
							goto l337
						}
						position++
						if buffer[position] != rune('E') {
							goto l337
						}
						position++
					}
				l344:
					if !_rules[ruleAction42]() {
						goto l337
					}
				}
			l339:
				add(rulelBool, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 44 lString <- <(('\'' <(('\\' '\\') / ('\\' '\'') / (!'\'' .))*> '\'' Action43) / ('"' <(('\\' '\\') / ('\\' '"') / (!'"' .))*> '"' Action44))> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				{
					position349, tokenIndex349 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l350
					}
					position++
					{
						position351 := position
					l352:
						{
							position353, tokenIndex353 := position, tokenIndex
							{
								position354, tokenIndex354 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l355
								}
								position++
								if buffer[position] != rune('\\') {
									goto l355
								}
								position++
								goto l354
							l355:
								position, tokenIndex = position354, tokenIndex354
								if buffer[position] != rune('\\') {
									goto l356
								}
								position++
								if buffer[position] != rune('\'') {
									goto l356
								}
								position++
								goto l354
							l356:
								position, tokenIndex = position354, tokenIndex354
								{
									position357, tokenIndex357 := position, tokenIndex
									if buffer[position] != rune('\'') {
										goto l357
									}
									position++
									goto l353
								l357:
									position, tokenIndex = position357, tokenIndex357
								}
								if !matchDot() {
									goto l353
								}
							}
						l354:
							goto l352
						l353:
							position, tokenIndex = position353, tokenIndex353
						}
						add(rulePegText, position351)
					}
					if buffer[position] != rune('\'') {
						goto l350
					}
					position++
					if !_rules[ruleAction43]() {
						goto l350
					}
					goto l349
				l350:
					position, tokenIndex = position349, tokenIndex349
					if buffer[position] != rune('"') {
						goto l347
					}
					position++
					{
						position358 := position
					l359:
						{
							position360, tokenIndex360 := position, tokenIndex
							{
								position361, tokenIndex361 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l362
								}
								position++
								if buffer[position] != rune('\\') {
									goto l362
								}
								position++
								goto l361
							l362:
								position, tokenIndex = position361, tokenIndex361
								if buffer[position] != rune('\\') {
									goto l363
								}
								position++
								if buffer[position] != rune('"') {
									goto l363
								}
								position++
								goto l361
							l363:
								position, tokenIndex = position361, tokenIndex361
								{
									position364, tokenIndex364 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l364
									}
									position++
									goto l360
								l364:
									position, tokenIndex = position364, tokenIndex364
								}
								if !matchDot() {
									goto l360
								}
							}
						l361:
							goto l359
						l360:
							position, tokenIndex = position360, tokenIndex360
						}
						add(rulePegText, position358)
					}
					if buffer[position] != rune('"') {
						goto l347
					}
					position++
					if !_rules[ruleAction44]() {
						goto l347
					}
				}
			l349:
				add(rulelString, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 45 lNull <- <((('n' 'u' 'l' 'l') / ('N' 'u' 'l' 'l') / ('N' 'U' 'L' 'L')) Action45)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				{
					position367, tokenIndex367 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('l') {
						goto l368
					}
					position++
					if buffer[position] != rune('l') {
						goto l368
					}
					position++
					goto l367
				l368:
					position, tokenIndex = position367, tokenIndex367
					if buffer[position] != rune('N') {
						goto l369
					}
					position++
					if buffer[position] != rune('u') {
						goto l369
					}
					position++
					if buffer[position] != rune('l') {
						goto l369
					}
					position++
					if buffer[position] != rune('l') {
						goto l369
					}
					position++
					goto l367
				l369:
					position, tokenIndex = position367, tokenIndex367
					if buffer[position] != rune('N') {
						goto l365
					}
					position++
					if buffer[position] != rune('U') {
						goto l365
					}
					position++
					if buffer[position] != rune('L') {
						goto l365
					}
					position++
					if buffer[position] != rune('L') {
						goto l365
					}
					position++
				}
			l367:
				if !_rules[ruleAction45]() {
					goto l365
				}
				add(rulelNull, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 46 regex <- <(('\\' '\\') / ('\\' '/') / (!'/' .))*> */
		func() bool {
			{
				position371 := position
			l372:
				{
					position373, tokenIndex373 := position, tokenIndex
					{
						position374, tokenIndex374 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l375
						}
						position++
						if buffer[position] != rune('\\') {
							goto l375
						}
						position++
						goto l374
					l375:
						position, tokenIndex = position374, tokenIndex374
						if buffer[position] != rune('\\') {
							goto l376
						}
						position++
						if buffer[position] != rune('/') {
							goto l376
						}
						position++
						goto l374
					l376:
						position, tokenIndex = position374, tokenIndex374
						{
							position377, tokenIndex377 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l377
							}
							position++
							goto l373
						l377:
							position, tokenIndex = position377, tokenIndex377
						}
						if !matchDot() {
							goto l373
						}
					}
				l374:
					goto l372
				l373:
					position, tokenIndex = position373, tokenIndex373
				}
				add(ruleregex, position371)
			}
			return true
		},
		/* 47 squareBracketStart <- <('[' space)> */
		func() bool {
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				if buffer[position] != rune('[') {
					goto l378
				}
				position++
				if !_rules[rulespace]() {
					goto l378
				}
				add(rulesquareBracketStart, position379)
			}
			return true
		l378:
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 48 squareBracketEnd <- <(space ']')> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				if !_rules[rulespace]() {
					goto l380
				}
				if buffer[position] != rune(']') {
					goto l380
				}
				position++
				add(rulesquareBracketEnd, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 49 scriptStart <- <('(' space)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				if buffer[position] != rune('(') {
					goto l382
				}
				position++
				if !_rules[rulespace]() {
					goto l382
				}
				add(rulescriptStart, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 50 scriptEnd <- <(space ')')> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if !_rules[rulespace]() {
					goto l384
				}
				if buffer[position] != rune(')') {
					goto l384
				}
				position++
				add(rulescriptEnd, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 51 filterStart <- <('?' '(' space)> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if buffer[position] != rune('?') {
					goto l386
				}
				position++
				if buffer[position] != rune('(') {
					goto l386
				}
				position++
				if !_rules[rulespace]() {
					goto l386
				}
				add(rulefilterStart, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 52 filterEnd <- <(space ')')> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				if !_rules[rulespace]() {
					goto l388
				}
				if buffer[position] != rune(')') {
					goto l388
				}
				position++
				add(rulefilterEnd, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 53 subQueryStart <- <('(' space)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if buffer[position] != rune('(') {
					goto l390
				}
				position++
				if !_rules[rulespace]() {
					goto l390
				}
				add(rulesubQueryStart, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 54 subQueryEnd <- <(space ')')> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				if !_rules[rulespace]() {
					goto l392
				}
				if buffer[position] != rune(')') {
					goto l392
				}
				position++
				add(rulesubQueryEnd, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 55 space <- <(' ' / '\t')*> */
		func() bool {
			{
				position395 := position
			l396:
				{
					position397, tokenIndex397 := position, tokenIndex
					{
						position398, tokenIndex398 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l399
						}
						position++
						goto l398
					l399:
						position, tokenIndex = position398, tokenIndex398
						if buffer[position] != rune('\t') {
							goto l397
						}
						position++
					}
				l398:
					goto l396
				l397:
					position, tokenIndex = position397, tokenIndex397
				}
				add(rulespace, position395)
			}
			return true
		},
		/* 57 Action0 <- <{
		    p.root = p.deleteRootIdentifier(p.pop().(syntaxNode))
		    p.setConnectedText(p.root)
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 59 Action1 <- <{
		    panic(p.syntaxErr(
		        begin, msgErrorInvalidSyntaxUnrecognizedInput, buffer))
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 60 Action2 <- <{
		    p.setNodeChain()
		    p.updateRootValueGroup()
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 61 Action3 <- <{
		    p.pushRecursiveChildIdentifier(p.pop().(syntaxNode))
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 62 Action4 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 63 Action5 <- <{
		    p.pushFunction(text, p.pop().(string))
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 64 Action6 <- <{
		    p.push(text)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 65 Action7 <- <{
		    p.setLastNodeText(text)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 66 Action8 <- <{
		    p.pushRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 67 Action9 <- <{
		    p.pushCurrentRootIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 68 Action10 <- <{
		    p.pushChildSingleIdentifier(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 69 Action11 <- <{
		    identifier2 := p.pop().(syntaxNode)
		    identifier1 := p.pop().(syntaxNode)
		    p.pushChildMultiIdentifier(identifier1, identifier2)
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 70 Action12 <- <{
		    p.pushChildWildcardIdentifier()
		}> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 71 Action13 <- <{
		    p.pushChildSingleIdentifier(p.unescapeSingleQuotedString(text))
		}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 72 Action14 <- <{ // '
		    p.pushChildSingleIdentifier(p.unescapeDoubleQuotedString(text))
		}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 73 Action15 <- <{
		    childIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion := p.pop().(*syntaxUnionQualifier)
		    parentIndexUnion.merge(childIndexUnion)
		    parentIndexUnion.setValueGroup()
		    p.push(parentIndexUnion)
		}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 74 Action16 <- <{
		    step  := p.pop().(*syntaxIndexSubscript)
		    end   := p.pop().(*syntaxIndexSubscript)
		    start := p.pop().(*syntaxIndexSubscript)

		    if step.isOmitted || step.number == 0 {
		        step.number = 1
		    }

		    if step.number > 0 {
		        p.pushSlicePositiveStepSubscript(start, end, step)
		    } else {
		        p.pushSliceNegativeStepSubscript(start, end, step)
		    }
		}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 75 Action17 <- <{
		    p.pushIndexSubscript(text)
		}> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 76 Action18 <- <{
		    p.pushWildcardSubscript()
		}> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 77 Action19 <- <{
		    p.pushUnionQualifier(p.pop().(syntaxSubscript))
		}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 78 Action20 <- <{
		    p.pushIndexSubscript(`1`)
		}> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 79 Action21 <- <{
		    if len(text) > 0 {
		        p.pushIndexSubscript(text)
		    } else {
		        p.pushOmittedIndexSubscript(`0`)
		    }
		}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 80 Action22 <- <{
		    p.pushScriptQualifier(text)
		}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 81 Action23 <- <{
		    p.pushFilterQualifier(p.pop().(syntaxQuery))
		}> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 82 Action24 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalOr(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 83 Action25 <- <{
		    rightQuery := p.pop().(syntaxQuery)
		    leftQuery := p.pop().(syntaxQuery)
		    p.pushLogicalAnd(leftQuery, rightQuery)
		}> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 84 Action26 <- <{
		    query := p.pop()
		    p.push(query)

		    if logicalNot, ok := query.(*syntaxLogicalNot); ok {
		        query = (*logicalNot).query
		    }
		    if checkQuery, ok := query.(*syntaxBasicCompareQuery); ok {
		        _, leftIsCurrentRoot := checkQuery.leftParam.param.(*syntaxQueryParamCurrentRoot)
		        _, rigthIsCurrentRoot := checkQuery.rightParam.param.(*syntaxQueryParamCurrentRoot)
		        if leftIsCurrentRoot && rigthIsCurrentRoot {
		            panic(p.syntaxErr(
		                begin, msgErrorInvalidSyntaxTwoCurrentNode, buffer))
		        }
		    }
		}> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 85 Action27 <- <{
		    _ = p.pop()
		    jsonpathFilter := p.pop().(syntaxQuery)
		    if text[0:1] == `!` {
		        p.pushLogicalNot(jsonpathFilter)
		    } else {
		        p.push(jsonpathFilter)
		    }
		}> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 86 Action28 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareEQ(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 87 Action29 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareNE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 88 Action30 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 89 Action31 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareGT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 90 Action32 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLE(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 91 Action33 <- <{
		    rightParam := p.pop().(*syntaxBasicCompareParameter)
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareLT(leftParam, rightParam)
		}> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 92 Action34 <- <{
		    leftParam := p.pop().(*syntaxBasicCompareParameter)
		    p.pushCompareRegex(leftParam, text)
		}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 93 Action35 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 94 Action36 <- <{
		    p.pushCompareParameterLiteral(p.pop())
		}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 95 Action37 <- <{
		    isLiteral := p.pop().(bool)
		    param := p.pop().(syntaxQueryJSONPathParameter)
		    if param.isValueGroupParameter() {
		        panic(p.syntaxErr(
		            begin, msgErrorInvalidSyntaxFilterValueGroup, buffer))
		    }
		    p.pushBasicCompareParameter(param.(syntaxQuery), isLiteral)
		}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 96 Action38 <- <{
		    p.saveParams()
		}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 97 Action39 <- <{
		    p.loadParams()

		    node := p.pop().(syntaxNode)
		    checkNode := node
		    if aggregateFunction, ok := node.(*syntaxAggregateFunction); ok {
		        checkNode = aggregateFunction.param
		    }

		    switch checkNode.(type) {
		    case *syntaxRootIdentifier:
		        p.pushCompareParameterRoot(p.deleteRootIdentifier(node))
		        p.push(true)
		    case *syntaxCurrentRootIdentifier:
		        p.pushCompareParameterCurrentRoot(p.deleteRootIdentifier(node))
		        p.push(false)
		    default:
		        p.push(&syntaxQueryParamRoot{})
		        p.push(true)
		    }
		}> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 98 Action40 <- <{
		    p.push(p.toFloat(text))
		}> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 99 Action41 <- <{
		    p.push(true)
		}> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 100 Action42 <- <{
		    p.push(false)
		}> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 101 Action43 <- <{
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 102 Action44 <- <{ // '
		    p.push(p.unescape(text))
		}> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 103 Action45 <- <{
		    p.push(nil)
		}> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
